		// 写image字段的内容
		// parameter:
		//		strID :    记录id
		//		timestamp: 时间戳
		//		buffer:    字节数组，将写到image字段
		//		strError:  error info
		// return:	
		//		-1: error
		//		-2: 时间戳不匹配
		//		0:  successed
		private int WriteImage(string strID,
			string strImageFieldName,
			int nStartOfTarget,       // 目标的起始位置
			byte[] sourceBuffer,
			int nStartOfBuffer,     // 缓冲区的实际位置 必须 >=0 
			int nNeedReadLength,    // 需要读缓冲区的长度可能是-1,表示从源流nSourceStart位置到末尾
			byte[] inputTimestamp,
			out byte[] outputTimestamp,
			out string strError)
		{
			strError = "";
			outputTimestamp = inputTimestamp;

			int chucksize = 32*1024;  //写库时每块为32K

			// 检查一下源流的范围是否合法
			if (nStartOfBuffer < 0)
			{
				strError = "nSourceStart不能小于0";
				return -1;
			}
			if (nNeedReadLength == -1)
			{
				nNeedReadLength = sourceBuffer.Length;
			}
			if (nStartOfBuffer + nNeedReadLength > sourceBuffer.Length)
			{
				strError = "源流起始位置[" + Convert.ToString(nStartOfBuffer + "]"
					+ " + 长度[" + Convert.ToString(nNeedReadLength)+ "]"
					+ " 超过源流总长度[" + Convert.ToString(sourceBuffer.Length)+ "]");
					return -1;
			}



			// 输入的时间戳为null时,返回实际的时间戳,并报时间戳不匹配
			if (inputTimestamp == null)   
			{
				// 得到旧时间戳
				outputTimestamp = this.GetTimestamp(strID);
				strError = "时间戳不匹配";
				return -2;
			}

			string strOutputTimestamp = "";
			string strCommand = "";
			SqlCommand command = null;

			SqlConnection connection = 	new SqlConnection(this.GetLocation());
			connection.Open();
			try
			{
				// 这一块同时取出时间戳,比较不匹配返回
				strCommand = "use " + this.GetSqlName() + " "
					+ " SELECT @Pointer=TEXTPTR(" + strImageFieldName + "),"
					+ " @Length=DataLength(" + strImageFieldName + "),"
					+ " @dptimestamp=dptimestamp "
					+ " FROM records "
					+ " WHERE id=@id";
				command = new SqlCommand(strCommand,
					connection);

				SqlParameter idParam  =
					command.Parameters.Add("@id",
					SqlDbType.NVarChar);
				idParam.Value = strID;

				SqlParameter PointerOutParam  =
					command.Parameters.Add("@Pointer",
					SqlDbType.VarBinary,
					100);
				PointerOutParam.Direction = ParameterDirection.Output;

				// 原image的长度
				SqlParameter LengthOutParam  =
					command.Parameters.Add("@Length",
					SqlDbType.Int);
				LengthOutParam.Direction = ParameterDirection.Output;

				SqlParameter dptimestampParam  =
					command.Parameters.Add("@dptimestamp",
					SqlDbType.NVarChar,
					100);
				dptimestampParam.Direction = ParameterDirection.Output;

				command.ExecuteNonQuery();

				// 比较时间戳
				strOutputTimestamp = (string)dptimestampParam.Value;
				outputTimestamp = Encoding.UTF8.GetBytes(strOutputTimestamp);
				if (ByteArray.CompareTwo(inputTimestamp,
					outputTimestamp) == false)
				{
					strError = "时间戳不匹配";
					return -2;
				}
			

				if (PointerOutParam == null)
				{
					strError = "没找到image指针";
					return -1;
				}
	

				// 2.执行更新操作,使用UPDATETEXT语句

				// UPDATETEXT命令说明:
				// dest_text_ptr: 指向要更新的image 数据的文本指针的值（由 TEXTPTR 函数返回）必须为 binary(16)
				// insert_offset: 以零为基的更新起始位置,
				//				  对于image 列，insert_offset 是在插入新数据前从现有列的起点开始要跳过的字节数
				//				  开始于这个以零为基的起始点的现有 image 数据向右移，为新数据腾出空间。
				//				  值为 0 表示将新数据插入到现有位置的开始处。值为 NULL 则将新数据追加到现有数据值中。
				// delete_length: 是从 insert_offset 位置开始的、要从现有 image 列中删除的数据长度。
				//				  delete_length 值对于 text 和 image 列用字节指定，对于 ntext 列用字符指定。每个 ntext 字符占用 2 个字节。
				//				  值为 0 表示不删除数据。值为 NULL 则删除现有 text 或 image 列中从 insert_offset 位置开始到末尾的所有数据。
				// WITH LOG:      在 Microsoft? SQL Server? 2000 中被忽略。在该版本中，日志记录由数据库的有效恢复模型决定。
				// inserted_data: 是要插入到现有 text、ntext 或 image 列 insert_offset 位置的数据。
				//				  这是单个 char、nchar、varchar、nvarchar、binary、varbinary、text、ntext 或 image 值。
				//				  inserted_data 可以是文字或变量。
				// 如何使用UPDATETEXT命令?
				// 替换现有数据:  指定一个非空 insert_offset 值、非零 delete_length 值和要插入的新数据。
				// 删除现有数据:  指定一个非空 insert_offset 值、非零 delete_length 值。不指定要插入的新数据。
				// 插入新数据:    指定 insert_offset 值、为零的 delete_length 值和要插入的新数据。
				strCommand = "use " + this.GetSqlName() + " "
					+ " UPDATETEXT records." + strImageFieldName
					+ " @dest_text_ptr"
					+ " @insert_offset"
					+ " @delete_length"
					+ " WITH LOG"
					+ " @inserted_data";   //不能加where语句

				command= new SqlCommand(strCommand,
					connection);

				// 给参数赋值
				SqlParameter dest_text_ptrParam  = 
					command.Parameters.Add("@dest_text_ptr", 
					SqlDbType.Binary,
					16);

				SqlParameter insert_offsetParam=
					command.Parameters.Add("@insert_offset",
					SqlDbType.Int);

				SqlParameter delete_lengthParam = 
					command.Parameters.Add("@delete_length",
					SqlDbType.Int);


				SqlParameter inserted_dataParam  =
					command.Parameters.Add("@inserted_data",
					SqlDbType.Binary,
					0);


				int insert_offset = nStartOfTarget; // 插入image字段的位置
				int nReadStart = nStartOfBuffer;         // 从源缓冲区中的读的起始位置
				Byte [] chuckBuffer = null; // 块缓冲区
				int nCount = 0;             // 影响的记录条数

				while(true)
				{
					// 已读的长度
					int nReadedLength = nReadStart - nStartOfBuffer;
					
					// 还需要读的长度
					int nContinueLength = nNeedReadLength - nReadedLength;
					if (nContinueLength >= chucksize)  // 从源流中读的长度
						nContinueLength = chucksize;

					inserted_dataParam.Size = nContinueLength;
					chuckBuffer = new byte[nContinueLength];

					// 拷到源数组的一段到每次用于写的chuckbuffer
					Array.Copy(sourceBuffer,
						nReadStart,
						chuckBuffer,
						0,
						nContinueLength);
					if(chuckBuffer.Length <= 0)
						break;

					dest_text_ptrParam.Value = PointerOutParam.Value;
					insert_offsetParam.Value = insert_offset;

					// 删除字段的长度
					int nDeletedLength = 0;
					if (insert_offset + chuckBuffer.Length > (int)LengthOutParam.Value)
					{
						nDeletedLength = (int)LengthOutParam.Value - insert_offset;
						if (nDeletedLength < 0)
							nDeletedLength = 0;
					}
					else
					{
						nDeletedLength = chuckBuffer.Length;
					}
					 // = nDeletedLength;
					inserted_dataParam.Value = chuckBuffer;

					nCount = command.ExecuteNonQuery();
					if (nCount == 0)
					{
						strError = "没有更新到记录块";
						return -1;
					}

					nReadStart += chuckBuffer.Length;
					insert_offset += chuckBuffer.Length;   //恢复时要恢复到原来的位置

					if (chuckBuffer.Length < chucksize)
						break;
				}

				long lLength = this.GetImageLength(strID,
					"newdata",
					out strError);
				if (lLength == -1)
					return -1;

				// 生成新的时间戳,保存到数据库里
				strOutputTimestamp = System.DateTime.Now.ToString() + m_Container.TimestampSeed;
				
				strCommand = "use " + GetSqlName() + "\n"
					+ " UPDATE records SET dptimestamp=@dptimestamp"
					+ " WHERE id=@id";

				command = new SqlCommand(strCommand,
					connection);

				idParam  =
					command.Parameters.Add("@id",
					SqlDbType.NVarChar);
				idParam.Value = strID;

				dptimestampParam  =
					command.Parameters.Add("@dptimestamp",
					SqlDbType.NVarChar,
					100);
				dptimestampParam.Value = strOutputTimestamp;
				nCount = command.ExecuteNonQuery();
				if (nCount == 0)
				{
					strError = "没有更新到记录号为'" + strID + "'的时间戳";
					return -1;
				}

				long lLength1 = this.GetImageLength(strID,
					"newdata",
					out strError);
				if (lLength1 == -1)
					return -1;

				outputTimestamp = Encoding.UTF8.GetBytes(strOutputTimestamp);
			}
			catch(SqlException ex)
			{
				strError = ex.Message;
				return -1;
			}
			catch(Exception ex)
			{
				strError = ex.Message;
				return -1;
			}
			finally
			{
				connection.Close();
			}
			return 0;
		}






		#region 备份

		//db:数据库
		//nStartID:起始记录号
		//nLength:长度
		//strbackMode:对ID的处理
		//streamTarget:目标流
		//strErrorInfo : 出错信息
		//返回值:
		//-1:出错 0:成功 
		public int Backup(Database db,
			int nStartID,
			long nLength,
			string strbackMode,     //AddID
			Stream streamTarget,
			out string strErrorInfo)
		{
			strErrorInfo = "";
			string strRecordID;
			for(int i= nStartID;i<nStartID+nLength;i++)
			{
				strRecordID = DbPath.GetID10 (Convert.ToString (i));

				//每一条记录用一个临时文件
				string strTempFileName = Path.GetTempFileName();
				FileStream streamTemp =	File.Create(strTempFileName);

				try
				{
					int ret;
					ret = writeRecord(db,
						strRecordID,
						strbackMode,
						streamTemp);
					if (ret == -1)
					{
						strErrorInfo += "writeRecord() error!";
						return -1;
					}

					streamTemp.Seek(0,SeekOrigin.Begin);
					StreamUtil.DumpStream(streamTemp,
						streamTarget);
				}
				finally
				{
					streamTemp.Close ();
					File.Delete (strTempFileName);
				}
			}
			return 0;
		}


		//备份结果集总函数
		//strResultSetName: 结果集名
		//streamTarget: 目标流
		//返回值 0:成功 -1:出错
		public int DoStore(string strResultSetName,
			DpResultSetManager resultSetManager,
			Stream streamTarget,
			string strbackMode,
			bool isOutputInfo,
			System.Web.HttpResponse oResponse,
			out string strInfo)
		{
			strInfo = "";
			if (resultSetManager == null)
			{
				strInfo += "结果集管理器为空<br/>";
				return -1;
			}

			DpResultSet resultSet =	resultSetManager.GetResultSet(strResultSetName);
			if (resultSet == null)
			{
				strInfo += "结果集为空";
				return -1;
			}

			if (resultSet.Count == 0)
			{
				strInfo += "结果集Count为0<br/>";
				return 0;
			}

			bool isValue = true;
			try
			{
				int i = 0;
				int nOneCount = 0;
				foreach(DpRecord oRecord in resultSet)
				{
					if (oResponse.IsClientConnected == true) 
					{
						if (isOutputInfo == true)
						{
							if (nOneCount >= 100)
							{
								oResponse.Write("完成"+Convert.ToString (i)+"<br/>");
								oResponse.Flush();
								nOneCount = 0;
							}
						}

						//每一条记录用一个临时文件
						string strTempFileName = Path.GetTempFileName();
						FileStream streamTemp =	File.Create(strTempFileName);

						int ret;
						ret = writeRecord(oRecord,
							strbackMode,
							streamTemp);
						if (ret == -1)
						{
							strInfo += "writeRecord() error!";
							return -1;
						}

						streamTemp.Seek(0,SeekOrigin.Begin);
						StreamUtil.DumpStream(streamTemp,
							streamTarget);

						streamTemp.Close ();
						File.Delete (strTempFileName);
					}
					else
					{
						strInfo = "通讯中断";
						isValue = false;
						break;
					}
					i++;
					nOneCount++;
				}

				if (isOutputInfo == true)
				{
					oResponse.Write("完成"+Convert.ToString (i)+"<br/>");
					oResponse.Flush();
				}
			}
			finally
			{
				streamTarget.Close ();
			}

			if (isValue == false)
			{
				//File.Delete (m_strDir + strFileName);
				return -1;
			}

			strInfo += "成功备份"+Convert.ToString (resultSet.Count)+"条记录<br/>";
			return 0;
		}


		public int writeRecord(DpRecord oRecord,
			string strbackMode,
			FileStream streamTarget)
		{
			//m_strDebugInfo += "走进writeRecord里<br/>";

			string strIDComplete = oRecord.ID;
			int nPosition;
			nPosition = strIDComplete.IndexOf(":");

			string strDbID = "";
			string strRecordID = "";
			if (nPosition>0)
			{
				strDbID = strIDComplete.Substring (0,nPosition);
				strRecordID = strIDComplete.Substring (nPosition+1);
			}

			//m_strDebugInfo += "数据库ID"+strDbID+"------记录ID"+strRecordID+"<br/>";
			Database db = GetDatabaseSafety(strDbID);
			if (db == null)
			{
				//m_strDebugInfo += "没找到数据库ID"+strDbID+"<br/>";
				return -1;
			}

			return writeRecord(db,
				strRecordID,
				strbackMode,
				streamTarget);
		}

		//写一条记录
		public int writeRecord(Database db,
			string strRecordID,
			string strbackMode,
			FileStream streamTarget)
		{
			MemoryStream mfs = new MemoryStream ();
			string strContentType;
			int nRet = db.GetRecord(strRecordID,
				mfs,
				out strContentType,
				null,
				false);

			if (nRet == -1)
				return -1;

			long lTotalLength = 0;  //总长度

			//长度字节数组
			byte[] sufferLength = new byte[8];

			//1.开头空出8字节，最后写总长度*****************
			streamTarget.Write(sufferLength,0,8);
			//lTotalLength += 8;

			//m_strDebugInfo += "开头空8个字节<br/>";


			//将XMLstream加载到dom，修改id，下面找到所有file
			mfs.Seek(0,SeekOrigin.Begin);
			XmlDocument dom = new XmlDocument();
			dom.Load (mfs);

			if (strbackMode == "completeID")
			{
				XmlNode nodeID = dom.SelectSingleNode ("//__id");
				string strCompleteID = db.ID+":"+DomUtil.GetNodeText (nodeID);
				DomUtil.SetNodeText (nodeID,strCompleteID);
			}

			//2.加XMl文件包*******************
			MemoryStream mfs1 = new MemoryStream ();
			dom.Save (mfs1);
			mfs1.Seek(0,SeekOrigin.Begin);
			MemoryStream msTemp = new MemoryStream ();
			writeXml(mfs1,msTemp);
			mfs1.Close ();

			//这一句话非常重要
			msTemp.Seek(0,SeekOrigin.Begin);   

			StreamUtil.DumpStream (msTemp,
				streamTarget);

			lTotalLength += msTemp.Length ;

			msTemp.Close ();

			//m_strDebugInfo += "加XML包<br/>";



			//将XMLstream加载到dom，以便找到所有file
			//mfs.Seek(0,SeekOrigin.Begin);
			//XmlDocument dom = new XmlDocument();
			//dom.Load (mfs);
			//mfs.Close ();

			XmlNodeList listFile = dom.SelectNodes ("//file");

			
			foreach(XmlNode nodeFile in listFile)
			{
				string strTempFileName =
					Path.GetTempFileName();

				FileStream streamTempFile =
					File.Create(strTempFileName);


				//m_strDebugInfo += "调writeFile函数加文件包<br/>";

				int ret ;
				ret = writeFile(nodeFile,
					db,
					strRecordID,
					streamTempFile);


				if (ret == -1)
					continue;

				//3.写每个文件包*************
				streamTempFile.Seek(0,SeekOrigin.Begin);
				StreamUtil.DumpStream (streamTempFile,
					streamTarget);

				lTotalLength += streamTempFile.Length ;
				

				streamTempFile.Close ();

				File.Delete (strTempFileName);
			}



			//4.写总长度

			sufferLength =
				System.BitConverter.GetBytes(lTotalLength);

			//把指针移到哪里？移到开头是不正确的，第二条就不对了
			//streamTarget.Seek (0,SeekOrigin.End);
			//long nTemp = streamTarget.Position;
			//nTemp = nTemp-lTotalLength-8;
			//streamTarget.Seek (nTemp,SeekOrigin.Begin);

			streamTarget.Seek (0,SeekOrigin.Begin);
			streamTarget.Write (sufferLength,0,8);

			//m_strDebugInfo += "写本记录总长度<br/>";


			//将指针移到最后
			streamTarget.Seek (0,SeekOrigin.End);
			return 0;
		}


		//写XML数据
		public int writeXml(Stream source ,
			Stream target)
		{
			//m_strDebugInfo += "进writeXml函数里<br/>";

			byte[] sufferLength = new byte[8];

			sufferLength = 
				System.BitConverter.GetBytes(source.Length);
			
			//m_strDebugInfo += "Xml文件的字符数"+source.Length+"<br/>";

			target.Write(sufferLength,0,8);
			source.Seek (0,SeekOrigin.Begin);
			StreamUtil.DumpStream (source,target);
			//m_strDebugInfo += "source的字符数"+Convert.ToString(source.Length)+"-------target的字符数"+Convert.ToString(target.Length) +"<br/>";
			return 0;
		}



		//写子文件数据
		//返回值:
		//0,正常得到文件内容
		//-1,文件名为空
		public int writeFile(XmlNode nodeFile,
			Database db,
			string strRecordID,
			FileStream streamTarget)
		{
			//m_strDebugInfo += "进入到writeFile函数里<br/>";

			string strFileName =
				DomUtil.GetNodeText(nodeFile);

			//m_strDebugInfo += "文件名"+strFileName+"<br/>";
			if (strFileName == "")
			{
				//m_strDebugInfo += "文件名为空，返回-1<br/>";
				return -1;
			}

			long lTotalLength = 0;  //总长度

			//长度字节数组
			byte[] sufferLength = new byte[8];

			//1.开头空出8字节，最后写总长度*****************
			streamTarget.Write(sufferLength,0,8);
			//lTotalLength += 8;

			//m_strDebugInfo += "空出8个字节<br/>";

			//2.先写名称字符串的长度;

			//将字符串转换成字符数组
			byte[] sufferFileName =
				System.Text.Encoding.UTF8.GetBytes(strFileName);

			sufferLength =
				System.BitConverter.GetBytes((long)sufferFileName.Length);


			//m_strDebugInfo += "文件名称的长度"+Convert.ToString(sufferFileName.Length)+"<br/>";


			streamTarget.Write (sufferLength,0,8);

			lTotalLength += 8;


			//3.写名称字符串
			streamTarget.Write (sufferFileName,
				0,
				sufferFileName.Length );

			lTotalLength += sufferFileName.Length;

			string strFileID = strRecordID + "_" + strFileName;
			//m_strDebugInfo += "备份文件时的名称:"+strFileID;

			string strTempName =
				Path.GetTempFileName();

			FileStream streamTemp =
				File.Create(strTempName);

			string strContentType;
			db.GetRecord(strFileID,
				streamTemp,
				out strContentType,
				null,
				false);

			sufferLength =
				System.BitConverter.GetBytes(streamTemp.Length);

			//4.二进制文件的长度;
			streamTarget.Write (sufferLength,0,8);

			lTotalLength += 8;


			//5.写真正的二进制文件
			streamTemp.Seek (0,SeekOrigin.Begin);
			StreamUtil.DumpStream (streamTemp,
				streamTarget);


			lTotalLength += streamTemp.Length ;

			//关闭临时stream,删除临时文件
			streamTemp.Close();
			File.Delete (strTempName);


			//6.返回开头写总长度

			sufferLength =
				System.BitConverter.GetBytes(lTotalLength);

			streamTarget.Seek (0,SeekOrigin.Begin);
			streamTarget.Write (sufferLength,0,8);

			//将指针移到最后
			streamTarget.Seek (0,SeekOrigin.End);

			return 0;

		}


		#endregion

		#region 总恢复函数

		//恢复XML类型的数据
		//参数:
		//streamSource: 源流
		//strDataType: 数据类型，为固定值: xml(Xml文件),bin(bin文件)
		//db: 数据库
		//strMode:恢复方式,override:覆盖，append:追加
		//strErrorInfo: 处理信息
		//返回值:
		//-1:出错  0:成功  >0:恢复的记录数
		public int Restore(Stream streamSource,
			string strDataType,
			Database db,
			string strMode,
			out string strErrorInfo)
		{
			strErrorInfo = "";
			if (streamSource == null)
			{
				strErrorInfo = "在Restore()函数，参数streamSource为null";
				return -1;
			}
			if (strDataType == null)
			{
				strErrorInfo = "在Restore()函数，参数strDataType为null";
				return -1;
			}
			if (strMode == null)
			{
				strErrorInfo = "在Restore()函数，参数strMode为null";
				return -1;
			}
			if (db == null)
			{
				strErrorInfo = "在Restore()函数，参数db为null";
				return -1;
			}

			int nRet = -1;

			if (strDataType == "xml")
			{
				nRet = this.RestoreFromXml (streamSource,
					db,
					strMode,
					out strErrorInfo);
			}
			else if (strDataType == "bin")
			{
				nRet = this.RestoreFromBin (streamSource,
					db,
					strMode,
					out strErrorInfo);
			}
			else
			{
				strErrorInfo = "在Restore()函数，strDataType参数值为" + strDataType + "不是合法的值，必须为xml或bin";
				return -1;
			}
			return nRet;
		}


		#endregion

		#region 恢复Xml格式数据

		//恢复XML类型的数据
		//参数:
		//streamSource: 源流
		//db: 数据库
		//strMode:恢复方式,override:覆盖，append:追加
		//strErrorInfo: 处理信息
		//返回值:
		//-1:出错 ;>=0:恢复的记录数
		public int RestoreFromXml(Stream streamSource,
			Database db,
			string strMode,
			out string strErrorInfo)
		{
			strErrorInfo = "";
			if (streamSource == null)
			{
				strErrorInfo = "在RestoreFromXml()函数，参数streamSource为null";
				return -1;
			}
			if (strMode == null)
			{
				strErrorInfo = "在RestoreFromXml()函数，参数strMode为null";
				return -1;
			}
			if (db == null)
			{
				strErrorInfo = "在RestoreFromXml()函数，参数db为null";
				return -1;
			}

			streamSource.Seek (0,SeekOrigin.Begin);
			int nCount = 0;
			int nRet = 0;
			string strPartErrorInfo;
			XmlTextReader reader = null;
			try
			{
				reader = new XmlTextReader (streamSource);

				string strRecordXml = "";
				while (reader.Read())
				{
					//处理每一条记录
					if (reader.Name == "record")
					{
						if (restoreDelegate != null)
						{
							nRet = restoreDelegate(nCount,streamSource.Position);
							if (nRet == -1) //外面停止了
								return 2;
						}

						strRecordXml = reader.ReadOuterXml(); //注意ReadOuterXml会将指针移到下一个节点
						string strRecordID;
						nRet = RestoreRecordFromXml(strRecordXml,
							db,
							strMode,
							null,
							out strRecordID,
							out strPartErrorInfo);

						strErrorInfo += strPartErrorInfo;
						
						if (nRet == -1)  //只要一有错就返回,不再继续恢复后面的记录
							break;

						nCount++;
					}
				}
			}
			finally
			{
				if (reader != null)
				{
					reader.Close ();
					reader = null;
				}
			}
			return nCount;
		}



		public int RestoreRecordFromXml(string strRecordXml,
			Database db,
			string strMode,
			string strID,
			out string strRecordID,
			out string strErrorInfo)
		{
			strRecordID = strID;
			strErrorInfo = "";

			///////////////////////////////////////////
			//首先判断一下传入参数错误
			///////////////////////////////////////////
			if (strRecordXml == null)
			{
				strErrorInfo = "在RestoreRecordFromXml()函数，参数strRecordXml为null";
				return -1;
			}
			if (db == null)
			{
				strErrorInfo = "在RestoreRecordFromXml()函数，参数db为null";
				return -1;
			}
			if (strMode == null)
			{
				strErrorInfo = "在RestoreRecordFromXml()函数，参数strMode为null";
				return -1;
			}
			//不用判断strID,因为strID可以为null，表示不参与处理。


			//1.得到ID
			//DbPath oPath = new DbPath (strID);
			if (strMode == "append")
			{
				strID = "-1";
			}
			else if (strMode == "override")
			{
				//参数ID为空或为null，按数据中的ID算
				if (strID == null)
				{
					//用于找记录ID
					StringReader strReader = new StringReader(strRecordXml);
					XmlTextReader  reader = new XmlTextReader (strReader);
					reader.WhitespaceHandling = WhitespaceHandling.None;
					while (reader.Read())
					{
						if (reader.Name== "__id")//tag" && strValue == "001")
						{
							strID = reader.ReadString () ;
							break;
						}
					}
					reader.Close ();

					if (strID == null)
					{
						strErrorInfo = "在RestoreRecordFromXml()函数,\r\n参数中的strID与数据中的ID均为null,而且是覆盖方式，发生矛盾没法处理了";
						return -1;
					}
					if (StringUtil.isNum (strID) == false )
					{
						strErrorInfo = "在RestoreRecordFromXml()函数,\r\n 数据中的ID为" + strID + "不是合法的ID";
						return -1;
					}
				}
				else
				{
					if (StringUtil.isNum (strID) == false )
					{
						strErrorInfo = "在RestoreRecordFromXml()函数,\r\n参数strID为" + strID + "不是合法的ID";
						return -1;
					}
				}
			}
			else
			{
				strErrorInfo = "在RestoreRecordFromXml()函数,\r\nstrMode的值" + strMode + "不合法，必须为append或者override";
				return -1;
			}

			//2.写到数据库
			//把字符串读入内存Stream
			MemoryStream s = new MemoryStream();
			byte[] aRecord;
			aRecord = Encoding.UTF8.GetBytes(strRecordXml);
			s.Write (aRecord,0,aRecord.Length );

			//写到数据库
			s.Seek (0,SeekOrigin.Begin);
			db.Write(strID,
				s,
				"text/xml",
				false,
				out strRecordID);
			s.Close ();
			return 0;
		}


		#endregion

		#region 恢复bin格式数据


		//恢复Bin格式的备份数据
		//参数:
		//streamSource:源流
		//db:数据库
		//strMode:恢复方式
		//返回值:
		//0:成功  -1:出错  大于0:表示恢复成功，且记录数
		public int RestoreFromBin(Stream streamSource,
			Database db,
			string strMode,
			out string strErrorInfo)
		{
			strErrorInfo = "";
			if (streamSource == null)
			{
				strErrorInfo = "在RestoreBin()函数，参数streamSource为null";
				return -1;
			}
			if (strMode == null)
			{
				strErrorInfo = "在RestoreBin()函数，参数strMode为null";
				return -1;
			}
			if (db == null)
			{
				strErrorInfo = "在RestoreBin()函数，参数db为null";
				return -1;
			}

			streamSource.Seek (0,SeekOrigin.Begin);
			int nRet = -1;
			string strRecordID;
			int nCount = 0;
			string strPartErrorInfo;
			while(true)
			{
				if (restoreDelegate != null)
				{
					nRet = restoreDelegate(nCount,streamSource.Position);
					if (nRet == -1) //外面停止了
						return 2;
				}

				nRet = this.RestoreRecordFromBin(streamSource,
					db,
					strMode,
					null,  //ID
					out strRecordID,
					out strPartErrorInfo);

				nCount ++; //数量不断增加


				if (nRet == 1)//表示完成
					return nCount;

				if (nRet == -1)//当前条记录出错
				{
					strErrorInfo += "第" + Convert.ToString (nCount) + "条出错:" + strPartErrorInfo + "\r\n";
					//当前条出错不应该引用某它条
					//return -1;
				}
			}
		}



		//恢得一条记录
		//参数
		//streamSource:源流
		//strID: 记录ID,纯净的ID，不带库名，可以为null（表示不参与处理）
		//strMode: 恢复方式 append(追加),override(覆盖)
		//db: 数据库
		//strRecordID: out参数,返回恢复成功后的记录号
		//返回值:
		//0:成功 -1:出错  1:一开始就没有数据
		public int RestoreRecordFromBin(Stream streamSource,
			Database db,
			string strMode,
			string strID,
			out string strRecordID,
			out string strErrorInfo)
		{
			strRecordID = strID;
			strErrorInfo = "";

			///////////////////////////////////////////
			//首先判断一下传入参数错误
			///////////////////////////////////////////
			if (streamSource == null)
			{
				strErrorInfo = "在RestoreRecord()函数，参数streamSource为null";
				return -1;
			}
			if (db == null)
			{
				strErrorInfo = "在RestoreRecord()函数，参数db为null";
				return -1;
			}
			if (strMode == null)
			{
				strErrorInfo = "在RestoreRecord()函数，参数strMode为null";
				return -1;
			}
			//不用判断strID,因为strID可以为null，表示不参与处理。



			///////////////////////////////////////////
			//下面开始实做
			///////////////////////////////////////////
			int n = 0;
			byte[] bufferLength = new byte[8];
			long lLength;
			long nMyselfLength = 0; //本记录的总长度
			long nSumLength = 0;    //读一段加一段，不断累加的和，当累加的和等于总长度时，本记录处理完毕，当累加的和大于总长度时，返回-1，出错；

			//1.读出总长度************************
			//要用一个变量累加长度，如果与总长度相同才是正确的。
			n = streamSource.Read(bufferLength,0,8);
			if (n<8)
			{
				strErrorInfo = "一开始没有数据了";
				return 1;
			}
			nMyselfLength = System.BitConverter.ToInt64(bufferLength,0);


			//2.得到XML包***************************
			n = streamSource.Read(bufferLength,0,8);
			if (n<8)
			{
				strErrorInfo += "取Xml包的前8个字节出错";
				return -1;
			}
			nSumLength += 8; //*加8字节的长度

			//2.1读出Xml
			lLength = System.BitConverter.ToInt64(bufferLength,0);
			nSumLength += lLength;   //*加Xml的长度
			MemoryStream streamXml = new MemoryStream();
			StreamUtil.DumpStream(streamSource,
				streamXml,
				lLength);
			streamXml.Seek (0,SeekOrigin.Begin);
			XmlDocument domXml = new XmlDocument ();
			domXml.Load(streamXml);


			//2.2得到ID
			//DbPath oPath = new DbPath (strID);
			if (strMode == "append")
			{
				strID = "-1";
			}
			else if (strMode == "override")
			{
				//参数ID为空或为null，按数据中的ID算
				if (strID == null)
				{
					XmlNode idNode = domXml.SelectSingleNode ("//__id");
					strID = DomUtil.GetNodeTextDiff (idNode);
					if (strID == null)
					{
						strErrorInfo = "参数中的strID与数据中的ID均为null,而且是覆盖方式，发生矛盾没法处理了";
						return -1;
					}
					if (StringUtil.isNum (strID) == false )
					{
						strErrorInfo = "数据中的ID为" + strID + "不是合法的ID";
						return -1;
					}
				}
				else
				{
					if (StringUtil.isNum (strID) == false )
					{
						strErrorInfo = "参数strID为" + strID + "不是合法的ID";
						return -1;
					}
				}
			}
			else
			{
				strErrorInfo = "strMode的值" + strMode + "不合法，必须为append或者override";
				return -1;
			}

			if (strID == "-1" && strMode == "override")
			{
				strErrorInfo = "strID为-1，而保存方式为override，产生矛盾";
				return -1;
			}


			//2.3得到新file数组
			ArrayList aNewFileID = new ArrayList ();
			XmlNodeList newFileList = domXml.SelectNodes ("//file");
			foreach(XmlNode newFileNode in newFileList)
			{
				string strNewFileID = DomUtil.GetNodeText (newFileNode);
				if (strNewFileID != "")
					aNewFileID.Add (strNewFileID);
			}

			//2.4当为覆盖类型时，要将新旧file数组碰
			if (strID != "-1")
			{
				ArrayList aOldFileID = new ArrayList ();
				MemoryStream ms = new MemoryStream ();
				string strContentType;
				int nRet = db.GetRecord (strID,
					ms,
					out strContentType,
					null,
					false);
				if (nRet != -1)
				{
					XmlDocument oldDom = new XmlDocument ();
					oldDom.Load(ms);
					XmlNodeList oldFileList = oldDom.SelectNodes ("//file");
					foreach(XmlNode oldFileNode in oldFileList)
					{
						string strOldFileID = DomUtil.GetNodeText (oldFileNode);
						if (strOldFileID != "")
							aOldFileID.Add (strOldFileID);
					}

					ArrayList targetLeft = new ArrayList ();
					ArrayList targetMiddle = new ArrayList ();
					ArrayList targetRight = new ArrayList ();
					string strInfo;

					//数据必须先排序
					aNewFileID.Sort ();
					aOldFileID.Sort ();

					//新旧两个File数组碰
					DatabaseCollection.MergeFileList (aNewFileID,
						aOldFileID,
						targetLeft,
						targetMiddle,
						targetRight,
						out strInfo);

					//FileUtil.WriteText ("I:\\debug.txt",strInfo);
					//FileUtil.WriteText ("I:\\debug.txt","得到的三个新数组分别为:\r\n");
					//FileUtil.WriteText ("I:\\debug.txt","左: " + rmsUtil.ArrayList2String (targetLeft) + "\r\n");
					//FileUtil.WriteText ("I:\\debug.txt","中: " + rmsUtil.ArrayList2String (targetMiddle) + "\r\n");
					//FileUtil.WriteText ("I:\\debug.txt","右: " + rmsUtil.ArrayList2String (targetRight) + "\r\n");

					//删除多余的旧文件
					if (targetRight.Count > 0)
					{
						foreach(string strNeedDeleteFile in targetRight)
						{
							string strMessage;
							db.DeleteForce (strID + "_" + strNeedDeleteFile,true,out strMessage);
						}
					}
				}

			}
	
			//2.5处理新附件
			StreamItem[] aStream = null;
			ArrayList aTempFile = new ArrayList ();;
			try
			{
				//把附件中带得文件写到库里
				ArrayList aTempStream = new ArrayList ();
				while(true)
				{
					bufferLength = new byte[8];
					n = streamSource.Read(bufferLength,0,8);
					if (n<8)
						break;

					nSumLength += 8; //*加8字节的长度

					lLength = BitConverter.ToInt64(bufferLength,0);
					nSumLength += lLength; //*加一个file的长度

					if (nSumLength > nMyselfLength)
					{
						strErrorInfo = "nSumLength的值" + Convert.ToString (nSumLength) + "大于nMySelfLength的值" + Convert.ToString (nMyselfLength);
						return -1;
					}

					//用一个临时文件存放指定文件的二进制
					string strTempFileName = Path.GetTempFileName();
					FileStream streamTempFile =	File.Create(strTempFileName);
					StreamUtil.DumpStream (streamSource,
						streamTempFile,
						lLength);

					StreamItem oStream;
					streamTempFile.Seek (0,SeekOrigin.Begin);
					RestoreFileFromBin(streamTempFile,
						aTempFile,
						out oStream);    //这里有问题，如果是追加，如何处理文件ID？

					aTempStream.Add (oStream);
					streamTempFile.Close ();
					File.Delete (strTempFileName);

					if (nSumLength > nMyselfLength)
					{
						strErrorInfo = "nSumLength的值" + Convert.ToString (nSumLength) + "大于nMySelfLength的值" + Convert.ToString (nMyselfLength);
						return -1;
					}
					if (nSumLength == nMyselfLength) //本记录包含的文件算完了
					{
						break;
					}
				}
				
				if (aTempStream != null)
				{
					aStream = new StreamItem[aTempStream.Count ];
					for(int i=0;i<aTempStream.Count;i++)
					{
						aStream[i] = (StreamItem)(aTempStream[i]);
					}
				}

				streamXml.Seek (0,SeekOrigin.Begin);
				if (db != null)
				{
					db.Write(strID,
						streamXml,
						"text/xml",
						false,
						aStream,
						out strRecordID);
				}
			}
			catch(Exception ex)
			{
				strErrorInfo += "在RestoreRecordFromBin()出错:"+ex.Message  ;
				return -1;
			}
			finally
			{
				if (aStream != null)
				{
					foreach(StreamItem item in aStream)
					{
						item.m_stream.Close ();
					}
				}
				foreach(string strTempName in aTempFile)
				{
					File.Delete (strTempName);
				}
			}
			return 0;
		}



		//恢复文件
		//streamFile: 文件包stream
		//strID: 文件包stream
		//0:成功 
		public int RestoreFileFromBin(Stream streamFile,
			ArrayList aTempFile,
			out StreamItem oStream)
		{
			oStream = null;
			streamFile.Seek(0,SeekOrigin.Begin);

			//头8个文件名
			byte[] bufferLength = new byte[8];
			int n = streamFile.Read(bufferLength,0,8);
			if (n<8)
				return 0;
			long lLength;
			lLength = System.BitConverter.ToInt64(bufferLength,0);
			byte[] bufferFileName = new  byte[lLength];
			n = streamFile.Read(bufferFileName,0,(int)lLength);

			string strFileName =
				System.Text.Encoding.UTF8.GetString(bufferFileName);

 
			n = streamFile.Read(bufferLength,0,8);
			if (n<8)
				return 0;

			lLength =
				System.BitConverter.ToInt64(bufferLength,0);


			//m_strDebugInfo += "二进制文件的长度"+Convert.ToString (lLength)+"<br/>";

			string strTempFileName = Path.GetTempFileName();
			aTempFile.Add (strTempFileName);
			FileStream streamTempFile =	File.Create(strTempFileName);

			StreamUtil.DumpStream (streamFile,
				streamTempFile,
				lLength);

			oStream = new StreamItem(strFileName,streamTempFile);
			return 0;
		}


		#endregion
		