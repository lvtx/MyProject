//#define DEBUG_LOCK

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Xml;
using System.IO;
using System.Diagnostics;

using DigitalPlatform.rms;
using DigitalPlatform.Text;
using DigitalPlatform.Text.SectionPropertyString;
using DigitalPlatform.Xml;
using DigitalPlatform.ResultSet;
using DigitalPlatform.IO;


namespace DigitalPlatform.rms
{
    //　用户库集合
    public class AccountDbCollection : ArrayList
    {
        private ReaderWriterLock m_lock = new ReaderWriterLock();
        private int m_nTimeOut = 5 * 1000; //5秒

        public DatabaseCollection m_dbColl = null;

        //构造函数
        public AccountDbCollection(DatabaseCollection dbColl)
        {
            this.m_dbColl = dbColl;
            this.CreateBy(this.m_dbColl);
        }

        // 创建帐户库集合
        // paramter:
        //		dbColl: 总数据库集合
        public void CreateBy(DatabaseCollection dbColl)
        {
            // ********对帐户库集合加写锁******
            m_lock.AcquireWriterLock(m_nTimeOut); //加写锁
#if DEBUG_LOCK
			this.m_dbColl.WriteDebugInfo("CreateBy()，对帐户库集合加写锁");
#endif
            try
            {
                //this.m_keySize = dbColl.KeySize;
                foreach (Database db in dbColl)
                {
                    if (StringUtil.IsInList("account", db.TypeSafety) == true)
                    {
                        this.Add(db);
                    }
                }
            }
            finally
            {
                //*********对帐户库集合解写锁*******
                m_lock.ReleaseWriterLock();
#if DEBUG_LOCK

				this.m_dbColl.WriteDebugInfo("CreateBy()，对帐户库集合解写锁");
#endif

            }
        }


        // 通过ID得到帐户库
        // 线：不安全
        internal Database GetAccountDbByID(string strDbID)
        {
            foreach (Database db in this)
            {
                if (db.DbIDSafety == strDbID)
                {
                    return db;
                }
            }
            return null;
        }


        // 根据用户名和密码，得到user对象
        // parameter:
        //      strUserName 用户名
        //      strPassword 密码
        //      user        out参数,返回user对象，找不到返回null
        //      strError    out参数，返回出错信息
        // return
        //		-1	error
        //		0	successed
        public int ShearchUserForLogin(string strUserName,
            string strPassword,
            out User user,
            out string strError)
        {
            user = null;
            strError = "";

            // *********对帐户库集合加读锁********
            this.m_lock.AcquireReaderLock(m_nTimeOut); //加读锁
#if DEBUG_LOCK
			this.m_dbColl.WriteDebugInfo("ShearchUserForLogin()，对帐户库集合加读锁。");
#endif
            try
            {
                DpResultSet resultSet = new DpResultSet();
                int nRet = this.SearchInternal(strUserName,
                    resultSet,
                    out strError);
                if (nRet == -1)
                    return -1;

                if (resultSet.Count == 0)
                    return 0;

                if (resultSet.Count > 1)
                {
                    strError = "用户名'" + strUserName + "'对应多条记录";
                    return -1;
                }

                //按找到的第一个帐户算，再检查密码
                DpRecord record = (DpRecord)resultSet[0];

                //创建一个DpPsth实例
                DbPath path = new DbPath(record.ID);

                //找到指定帐户数据库
                Database db = GetAccountDbByID(path.Name);
                if (db == null)
                {
                    strError = "检索点中有用户名为'" + strUserName + "'的记录，但没有找到对应的数据库'" + path.Name + "'";
                    return -1;
                }

                //从帐户库中找到记录
                MemoryStream DestFileStream = new MemoryStream();

                string strXml;
                nRet = db.GetXmlDataSafety(path.ID,
                    out strXml,
                    out strError);
                if (nRet == -1)
                    return -1;

                // 加载到dom取出password
                XmlDocument dom = new XmlDocument();
                dom.PreserveWhitespace = true; //设PreserveWhitespace为true

                try
                {
                    dom.LoadXml(strXml);
                }
                catch (Exception ex)
                {
                    strError = "帐户记录'" + record.ID + "'加载到dom文件出错,原因:" + ex.Message;
                    return -1;
                }

                XmlNode root = dom.DocumentElement;
                XmlNode nodePassword = root.SelectSingleNode("password");
                string strRealPassword = "";
                if (nodePassword != null)
                    strRealPassword = DomUtil.GetNodeText(nodePassword);  //SHA1格式

                // 将明码转换成SHA1格式
                string strSHA1Password = Cryptography.GetSHA1(strPassword);
                if (strRealPassword == strSHA1Password)
                {
                    user = new User();
                    nRet = user.CreateBy(dom,
                        record.ID,
                        db,
                        out strError);
                    if (nRet == -1f)
                        return -1;
                }
                return 0;
            }
            finally
            {
                //********对帐户库集合解读锁****************
                m_lock.ReleaseReaderLock();
#if DEBUG_LOCK
				this.m_dbColl.WriteDebugInfo("ShearchUserForLogin()，对帐户库集合解读锁。");
#endif
            }
        }


        // 根据用户名从库中查找用户记录，得到用户对象
        // parameters:
        //		strBelongDb	用户从属的数据库,中文名称
        //      user        out参数，返回帐户对象
        //      strError    out参数，返回出错信息
        // return:
        //		-1	出错
        //		0	未找到帐户
        //		1	找到了
        // 线：安全
        public int ShearchUserByName(string strUserName,
            out User user,
            out string strError)
        {
            user = null;
            strError = "";

            //*********对帐户库集合加读锁***********
            m_lock.AcquireReaderLock(m_nTimeOut);
#if DEBUG_LOCK
			this.m_dbColl.WriteDebugInfo("ShearchUserByName()，对帐户库集合加读锁。");
#endif
            try
            {
                DpResultSet resultSet = new DpResultSet();
                int nRet = SearchInternal(strUserName,
                    resultSet,
                    out strError);
                if (nRet == -1)
                    return -1;

                // 根据用户名没找到对应的帐户记录
                if (resultSet.Count == 0)
                    return 0;

                if (resultSet.Count > 1)
                {
                    strError = "用户名'" + strUserName + "'对应多条记录";
                    return -1;
                }

                //按找到的第一个帐户算，再检查密码
                DpRecord record = (DpRecord)resultSet[0];

                //创建一个DpPsth实例
                DbPath path = new DbPath(record.ID);

                //找到指定帐户数据库
                Database db = GetAccountDbByID(path.Name);
                if (db == null)
                {
                    strError = "未找到'" + strUserName + "'帐户对应的名为'" + path.Name + "'的数据库对象";
                    return -1;
                }

                //从帐户库中找到记录
                string strXml;
                nRet = db.GetXmlDataSafety(path.ID,
                    out strXml,
                    out strError);
                if (nRet <= -1)
                    return -1;

                //加载到dom取出password
                XmlDocument dom = new XmlDocument();
                dom.PreserveWhitespace = true; //设PreserveWhitespace为true

                try
                {
                    dom.LoadXml(strXml);
                }
                catch (Exception ex)
                {
                    strError = "加载'" + strUserName + "'帐户记录到dom时出错,原因:" + ex.Message;
                    return -1;
                }

                user = new User();
                nRet = user.CreateBy(dom,
                    record.ID,
                    db,
                    out strError);
                if (nRet == -1)
                    return -1;

                return 1;
            }
            finally
            {
                //*********对帐户库集合解读锁*************
                m_lock.ReleaseReaderLock();
#if DEBUG_LOCK
				this.m_dbColl.WriteDebugInfo("ShearchUserByName()，对帐户库集合解读锁。");
#endif
            }
        }


        // 从所有帐户库的所有表中查找帐户
        // parameter
        //		strUserName 用户名
        //		resultSet   结果集,用于存放查找到的用户
        //      strError    out参数，返回出错信息
        // result:
        //		-1  error
        //		0   successed
        // 线：不安全
        private int SearchInternal(string strUserName,
            DpResultSet resultSet,
            out string strError)
        {
            strError = "";
            foreach (Database db in this)
            {
                //如果检索内容长度大于keysize，则将文字截取
                if (strUserName.Length > db.KeySize)
                {
                    //strUserName = strUserName.Substring(0,nKeySize);
                    continue;
                }

                string strWarning = "";

                SearchItem searchItem = new SearchItem();
                searchItem.TargetTables = "";
                searchItem.Word = strUserName;
                searchItem.Match = "exact";
                searchItem.Relation = "=";
                searchItem.DataType = "string";
                searchItem.MaxCount = -1;
                searchItem.OrderBy = "";

                // 帐户库不能去非用字
                int nRet = db.SearchByUnion(searchItem,
                    null,       //用于中断 , deleget
                    resultSet,
                    "zh-cn",
                    0,
                    out strError,
                    out strWarning);
                if (nRet == -1)
                    return -1;
            }
            return 0;
        }
    }

    //用户集合
    public class UserCollection : ArrayList
    {
        public ReaderWriterLock m_lock = new ReaderWriterLock();
        public int m_nTimeOut = 5000;

        // 帐户库集合
        public AccountDbCollection m_accountDbs; 


        public UserCollection(AccountDbCollection accountDbs)
        {
            this.m_accountDbs = accountDbs;
        }

        // 根据用户名找到用户对象
        // parameters:
        //      strName     用户名
        //      user        out参数，返回用户对象
        //      strError    out参数，返回出错信息
        // return:
        //      -1  出错
        //      0   未找到
        //      1   找到
        // 线：安全
        public int GetUser(string strName,
            out User user,
            out string strError)
        {
            user = null;
            strError = "";
            
            //*********对帐户集合加读锁*****************
            this.m_lock.AcquireReaderLock(m_nTimeOut); //加读锁
#if DEBUG_LOCK
			this.m_accountDbs.m_dbColl.WriteDebugInfo("GetUserByName()，对帐户集合加读锁。");
#endif
            try
            {
                foreach (User oneUser in this)
                {
                    if (oneUser.Name == strName)
                    {
                        user = oneUser;
                        return 1;
                    }
                }
            }
            finally
            {
                //*****对帐户集合解读锁*******
                this.m_lock.ReleaseReaderLock();
#if DEBUG_LOCK
				this.m_accountDbs.m_dbColl.WriteDebugInfo("GetUserByName()，对帐户集合解读锁。");
#endif
            }

            //*********对帐户集合加写锁****************
            m_lock.AcquireWriterLock(m_nTimeOut);
#if DEBUG_LOCK
			this.m_accountDbs.m_dbColl.WriteDebugInfo("GetUserByName()，对帐户集合加写锁。");
#endif
            try
            {
                int nRet = m_accountDbs.ShearchUserByName(strName,
                    out user,
                    out strError);
                if (nRet == -1)
                    return -1;

                if (nRet == 1)
                {
                    Debug.Assert(user != null, "此时user不可能为null");

                    this.Add(user);
                    user.container = this;
                    return 1;
                }

                return 0;
            }
            finally
            {
                m_lock.ReleaseWriterLock();  //解写锁
#if DEBUG_LOCK
				this.m_accountDbs.m_dbColl.WriteDebugInfo("GetUserByName()，对帐户集合解写锁。");
#endif
            }
        }

        // 登录
        // parameters:
        //      strUserName 用户名
        //      strPassword 密码
        //      user        out参数，返回用户对象
        //      strError    out参数，返回出错信息
        // return:
        //		-1	error
        //		0	successed
        // 线：安全
        public int Login(string strUserName,
            string strPassword,
            out User user,
            out string strError)
        {
            user = null;
            strError = "";

            //*********对帐户集合加读锁*********************
            m_lock.AcquireReaderLock(m_nTimeOut);
#if DEBUG_LOCK
			this.m_accountDbs.m_dbColl.WriteDebugInfo("GetUserAndLogin()，对帐户集合加读锁。");
#endif
            try
            {
                foreach (User oneUser in this)
                {
                    if (oneUser.Name == strUserName)
                    {
                        string strSHA1Password = Cryptography.GetSHA1(strPassword);
                        if (oneUser.SHA1Password == strSHA1Password)
                        {
                            user = oneUser;
                        }
                        return 0;
                    }
                }
            }
            finally
            {
                //*********对帐户集合解读锁*********************
                m_lock.ReleaseReaderLock();  //解读锁
#if DEBUG_LOCK
				this.m_accountDbs.m_dbColl.WriteDebugInfo("GetUserAndLogin()，对帐户集合解读锁。");
#endif
            }

            //*************对帐户集合加写锁*******************
            m_lock.AcquireWriterLock(m_nTimeOut);
#if DEBUG_LOCK
			this.m_accountDbs.m_dbColl.WriteDebugInfo("GetUserAndLogin()，对帐户集合加写锁。");
#endif
            try
            {
                int nRet = this.m_accountDbs.ShearchUserForLogin(strUserName,
                    strPassword,
                    out user,
                    out strError);
                if (nRet == -1)
                    return -1;
                if (user != null)
                {
                    this.Add(user);
                    user.container = this;
                }
                return 0;
            }
            finally
            {
                m_lock.ReleaseWriterLock();  //解写锁
#if DEBUG_LOCK
				this.m_accountDbs.m_dbColl.WriteDebugInfo("GetUserAndLogin()，对帐户集合解写锁。");
#endif

            }
        }


        //private int GetUser(string strUser
            
        //更新帐户
        public void RefreshUser(string strResPath,
            bool bSave)
        {
            //***************对帐户集合加写锁*****************
            m_lock.AcquireWriterLock(m_nTimeOut);
#if DEBUG_LOCK
			this.m_accountDbs.m_dbColl.WriteDebugInfo("RefreshUser()，对帐户集合加写锁。");
#endif
            try
            {
                foreach (User user in this)
                {
                    if (user.ResPath == strResPath)
                    {
                        if (bSave == true)
                        {
                            string strError;
                            int nRet = user.InternalSave(out strError);
                            if (nRet <= -1)
                                throw (new Exception(strError));
                        }
                        this.Remove(user);
                        return;
                    }
                }
            }
            finally
            {
                //***********对帐户集合解写锁*******************
                m_lock.ReleaseWriterLock();
#if DEBUG_LOCK
				this.m_accountDbs.m_dbColl.WriteDebugInfo("RefreshUser()，对帐户集合解写锁。");
#endif
            }
        }

        public int ChangePassword(string strUserName,
            string strNewPassword,
            User curUser,
            out string strError)
        {
            strError = "";
            User user = null;
            int nRet = m_accountDbs.ShearchUserByName(strUserName,
                out user,
                out strError);
            if (nRet == -1)
                return -1;

            if (nRet == 0)
            {
                strError = "没有找到用户名为'" + strUserName + "'的帐户";
                return -1;
            }

            if (user == null)
            {
                strError = "此时user对象不可能为null,请检查服务器的ChangePassword()函数。";
                return -1;
            }
            DbPath path = new DbPath(user.ResPath);
            Database db = this.m_accountDbs.GetAccountDbByID(path.Name);
            string strBelongDbName = db.GetCaption("zh-cn");

            string strExistRights = "";
            bool bHasRight = curUser.HasRights(strBelongDbName,
                ResType.Database,
                "changepassword",
                out strExistRights);
            if (bHasRight == false)
            {
                strError = "您的帐户名为'" + curUser.Name + "'，对帐户名为'" + strUserName + "'所从属的数据库'" + strBelongDbName + "'没有'修改记录密码(changepassword)'的权限，目前的权限值为'" + strExistRights + "'。";
                return -6;
            }


            return user.ChangePassword(strNewPassword,
                out strError);

        }
    }

    //用户类
    public class User
    {
        public UserCollection container = null;

        public string ResPath = "";   // 全路径格式: 库名/记录号
        public XmlDocument m_dom = new XmlDocument();
        public Database m_db = null;

        public string Name = "";
        public string SHA1Password = "";   //
        public int Count = 0;

        public XmlNode m_nodeServer = null;

        public CfgRights cfgRights = null;



        // return:
        //      -1  出错
        //      0   成功
        public int CreateBy(XmlDocument dom,
            string strResPath,
            Database db,
            out string strError)
        {
            strError = "";

            this.ResPath = strResPath;
            this.m_db = db;
            this.m_dom = dom;


            XmlNode root = this.m_dom.DocumentElement;

            XmlNode nodeName = root.SelectSingleNode("name");

            if (nodeName != null)
                this.Name = DomUtil.GetNodeText(nodeName).Trim();

            XmlNode nodePassword = root.SelectSingleNode("password");
            if (nodePassword != null)
                SHA1Password = DomUtil.GetNodeText(nodePassword).Trim();

            XmlNode nodeItemRights = root.SelectSingleNode("rightsItem");
            if (nodeItemRights != null)
            {
                strError = "帐户记录为旧版本，根元素下已经不支持<rightsItem>元素。";
                return -1;
            }

            this.m_nodeServer = root.SelectSingleNode("server");

            this.cfgRights = new CfgRights();
            int nRet = this.cfgRights.Initial(this.m_nodeServer,
                out strError);
            if (nRet == -1)
                return -1;

            return 0;
        }


        public int SaveConfig(string strXpath, XmlNode node)
        {
            DomUtil.SetNodeValue(m_dom.DocumentElement,
                strXpath,
                node);

            return 0;
        }

        // 根据databases.xml检查一个路径是否是容器
        public int GetResType(string strPath,
            out ResType resType,
            out string strError)
        {
            resType = ResType.None;
            strError = "";

            List<XmlNode> nodes = this.container.m_accountDbs.m_dbColl.GetNodes(this.container.m_accountDbs.m_dbColl.m_nodeDbs,
                strPath);
            if (nodes.Count > 1)
            {
                strError = "在databases.xml中发现路径为'" + strPath + "'的节点有'" + Convert.ToString(nodes.Count) + "'个，databases.xml配置文件不合法。";
                return -1;
            }

            if (nodes.Count == 0)
            {
                strError = "在databases.xml中未找到路径为'" + strPath + "'对应的节点，内部调用错误。";
                return -1;
            }

            XmlNode node = nodes[0];
            if (String.Compare(node.Name, "database", true) == 0)
            {
                resType = ResType.Database;
            }
            else if (String.Compare(node.Name, "dir", true) == 0)
            {
                resType = ResType.Directory;
            }
            else
            {
                resType = ResType.File;
            }

            return 0;
        }


        private string GetSectionRights(string strRights,
            string strCategory)
        {
            DigitalPlatform.Text.SectionPropertyString.PropertyCollection propertyColl =
                new DigitalPlatform.Text.SectionPropertyString.PropertyCollection("this",
                strRights,
                DelimiterFormat.Semicolon);
            Section section = propertyColl[strCategory];
            if (section == null)
                return "";

            return section.Value;
        }

        // 检索该帐户是否对指定的配置事项有指定的权限
        // parameters:
        //		strPath	配置事项路径
        //		strRights	以逗号分隔的权限列表
        // return:
        //		true	有
        //		false	无
        public bool HasRights(string strPath,
            ResType resType,
            string strOneRight,
            out string strExistRights)
        {
            strExistRights = "";

            ResultType resultType = new ResultType();
            string strError = "";
            int nRet = this.cfgRights.CheckRights(strPath,
                resType,
                strOneRight,
                out strExistRights,
                out resultType,
                out strError);
            if (nRet == -1)
            {
                throw new Exception("CheckRights()出错，原因：" + strError);
            }

            if (resultType == ResultType.Plus)
                return true;

            return false;
        }


        // strNewPassword: 明码
        public int ChangePassword(string strNewPassword,
            out string strError)
        {
            strError = "";

            // 检索是否有修改自己密码的权限
            bool bHasChangePasswordRights = true;
            bHasChangePasswordRights = this.CheckChangePasswordRights();
            if (bHasChangePasswordRights == false)
            {
                strError = "您的用户名为'" + this.Name + "'，没有修改自己密码的权限。";
                return -1;
            }


            this.SHA1Password = Cryptography.GetSHA1(strNewPassword);

            // 用最新的密码
            XmlNode root = this.m_dom.DocumentElement;
            XmlNode nodePassword = root.SelectSingleNode("password");
            DomUtil.SetNodeText(nodePassword, this.SHA1Password);

            return this.InternalSave(out strError);
        }

        // 缺省认为可以修改自己的密码
        private bool CheckChangePasswordRights()
        {
            if (this.m_dom != null)
            {
                XmlNode nodePassword = this.m_dom.DocumentElement.SelectSingleNode("password");
                string strStyle = DomUtil.GetAttr(nodePassword, "style");
                if (StringUtil.IsInList("changepassworddenied", strStyle, true) == true)
                    return false;
            }
            return true;
        }


        public int InternalSave(out string strError)
        {
            strError = "";
            if (this.m_db == null)
            {
                strError = "帐户不可能不属于某个库";
                return -1;
            }

            DbPath path = new DbPath(this.ResPath);
            MemoryStream fs = new MemoryStream();
            this.m_dom.Save(fs);
            fs.Seek(0, SeekOrigin.Begin);

            byte[] baSource = new byte[fs.Length];
            fs.Read(baSource,
                0,
                baSource.Length);
            fs.Close();

            string strRange = "0-" + Convert.ToString(baSource.Length - 1);
            // 开始保存帐户内容
            // 先读一下,得到时间戳才可以保存
            byte[] baTimestamp;
            string strMetadata;
            string strOutputResPath;
            byte[] destBuffer;
            long nRet = this.m_db.GetXml(path.ID,
                null,
                0,
                0,
                0,
                "timestamp",
                out destBuffer,
                out strMetadata,
                out strOutputResPath,
                out baTimestamp,
                false,
                out strError);
            if (nRet <= -1)
                return (int)nRet;

            byte[] outputTimestamp;
            string strOutputID;
            string strOutputValue;
            return this.m_db.WriteXml(null, //oUser
                path.ID,
                null,
                strRange,
                baSource.Length,
                baSource,
                null,
                "",  //metadata
                "",  //style
                baTimestamp,
                out outputTimestamp,
                out strOutputID,
                out strOutputValue,
                false,
                out strError);
        }




    }  //end of class User

}
