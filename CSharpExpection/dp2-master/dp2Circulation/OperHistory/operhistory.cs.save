using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Reflection;
using System.Diagnostics;
using System.Net;   // for WebClient class
using System.IO;
using System.Web;
using System.Threading;

using DigitalPlatform;
using DigitalPlatform.Xml;
using DigitalPlatform.Script;
using DigitalPlatform.IO;
using DigitalPlatform.CirculationClient;
using DigitalPlatform.CirculationClient.localhost;


namespace dp2Circulation
{
    // 操作历史
    public class OperHistory
    {
        int m_inOnTimer = 0;
        List<OneCall> m_calls = new List<OneCall>();

        internal ReaderWriterLock m_lock = new ReaderWriterLock();
        internal static int m_nLockTimeout = 5000;	// 5000=5秒

        bool m_bNeedReload = false; // 是否需要重新装载project xml

        public WebBrowser WebBrowser = null;

        WebExternalHost m_webExternalHost = new WebExternalHost();


        public MainForm MainForm = null;

        int m_nCount = 0;

        // 脚本管理器
        public ScriptManager ScriptManager = new ScriptManager();

        Assembly PrintAssembly = null;   // 打印代码的Assembly
        public PrintHost PrintHostObj = null;   // Script代码中PrintHost派生对象实例

        int m_nAssenblyVersion = 0;

        int AssemblyVersion
        {
            get
            {
                return this.m_nAssenblyVersion;
            }
            set
            {
                this.m_nAssenblyVersion = value;
            }
        }

        public string CurrentProjectName
        {
            get
            {
                return this.MainForm.AppInfo.GetString(
                "charging_print",
                "projectName",
                "");
            }
        }

        public int Initial(MainForm main_form,
            WebBrowser webbrowser,
            out string strError)
        {
            int nRet = 0;
            strError = "";

            this.MainForm = main_form;

            string strLibraryServerUrl = this.MainForm.AppInfo.GetString(
"config",
"circulation_server_url",
"");
            int pos = strLibraryServerUrl.LastIndexOf("/");
            if (pos != -1)
                strLibraryServerUrl = strLibraryServerUrl.Substring(0, pos);


            this.WebBrowser = webbrowser;

            // webbrowser
            this.m_webExternalHost.Initial(this.MainForm);
            this.WebBrowser.ObjectForScripting = this.m_webExternalHost;

            string strCssUrl = strLibraryServerUrl + "/history.css";

            string strLink = "<LINK href='" + strCssUrl + "' type='text/css' rel='stylesheet'>";

            string strJs = "<SCRIPT language='javaSCRIPT' src='" + strLibraryServerUrl + "/getsummary.js" + "'></SCRIPT>";

            Global.WriteHtml(this.WebBrowser,
                "<html><head>" + strLink + strJs + "</head><body>");

            /*

            // 准备script代码
            string strCsFileName = this.MainForm.DataDir + "\\charging_print.cs";
            string strRefFileName = this.MainForm.DataDir + "\\charging_print.cs.ref";

            if (File.Exists(strCsFileName) == true)
            {
                Encoding encoding = FileUtil.DetectTextFileEncoding(strCsFileName);

                StreamReader sr = null;

                try
                {
                    // TODO: 这里的自动探索文件编码方式功能不正确，
                    // 需要专门编写一个函数来探测文本文件的编码方式
                    // 目前只能用UTF-8编码方式
                    sr = new StreamReader(strCsFileName, encoding);
                }
                catch (Exception ex)
                {
                    strError = ex.Message;
                    return -1;
                }
                string strCode = sr.ReadToEnd();
                sr.Close();
                sr = null;

                // .ref文件可以缺省
                string strRef = "";
                if (File.Exists(strRefFileName) == true)
                {

                    try
                    {
                        sr = new StreamReader(strRefFileName, true);
                    }
                    catch (Exception ex)
                    {
                        strError = ex.Message;
                        return -1;
                    }
                    strRef = sr.ReadToEnd();
                    sr.Close();
                    sr = null;

                    // 提前检查
                    string[] saRef = null;
                    nRet = ScriptManager.GetRefsFromXml(strRef,
                        out saRef,
                        out strError);
                    if (nRet == -1)
                    {
                        strError = strRefFileName + " 文件内容(应为XML格式)格式错误: " + strError;
                        return -1;
                    }
                }

                nRet = PrepareScript(strCode,
                   strRef,
                   out strError);
                if (nRet == -1)
                {
                    strError = "C#脚本文件 " + strCsFileName + " 准备过程发生错误(出纳单据打印功能因此暂时失效)：\r\n\r\n" + strError;
                    return -1;
                }
            }
             * */

            ///
            ScriptManager.applicationInfo = this.MainForm.AppInfo;
            ScriptManager.CfgFilePath =
                this.MainForm.DataDir + "\\charging_print_projects.xml";
            ScriptManager.DataDir = this.MainForm.DataDir;

            ScriptManager.CreateDefaultContent -= new CreateDefaultContentEventHandler(scriptManager_CreateDefaultContent);
            ScriptManager.CreateDefaultContent += new CreateDefaultContentEventHandler(scriptManager_CreateDefaultContent);

            try
            {
                ScriptManager.Load();
            }
            catch (FileNotFoundException ex)
            {
                strError = "file not found : " + ex.Message;
                return 0;   // 当作正常处理
            }
            catch (Exception ex)
            {
                strError = "load script manager error: " + ex.Message;
                return -1;
            }

            // 获得方案名
            string strProjectName = CurrentProjectName;

            if (String.IsNullOrEmpty(strProjectName) == false)
            {
                string strProjectLocate = "";
                // 获得方案参数
                // strProjectNamePath	方案名，或者路径
                // return:
                //		-1	error
                //		0	not found project
                //		1	found
                nRet = this.ScriptManager.GetProjectData(
                    strProjectName,
                    out strProjectLocate);
                if (nRet == 0)
                {
                    strError = "凭条打印方案 " + strProjectName + " 没有找到...";
                    return -1;
                }
                if (nRet == -1)
                {
                    strError = "scriptManager.GetProjectData() error ...";
                    return -1;
                }

                // 
                nRet = PrepareScript(strProjectName,
                    strProjectLocate,
                    out strError);
                if (nRet == -1)
                    return -1;

                // 2008/5/9 new add
                this.Initial();
            }

            return 0;
        }

        public void Close()
        {
            if (this.m_webExternalHost != null)
                this.m_webExternalHost.Close();
        }

        private void scriptManager_CreateDefaultContent(object sender,
            CreateDefaultContentEventArgs e)
        {
            string strPureFileName = Path.GetFileName(e.FileName);

            if (String.Compare(strPureFileName, "main.cs", true) == 0)
            {
                CreateDefaultMainCsFile(e.FileName);
                e.Created = true;
            }
            else
            {
                e.Created = false;
            }

        }

        // 创建缺省的main.cs文件
        public static int CreateDefaultMainCsFile(string strFileName)
        {

            StreamWriter sw = new StreamWriter(strFileName, false, Encoding.UTF8);
            sw.WriteLine("using System;");
            sw.WriteLine("using System.Windows.Forms;");
            sw.WriteLine("using System.IO;");
            sw.WriteLine("using System.Text;");
            sw.WriteLine("using System.Xml;");
            sw.WriteLine("");
            sw.WriteLine("using DigitalPlatform.Xml;");
            sw.WriteLine("using DigitalPlatform.IO;");
            sw.WriteLine("");
            sw.WriteLine("using dp2Circulation;");
            sw.WriteLine("");
            sw.WriteLine("public class MyPrint : PrintHost");
            sw.WriteLine("{");
            sw.WriteLine("");
            sw.WriteLine("\tpublic override void OnTestPrint(object sender, PrintEventArgs e)");
            sw.WriteLine("\t{");
            sw.WriteLine("\t}");
            sw.WriteLine("");
            sw.WriteLine("");
            sw.WriteLine("\tpublic override void OnPrint(object sender, PrintEventArgs e)");
            sw.WriteLine("\t{");
            sw.WriteLine("\t}");
            sw.WriteLine("");
            sw.WriteLine("}");

            sw.Close();

            return 0;
        }

        // 打开方案管理窗口
        public void OnProjectManager(IWin32Window owner)
        {
            ProjectManageDlg dlg = new ProjectManageDlg();

            dlg.scriptManager = this.ScriptManager;
            dlg.applicationInfo = this.MainForm.AppInfo;
            dlg.StartPosition = FormStartPosition.CenterScreen;

            this.m_bNeedReload = false;

            dlg.CreateProjectXmlFile -= new AutoCreateProjectXmlFileEventHandle(dlg_CreateProjectXmlFile);
            dlg.CreateProjectXmlFile += new AutoCreateProjectXmlFileEventHandle(dlg_CreateProjectXmlFile);

            dlg.ShowDialog(owner);

            // 如果需要重新装载project xml
            if (this.m_bNeedReload == true)
            {
                string strError = "";
                try
                {
                    ScriptManager.Load();
                }
                catch (Exception ex)
                {
                    strError = "load script manager error: " + ex.Message;
                    MessageBox.Show(owner, strError);
                }
            }

        }

        // 发生了自动创建project xml文件的事件
        void dlg_CreateProjectXmlFile(object sender, AutoCreateProjectXmlFileEventArgs e)
        {
            m_bNeedReload = true;
        }

        // 调用脚本中的OnInitial()函数，初始化对象状态
        public void Initial()
        {
            // 运行Script代码
            if (this.PrintAssembly != null)
            {
                EventArgs e = new EventArgs();

                this.PrintHostObj.MainForm = this.MainForm;
                this.PrintHostObj.Assembly = this.PrintAssembly;
                try
                {
                    this.PrintHostObj.OnInitial(this, e);
                }
                catch (Exception ex)
                {
                    string strErrorInfo = "<br/>OnInitial()时出错: " + HttpUtility.HtmlEncode(ExceptionUtil.GetDebugText(ex));
                    AppendHtml(strErrorInfo);
                }
            }
        }

        public void ReaderBarcodeScaned(string strReaderBarcode)
        {
            // 运行Script代码
            if (this.PrintAssembly != null)
            {
                ReaderBarcodeScanedEventArgs e = new ReaderBarcodeScanedEventArgs();
                e.ReaderBarcode = strReaderBarcode;

                this.PrintHostObj.MainForm = this.MainForm;
                this.PrintHostObj.Assembly = this.PrintAssembly;
                try
                {
                    this.PrintHostObj.OnReaderBarcodeScaned(this, e);
                }
                catch (Exception ex)
                {
                    string strErrorInfo = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(ExceptionUtil.GetDebugText(ex));
                    AppendHtml(strErrorInfo);
                }
            }
        }

        // 创建打印内容并打印出来
        public void Print()
        {
            // 运行Script代码
            if (this.PrintAssembly != null)
            {
                PrintEventArgs e = new PrintEventArgs();
                e.PrintInfo = this.PrintHostObj.PrintInfo;
                e.Action = "print";

                this.PrintHostObj.MainForm = this.MainForm;
                this.PrintHostObj.Assembly = this.PrintAssembly;
                try
                {
                    this.PrintHostObj.OnPrint(this, e);
                }
                catch (Exception ex)
                {
                    string strErrorInfo = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(ExceptionUtil.GetDebugText(ex));
                    AppendHtml(strErrorInfo);
                }
            }
        }

        // 创建打印内容并打印出来
        public void Print(PrintInfo info)
        {
            // 运行Script代码
            if (this.PrintAssembly != null)
            {
                PrintEventArgs e = new PrintEventArgs();
                e.PrintInfo = info;
                e.Action = "print";

                this.PrintHostObj.MainForm = this.MainForm;
                this.PrintHostObj.Assembly = this.PrintAssembly;
                try
                {
                    this.PrintHostObj.OnPrint(this, e);
                }
                catch (Exception ex)
                {
                    string strErrorInfo = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(ExceptionUtil.GetDebugText(ex));
                    AppendHtml(strErrorInfo);
                }
            }
        }

        // 创建打印内容
        public void GetPrintContent(PrintInfo info,
            out string strResultString,
            out string strResultFormat)
        {
            strResultString = "";
            strResultFormat = "";

            // 运行Script代码
            if (this.PrintAssembly != null)
            {
                PrintEventArgs e = new PrintEventArgs();
                e.PrintInfo = info;
                e.Action = "create";

                this.PrintHostObj.MainForm = this.MainForm;
                this.PrintHostObj.Assembly = this.PrintAssembly;
                try
                {
                    this.PrintHostObj.OnPrint(this, e);
                }
                catch (Exception ex)
                {
                    string strErrorInfo = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(ExceptionUtil.GetDebugText(ex));
                    AppendHtml(strErrorInfo);
                }

                strResultString = e.ResultString;
                strResultFormat = e.ResultFormat;
            }

        }

        public void TestPrint()
        {
            // 运行Script代码
            if (this.PrintAssembly != null)
            {
                PrintEventArgs e = new PrintEventArgs();
                e.PrintInfo = this.PrintHostObj.PrintInfo;

                this.PrintHostObj.MainForm = this.MainForm;
                this.PrintHostObj.Assembly = this.PrintAssembly;
                try
                {
                    this.PrintHostObj.OnTestPrint(this, e);
                }
                catch (Exception ex)
                {
                    string strErrorInfo = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(ExceptionUtil.GetDebugText(ex));
                    AppendHtml(strErrorInfo);
                }
            }
        }

        /*
        public void Action(string strActionName)
        {
            // 运行Script代码
            if (this.PrintAssembly != null)
            {
                ActionEventArgs e = new ActionEventArgs();
                e.Operation = strActionName;
                e.OperName = strActionName;

                string strError = "";
                int nRet = this.TriggerScriptAction(e, out strError);
                if (nRet == -1)
                {
                    string strText = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(strError);
                    AppendHtml(strText);
                }
            }
        }*/

        public delegate void Delegate_Borrow(ChargingForm charging_form,
            bool bRenew,
            string strReaderBarcode,
            string strItemBarcode,
            string strConfirmItemRecPath,
            string strReaderSummary,
            string strItemXml, 
            BorrowInfo borrow_info,
            DateTime start_time);

        public void BorrowAsync(ChargingForm charging_form,
            bool bRenew,
            string strReaderBarcode,
            string strItemBarcode,
            string strConfirmItemRecPath,
            string strReaderSummary,
            string strItemXml,
            BorrowInfo borrow_info,
            DateTime start_time)
        {
            /*
            Delegate_Borrow d = new Delegate_Borrow(Borrow);
            this.MainForm.BeginInvoke(d, new object[] { charging_form,
            bRenew,
            strReaderBarcode,
            strItemBarcode,
            strConfirmItemRecPath,
            strReaderSummary,
            strItemXml, 
            borrow_info,
            start_time });
             * */
            OneCall call = new OneCall();
            call.name = "borrow";
            call.func = new Delegate_Borrow(Borrow);
            call.parameters = new object[] { charging_form,
            bRenew,
            strReaderBarcode,
            strItemBarcode,
            strConfirmItemRecPath,
            strReaderSummary,
            strItemXml, 
            borrow_info,
            start_time };

            AddCall(call);
        }

        public void Borrow(
            ChargingForm charging_form,
            bool bRenew,
            string strReaderBarcode,
            string strItemBarcode,
            string strConfirmItemRecPath,
            string strReaderSummary,
            string strItemXml,  // 2008/5/9 new add
            BorrowInfo borrow_info,
            DateTime start_time)
        {
            TimeSpan delta = DateTime.Now - start_time; // 未包括GetSummary()的时间

            string strText = "";

            string strOperName = "借阅";
            if (bRenew == true)
                strOperName = "续借";

            string strError = "";
            string strSummary = "";
            int nRet = this.MainForm.GetBiblioSummary(strItemBarcode,
                    strConfirmItemRecPath,
                    out strSummary,
                    out strError);
            if (nRet == -1)
                strSummary = strError;


            string strOperClass = "oper_1";
            if ((this.m_nCount % 2) == 1)
                strOperClass = "oper_2";

            strText = "<div class='" + strOperClass + "'>"
                + "<div class='time_line'><span class='time'>" + DateTime.Now.ToLongTimeString() + "</span> <span class='time_span'>耗时 " + delta.ToString() + "</span></div>"
                + "<div class='reader_line'><span class='reader_prefix_text'>读者</span> <span class='reader_barcode'>[" + strReaderBarcode + "]</span>"
            + " <span class='reader_summary'>" + strReaderSummary + "<span></div>"
            + "<div class='opername_line'><span class='opername'>" + strOperName + "<span></div>"
            + "<div class='item_line'><span class='item_prefix_text'>册</span> <span class='item_barcode'>[" + strItemBarcode + "]</span> "
            + "<span class='item_summary'>" + strSummary + "</span></div>"
        + "</div>";
            /*
            strText = "<div class='" + strOperClass + "'>"
    + "<div class='time_line'><span class='time'>" + DateTime.Now.ToLongTimeString() + "</span> <span class='time_span'>耗时 " + delta.ToString() + "</span></div>"
    + "<div class='reader_line'><span class='reader_prefix_text'>读者</span> <span class='reader_barcode'>[" + strReaderBarcode + "]</span>"
+ " <span class='reader_summary'>" + strReaderSummary + "<span></div>"
+ "<div class='opername_line'><span class='opername'>" + strOperName + "<span></div>"
+ "<div class='item_line'><span class='item_prefix_text'>册</span> <span class='item_barcode'>[" + strItemBarcode + "]</span> "
+ "<span class='item_summary' id='" + m_nCount.ToString() + "' onreadystatechange='GetOneSummary(\"" + m_nCount.ToString() + "\");'>" + strItemBarcode + "</span></div>"
+ "</div>";
             * */

            AppendHtml(strText);
            m_nCount++;


            // 运行Script代码
            if (this.PrintAssembly != null)
            {
                BorrowedEventArgs e = new BorrowedEventArgs();
                e.OperName = strOperName;
                e.BiblioSummary = strSummary;
                e.ItemBarcode = strItemBarcode;
                e.ReaderBarcode = strReaderBarcode;
                e.TimeSpan = delta;
                e.ReaderSummary = strReaderSummary;
                e.ItemXml = strItemXml;
                e.ChargingForm = charging_form;

                if (borrow_info != null)
                {
                    if (String.IsNullOrEmpty(borrow_info.LatestReturnTime) == true)
                        e.LatestReturnDate = new DateTime(0);
                    else
                        e.LatestReturnDate = DateTimeUtil.FromRfc1123DateTimeString(borrow_info.LatestReturnTime).ToLocalTime();
                    e.Period = borrow_info.Period;
                    e.BorrowCount = borrow_info.BorrowCount;
                }

                this.PrintHostObj.MainForm = this.MainForm;
                this.PrintHostObj.Assembly = this.PrintAssembly;
                try
                {
                    this.PrintHostObj.OnBorrowed(this, e);
                }
                catch (Exception ex)
                {
                    string strErrorInfo = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(ExceptionUtil.GetDebugText(ex));
                    AppendHtml(strErrorInfo);
                }
                /*
                if (nRet == -1)
                {
                    strText = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(strError);
                    AppendHtml(strText);
                }*/
            }

            // 用tips飞出显示读者和册的摘要信息？或者明确显示在条码后面？
            // 读者和册条码本身就是锚点？
            // 读者摘要要么做在前端，通过XML发生，要么做在服务器，用固定规则发生。
        }

        public delegate void Delegate_Return(ChargingForm charging_form,
            bool bLost,
            string strReaderBarcode,
            string strItemBarcode,
            string strConfirmItemRecPath,
            string strReaderSummary,
            string strItemXml,
            ReturnInfo return_info,
            DateTime start_time);

        public void ReturnAsync(ChargingForm charging_form,
            bool bLost,
            string strReaderBarcode,
            string strItemBarcode,
            string strConfirmItemRecPath,
            string strReaderSummary,
            string strItemXml,
            ReturnInfo return_info,
            DateTime start_time)
        {
            /*
            Delegate_Return d = new Delegate_Return(Return);
            this.MainForm.BeginInvoke(d, new object[] {charging_form,
            bLost,
            strReaderBarcode,
            strItemBarcode,
            strConfirmItemRecPath,
            strReaderSummary,
            strItemXml,
            return_info,
            start_time });
             * */
            OneCall call = new OneCall();
            call.name = "return";
            call.func = new Delegate_Return(Return);
            call.parameters = new object[] { charging_form,
            bLost,
            strReaderBarcode,
            strItemBarcode,
            strConfirmItemRecPath,
            strReaderSummary,
            strItemXml,
            return_info,
            start_time };

            AddCall(call);
        }

        void AddCall(OneCall call)
        {
            this.m_lock.AcquireWriterLock(m_nLockTimeout);
            try
            {
                this.m_calls.Add(call);
            }
            finally
            {
                this.m_lock.ReleaseWriterLock();
            }
        }

        public void OnTimer()
        {
            if (this.m_inOnTimer > 0)
                return;
            this.m_lock.AcquireWriterLock(m_nLockTimeout);
            this.m_inOnTimer++;
            try
            {
                for (int i = 0; i < this.m_calls.Count; i++)
                {
                    OneCall call = this.m_calls[i];

                    if (call.name == "borrow")
                    {
                        Delegate_Borrow d = (Delegate_Borrow)call.func;
                        this.MainForm.Invoke(d, call.parameters);
                    }
                    else if (call.name == "return")
                    {
                        Delegate_Return d = (Delegate_Return)call.func;
                        this.MainForm.Invoke(d, call.parameters);
                    }
                }

                this.m_calls.Clear();
            }
            finally
            {
                this.m_inOnTimer--;
                this.m_lock.ReleaseWriterLock();
            }
        }

        public void Return(
            ChargingForm charging_form,
            bool bLost,
            string strReaderBarcode,
            string strItemBarcode,
            string strConfirmItemRecPath,
            string strReaderSummary,
            string strItemXml,  // 2008/5/9 new add
            ReturnInfo return_info,
            DateTime start_time)
        {
            TimeSpan delta = DateTime.Now - start_time; // 未包括GetSummary()的时间

            string strText = "";

            string strOperName = "还回";
            if (bLost == true)
                strOperName = "丢失";

            string strError = "";

            string strSummary = "";
            int nRet = this.MainForm.GetBiblioSummary(strItemBarcode,
                    strConfirmItemRecPath,
                    out strSummary,
                    out strError);
            if (nRet == -1)
                strSummary = strError;

            string strOperClass = "oper_1";
            if ((this.m_nCount % 2) == 1)
                strOperClass = "oper_2";

            strText = "<div class='" + strOperClass + "'>"
                + "<div class='time_line'><span class='time'>" + DateTime.Now.ToLongTimeString() + "</span> <span class='time_span'>耗时 " + delta.ToString() + "</span></div>"
                + "<div class='reader_line'><span class='reader_prefix_text'>读者</span> <span class='reader_barcode'>[" + strReaderBarcode + "]</span>"
            + " <span class='reader_summary'>" + strReaderSummary + "<span></div>"
            + "<div class='opername_line'><span class='opername'>" + strOperName + "<span></div>"
            + "<div class='item_line'><span class='item_prefix_text'>册</span> <span class='item_barcode'>[" + strItemBarcode + "]</span> "
            + "<span class='item_summary'>" + strSummary + "</span></div>"
        + "</div>";

            /*
            strText = "<div class='" + strOperClass + "'>"
    + "<div class='time_line'><span class='time'>" + DateTime.Now.ToLongTimeString() + "</span> <span class='time_span'>耗时 " + delta.ToString() + "</span></div>"
    + "<div class='reader_line'><span class='reader_prefix_text'>读者</span> <span class='reader_barcode'>[" + strReaderBarcode + "]</span>"
+ " <span class='reader_summary'>" + strReaderSummary + "<span></div>"
+ "<div class='opername_line'><span class='opername'>" + strOperName + "<span></div>"
+ "<div class='item_line'><span class='item_prefix_text'>册</span> <span class='item_barcode'>[" + strItemBarcode + "]</span> "
+ "<span class='item_summary' id='" + m_nCount.ToString() + "' onreadystatechange='GetOneSummary(\"" + m_nCount.ToString() + "\");'>" + strItemBarcode + "</span></div>"
+ "</div>";
             * */


            AppendHtml(strText);
            m_nCount++;

            // 运行Script代码
            if (this.PrintAssembly != null)
            {
                ReturnedEventArgs e = new ReturnedEventArgs();
                e.OperName = strOperName;
                e.BiblioSummary = strSummary;
                e.ItemBarcode = strItemBarcode;
                e.ReaderBarcode = strReaderBarcode;
                e.TimeSpan = delta;
                e.ReaderSummary = strReaderSummary;
                e.ItemXml = strItemXml;
                e.ChargingForm = charging_form;

                if (return_info != null)
                {
                    if (String.IsNullOrEmpty(return_info.BorrowTime) == true)
                        e.BorrowDate = new DateTime(0);
                    else
                        e.BorrowDate = DateTimeUtil.FromRfc1123DateTimeString(return_info.BorrowTime).ToLocalTime();

                    if (String.IsNullOrEmpty(return_info.LatestReturnTime) == true)
                        e.LatestReturnDate = new DateTime(0);
                    else
                        e.LatestReturnDate = DateTimeUtil.FromRfc1123DateTimeString(return_info.LatestReturnTime).ToLocalTime();
                    e.Period = return_info.Period;
                    e.BorrowCount = return_info.BorrowCount;
                    e.OverdueString = return_info.OverdueString;

                }

                this.PrintHostObj.MainForm = this.MainForm;
                this.PrintHostObj.Assembly = this.PrintAssembly;
                try
                {
                    this.PrintHostObj.OnReturned(this, e);
                }
                catch (Exception ex)
                {
                    string strErrorInfo = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(ExceptionUtil.GetDebugText(ex));
                    AppendHtml(strErrorInfo);
                }
            }

        }

        void AppendHtml(string strText)
        {
            /*
            this.m_lock.AcquireWriterLock(m_nLockTimeout);
            try
            {
             * */
                Global.WriteHtml(this.WebBrowser,
                    strText);
                Global.ScrollToEnd(this.WebBrowser);
            /*
            }
            catch
            {
            }
            finally
            {
                this.m_lock.ReleaseWriterLock();
            }
             * */
        }


        public void Amerce(
            string strReaderBarcode,
            string strReaderSummary,
            List<OverdueItemInfo> overdue_infos,
            DateTime start_time)
        {
            string strOperName = "交违约金";
            TimeSpan delta = DateTime.Now - start_time;

            /*
            string strText = "";
            string strError = "";
             * 
            string strOperClass = "oper_1";
            if ((this.m_nCount % 2) == 1)
                strOperClass = "oper_2";

            strText = "<div class='" + strOperClass + "'>"
                + "<div class='time_line'><span class='time'>" + DateTime.Now.ToLongTimeString() + "</span> <span class='time_span'>耗时 " + delta.ToString() + "</span></div>"
                + "<div class='reader_line'><span class='reader_prefix_text'>读者</span> <span class='reader_barcode'>[" + strReaderBarcode + "]</span>"
            + " <span class='reader_summary'>" + strReaderSummary + "<span></div>"
            + "<div class='opername_line'><span class='opername'>" + strOperName + "<span></div>"
            + "<div class='item_line'><span class='item_prefix_text'>册</span> <span class='item_barcode'>[" + strItemBarcode + "]</span> "
            + "<span class='item_summary'>" + strSummary + "</span></div>"
        + "</div>";

            AppendHtml(strText);
            m_nCount++;
             * */


            // 运行Script代码
            if (this.PrintAssembly != null)
            {
                AmercedEventArgs e = new AmercedEventArgs();
                e.OperName = strOperName;
                e.ReaderBarcode = strReaderBarcode;
                e.ReaderSummary = strReaderSummary;
                e.TimeSpan = delta;

                e.OverdueInfos = overdue_infos;

                this.PrintHostObj.MainForm = this.MainForm;
                this.PrintHostObj.Assembly = this.PrintAssembly;
                try
                {
                    this.PrintHostObj.OnAmerced(this, e);
                }
                catch (Exception ex)
                {
                    string strErrorInfo = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(ExceptionUtil.GetDebugText(ex));
                    AppendHtml(strErrorInfo);
                }
                /*
                if (nRet == -1)
                {
                    strText = "<br/>单据打印脚本运行时出错: " + HttpUtility.HtmlEncode(strError);
                    AppendHtml(strText);
                }*/
            }

        }

#if NOOOOOOOOOOOOOO
        int PrepareScript(string strCode,
            string strRef,
            out string strError)
        {
            strError = "";
            string[] saRef = null;
            int nRet;

            nRet = ScriptManager.GetRefsFromXml(strRef,
                out saRef,
                out strError);
            if (nRet == -1)
            {
                strError = "strRef代码\r\n\r\n" + strRef + "\r\n\r\n格式错误: " + strError;
                return -1;
            }

            // 2007/12/4 new add
            ScriptManager.RemoveRefsBinDirMacro(ref saRef);

            string[] saAddRef = {
									Environment.CurrentDirectory + "\\digitalplatform.dll",
									Environment.CurrentDirectory + "\\digitalplatform.IO.dll",
									Environment.CurrentDirectory + "\\digitalplatform.Text.dll",
									Environment.CurrentDirectory + "\\digitalplatform.Xml.dll",
									Environment.CurrentDirectory + "\\digitalplatform.marceditor.dll",
									Environment.CurrentDirectory + "\\digitalplatform.marckernel.dll",
									Environment.CurrentDirectory + "\\digitalplatform.marcfixedfieldcontrol.dll",
									Environment.CurrentDirectory + "\\digitalplatform.gcatclient.dll",
									Environment.CurrentDirectory + "\\dp2circulation.exe"
								};

            if (saAddRef != null)
            {
                string[] saTemp = new string[saRef.Length + saAddRef.Length];
                Array.Copy(saRef, 0, saTemp, 0, saRef.Length);
                Array.Copy(saAddRef, 0, saTemp, saRef.Length, saAddRef.Length);
                saRef = saTemp;
            }

            string strErrorInfo = "";
            string strWarningInfo = "";
            nRet = ScriptManager.CreateAssembly_1(strCode,
                saRef,
                null,   // strLibPaths,
                out this.PrintAssembly,
                out strErrorInfo,
                out strWarningInfo);
            if (nRet == -1)
            {
                strError = "脚本编译发现错误或警告:\r\n" + strErrorInfo;
                return -1;
            }

            // 得到Assembly中PrintHost派生类Type
            Type entryClassType = ScriptManager.GetDerivedClassType(
                PrintAssembly,
                "dp2Circulation.PrintHost");
            if (entryClassType == null)
            {
                strError = "dp2Circulation.PrintHost派生类没有找到";
                return -1;
            }

            // new一个PrintHost派生对象
            this.PrintHostObj = (PrintHost)entryClassType.InvokeMember(null,
                BindingFlags.DeclaredOnly |
                BindingFlags.Public | BindingFlags.NonPublic |
                BindingFlags.Instance | BindingFlags.CreateInstance, null, null,
                null);

            if (PrintHostObj == null)
            {
                strError = "new PrintHost派生类对象失败";
                return -1;
            }



            return 0;
        }
#endif

        // 准备脚本环境
        int PrepareScript(string strProjectName,
            string strProjectLocate,
            out string strError)
        {
            strError = "";
            this.PrintAssembly = null;

            PrintHostObj = null;

            string strWarning = "";

            string strMainCsDllName = strProjectLocate + "\\~charging_print_main_" + Convert.ToString(AssemblyVersion++) + ".dll";    // ++

            string strLibPaths = "\"" + this.MainForm.DataDir + "\""
                + ","
                + "\"" + strProjectLocate + "\"";

            string[] saAddRef = {
									Environment.CurrentDirectory + "\\digitalplatform.dll",
									Environment.CurrentDirectory + "\\digitalplatform.IO.dll",
									Environment.CurrentDirectory + "\\digitalplatform.Text.dll",
									Environment.CurrentDirectory + "\\digitalplatform.Xml.dll",
									Environment.CurrentDirectory + "\\digitalplatform.marceditor.dll",
									Environment.CurrentDirectory + "\\digitalplatform.marckernel.dll",
									Environment.CurrentDirectory + "\\digitalplatform.marcfixedfieldcontrol.dll",
									Environment.CurrentDirectory + "\\digitalplatform.gcatclient.dll",
									Environment.CurrentDirectory + "\\dp2circulation.exe"
            };


            // 创建Project中Script main.cs的Assembly
            // return:
            //		-2	出错，但是已经提示过错误信息了。
            //		-1	出错
            int nRet = ScriptManager.BuildAssembly(
                strProjectName,
                "main.cs",
                saAddRef,
                strLibPaths,
                strMainCsDllName,
                out strError,
                out strWarning);
            if (nRet == -2)
                goto ERROR1;
            if (nRet == -1)
            {
                if (strWarning == "")
                    goto ERROR1;
                MessageBox.Show(this.MainForm, strWarning);
            }


            this.PrintAssembly = Assembly.LoadFrom(strMainCsDllName);
            if (this.PrintAssembly == null)
            {
                strError = "LoadFrom " + strMainCsDllName + " fail";
                goto ERROR1;
            }

            // 得到Assembly中PrintHost派生类Type
            Type entryClassType = ScriptManager.GetDerivedClassType(
                PrintAssembly,
                "dp2Circulation.PrintHost");
            if (entryClassType == null)
            {
                strError = "dp2Circulation.PrintHost派生类没有找到";
                return -1;
            }

            // new一个PrintHost派生对象
            this.PrintHostObj = (PrintHost)entryClassType.InvokeMember(null,
                BindingFlags.DeclaredOnly |
                BindingFlags.Public | BindingFlags.NonPublic |
                BindingFlags.Instance | BindingFlags.CreateInstance, null, null,
                null);

            if (this.PrintHostObj == null)
            {
                strError = "new PrintHost派生类对象失败";
                return -1;
            }

            this.PrintHostObj.ProjectDir = strProjectLocate;
            return 0;
        ERROR1:
            return -1;
        }

    }

    class OneCall
    {
        public string name = "";
        public object func = null;
        public object [] parameters = null;
    }
}
