        // TODO: XPathExpression可以缓存起来，加快速度
        // 创建指定记录的浏览格式集合
        // parameters:
        //		domData	    记录数据dom 不能为null
        //      nStartCol   开始的列号。一般为0
        //      cols        浏览格式数组
        //		strError	out参数，出错信息
        // return:
        //		-1	出错
        //		>=0	成功。数字值代表每个列包含的字符数之和
        public int BuildCols(XmlDocument domData,
            int nStartCol,
            out string[] cols,
            out string strError)
        {
            strError = "";
            cols = new string[0];

            Debug.Assert(domData != null, "BuildCols()调用错误，domData参数不能为null。");

            // 没有浏览格式定义时，就没有信息
            if (this._dom == null)
                return 0;

            int nResultLength = 0;

            XPathNavigator nav = domData.CreateNavigator();

            List<string> col_array = new List<string>();

            if (this._dom.DocumentElement.Prefix == "")
            {
                Dictionary<string, MarcColumn> results = null;
                string filter = this._dom.DocumentElement.GetAttribute("filter");
                if (filter == "marc")
                {
                    // 汇总需要创建的列名
                    List<string> use_cols = GetUseColNames();
                    results = MarcBrowse.Build(domData.OuterXml,
                        use_cols);
                }

                // 得到xpath的值
                XmlNodeList nodeListXpath = this._dom.SelectNodes(@"//xpath");

            CREATE_CACHE:
                // 创建Cache
                if (m_exprCache.Count == 0 && nodeListXpath.Count > 0)
                {
                    for (int i = 0; i < nodeListXpath.Count; i++)
                    {
                        XmlNode nodeXpath = nodeListXpath[i];
                        string strXpath = nodeXpath.InnerText.Trim(); // 2012/2/16
                        if (string.IsNullOrEmpty(strXpath) == true)
                            continue;

                        string strNstableName = DomUtil.GetAttrDiff(nodeXpath, "nstable");
                        XmlNamespaceManager nsmgr = (XmlNamespaceManager)this.tableNsClient[nodeXpath];
#if DEBUG
                        if (nsmgr != null)
                        {
                            Debug.Assert(strNstableName != null, "此时应该没有定义'nstable'属性。");
                        }
                        else
                        {
                            Debug.Assert(strNstableName == null, "此时必须没有定义'nstable'属性。");
                        }
#endif

                        XPathExpression expr = nav.Compile(strXpath);
                        if (nsmgr != null)
                            expr.SetContext(nsmgr);

                        m_exprCache[nodeXpath] = expr;

                        // 把 convert 参数也缓存起来
                        XmlNode nodeCol = nodeXpath.ParentNode;
                        string strConvert = DomUtil.GetAttr(nodeCol, "convert");
                        if (string.IsNullOrEmpty(strConvert) == false)
                        {
                            List<string> convert_methods = GetMethods(strConvert);
                            m_methodsCache[nodeCol] = convert_methods;
                        }
                        else
                            m_methodsCache[nodeCol] = new List<string>();

                    }
                }

                for (int i = 0; i < nodeListXpath.Count; i++)
                {
                    XmlNode nodeXpath = nodeListXpath[i];
                    string strXpath = nodeXpath.InnerText.Trim(); // 2012/2/16
                    if (string.IsNullOrEmpty(strXpath) == true)
                        continue;

                    // 优化速度 2014/1/29
                    XmlNode nodeCol = nodeXpath.ParentNode;

                    List<string> convert_methods = (List<string>)m_methodsCache[nodeCol];
                    if (convert_methods == null)
                    {
                        Debug.Assert(false, "");
                        string strConvert = DomUtil.GetAttr(nodeCol, "convert");
                        convert_methods = GetMethods(strConvert);
                    }
#if NO
                    string strNstableName = DomUtil.GetAttrDiff(nodeXpath, "nstable");
                    XmlNamespaceManager nsmgr = (XmlNamespaceManager)this.tableNsClient[nodeXpath];
                    if (nsmgr != null)
                    {
                        Debug.Assert(strNstableName != null, "此时应该没有定义'nstable'属性。");
                    }
                    else
                    {
                        Debug.Assert(strNstableName == null, "此时必须没有定义'nstable'属性。");
                    }



                    XPathExpression expr = nav.Compile(strXpath);
                    if (nsmgr != null)
                        expr.SetContext(nsmgr);
#endif
                    XPathExpression expr = (XPathExpression)m_exprCache[nodeXpath];

                    if (expr == null)
                    {
                        this.m_exprCache.Clear();
                        this.m_methodsCache.Clear();
                        goto CREATE_CACHE;  // TODO: 如何预防死循环?
                    }

                    Debug.Assert(expr != null, "");

                    string strText = "";

                    if (expr.ReturnType == XPathResultType.Number)
                    {
                        strText = nav.Evaluate(expr).ToString();//Convert.ToString((int)(nav.Evaluate(expr)));
                        strText = ConvertText(convert_methods, strText);

                    }
                    else if (expr.ReturnType == XPathResultType.Boolean)
                    {
                        strText = Convert.ToString((bool)(nav.Evaluate(expr)));
                        strText = ConvertText(convert_methods, strText);
                    }
                    else if (expr.ReturnType == XPathResultType.String)
                    {
                        strText = (string)(nav.Evaluate(expr));
                        strText = ConvertText(convert_methods, strText);
                    }
                    else if (expr.ReturnType == XPathResultType.NodeSet)
                    {
                        // 看看是否要插入什么分隔符
                        string strSep = GetSepString(convert_methods);

                        XPathNodeIterator iterator = nav.Select(expr);
                        StringBuilder text = new StringBuilder(4096);
                        while (iterator.MoveNext())
                        {
                            XPathNavigator navigator = iterator.Current;
                            string strOneText = navigator.Value;
                            if (strOneText == "")
                                continue;

                            strOneText = ConvertText(convert_methods, strOneText);

                            // 加入分隔符号
                            if (text.Length > 0 && string.IsNullOrEmpty(strSep) == false)
                                text.Append(strSep);

                            text.Append(strOneText);
                        }

                        strText = text.ToString();
                    }
                    else
                    {
                        strError = "XPathExpression的ReturnType为'" + expr.ReturnType.ToString() + "'无效";
                        return -1;
                    }

                    // 空内容也要算作一列

                    // 2008/12/18

                    col_array.Add(strText);
                    nResultLength += strText.Length;
                }
            }
            else if (this._dom.DocumentElement.Prefix == "xsl")
            {
                if (this.m_xt == null)
                {
                    // <col>元素下的<title>元素要去掉
                    XmlDocument temp = new XmlDocument();
                    temp.LoadXml(this._dom.OuterXml);
                    XmlNodeList nodes = temp.DocumentElement.SelectNodes("//col/title");
                    foreach (XmlNode node in nodes)
                    {
                        node.ParentNode.RemoveChild(node);
                    }

                    XmlReader xr = new XmlNodeReader(temp);

                    // 把xsl加到XslTransform
                    XslCompiledTransform xt = new XslCompiledTransform(); // 2006/10/26 changed
                    xt.Load(xr/*, new XmlUrlResolver(), null*/);

                    this.m_xt = xt;
                }

                // 输出到的地方
                string strResultXml = "";

                using (TextWriter tw = new StringWriter())
                using (XmlTextWriter xw = new XmlTextWriter(tw))
                {
                    //执行转换 
                    this.m_xt.Transform(domData.CreateNavigator(), /*null,*/ xw /*, null*/);

                    // tw.Close();
                    tw.Flush(); // 2015/11/24 增加此句

                    strResultXml = tw.ToString();
                }

                XmlDocument resultDom = new XmlDocument();
                try
                {
                    if (string.IsNullOrEmpty(strResultXml) == false)
                        resultDom.LoadXml(strResultXml);
                    else
                        resultDom.LoadXml("<root />");
                }
                catch (Exception ex)
                {
                    strError = "browse 角色文件生成的结果文件加载到 XMLDOM 时出错：" + ex.Message;
                    return -1;
                }

                XmlNodeList colList = resultDom.DocumentElement.SelectNodes("//col");
                foreach (XmlNode colNode in colList)
                {
                    string strColText = colNode.InnerText.Trim();  // 2012/2/16

                    // 2008/12/18
                    string strConvert = DomUtil.GetAttr(colNode, "convert");
                    List<string> convert_methods = GetMethods(strConvert);

                    // 2008/12/18
                    if (String.IsNullOrEmpty(strConvert) == false)
                        strColText = ConvertText(convert_methods, strColText);

                    //if (strColText != "")  //空内容也要算作一列
                    col_array.Add(strColText);
                    nResultLength += strColText.Length;
                }
            }
            else
            {
                strError = "browse 角色文件的根元素的前缀'" + this._dom.DocumentElement.Prefix + "'不合法。";
                return -1;
            }

            // 把col_array转到cols里
            cols = new string[col_array.Count + nStartCol];
            col_array.CopyTo(cols, nStartCol);
            // cols = ConvertUtil.GetStringArray(nStartCol, col_array);
            return nResultLength;
        }