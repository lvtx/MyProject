        // 获得缺省帐户信息。回调函数，用于resdircontrol
        // return:
        //		2	already login succeed
        //		1	dialog return OK
        //		0	dialog return Cancel
        //		-1	other error
        public int AskAccountInfo(DtlpChannel channel,
            string strPath,
            out IWin32Window owner,	// 如果需要出现对话框，这里返回对话框的宿主Form
            out string strUserName,
            out string strPassword)
        {
            owner = null;
            strUserName = "";
            strPassword = "";

            LoginDlg dlg = new LoginDlg();

            AccountItem item = (AccountItem)AccountTable[strPath];
            if (item == null)
            {
                item = new AccountItem();
                AccountTable.Add(strPath, item);

                // 从配置文件中得到缺省账户
                item.UserName = MainForm.applicationInfo.GetString(
                    "preference",
                    "defaultUserName",
                    "public");
                item.Password = MainForm.applicationInfo.GetString(
                    "preference",
                    "defaultPassword",
                    "");


            }

            dlg.textBox_serverAddr.Text = strPath;
            dlg.textBox_userName.Text = item.UserName;
            dlg.textBox_password.Text = item.Password;

            // 先登录一次再说
            {
                byte[] baResult = null;
                int nRet = channel.API_ChDir(dlg.textBox_userName.Text,
                    dlg.textBox_password.Text,
                    strPath,
                    out baResult);

                // 登录成功
                if (nRet > 0)
                    return 2;
            }




            dlg.StartPosition = FormStartPosition.CenterScreen;
            dlg.ShowDialog(this);

            if (dlg.DialogResult == DialogResult.OK)
            {
                item.UserName = dlg.textBox_userName.Text;
                item.Password = dlg.textBox_password.Text;

                strUserName = dlg.textBox_userName.Text;
                strPassword = dlg.textBox_password.Text;
                owner = this;
                return 1;
            }

            return 0;
        }
        
        
        
        ~~~~~~~~~~~~~~~~
        
                // 将MARC-8字符串转换为Unicode字符串
        public int Marc8_to_Unicode(byte[] baSource,
    out string strTarget)
        {
            strTarget = "";

            int nEscCount = 0;
            bool bInEsc = false;
            bool bInCJK = false;
            bool bInMultiple = false;
            string strPart = "";

            string strError = "";

            for (int i = 0; i < baSource.Length; )
            {
                // char ch = strSource[i];
                if (baSource[i] == 0x1b && nEscCount == 0)
                {	// escape code
                    bInEsc = true;
                    nEscCount = 1;

                    i++;

                    // 看看strPart中是否有积累的内容
                    if (strPart != "")
                    {
                        if ((strPart.Length % 3) != 0)
                        {
                            strTarget += strPart;
                            goto CONTINUE1;
                        }
                        Debug.Assert((strPart.Length % 3) == 0, "");

                        string strTemp = "";
                        // strPart中必须存放非Unicode字符串
                        int nRet = this.EaccCharsetTable.EACCToUnicode(strPart,
                            out strTemp,
                            out strError);
                        if (nRet == -1)
                        {
                            strTarget += "[EACCToUnicode error:"
                                + strError + "][" + strPart + "]";

                            goto CONTINUE1;
                        }
                        strTarget += strTemp;

                    }
                CONTINUE1:
                    strPart = "";
                    continue;
                }

                if (bInEsc && nEscCount == 1)
                {
                    if (baSource[i] == 0x28 || baSource[i] == 0x2c)
                        bInMultiple = false;
                    else if (baSource[i] == 0x24)
                        bInMultiple = true;
                }

                if (bInEsc && nEscCount == 2)
                {
                    if (baSource[i] == 0x24 && bInMultiple == true)
                    {	// 国会图书馆$$1情况
                        i++;
                        continue;	// nEscCount不变，继续处理
                    }
                    if (baSource[i] == 0x28 && bInMultiple == false)
                    { // 国会图书馆((B情况
                        i++;
                        continue;
                    }
                    if (baSource[i] == 0x31)
                        bInCJK = true;
                    else
                        bInCJK = false;
                    bInEsc = false;
                    nEscCount = 0;
                    i++;
                    continue;
                }


                if (bInEsc)
                    nEscCount++;

                if (bInEsc == false)
                {
                    if (bInCJK == true)
                    {
                        strPart += (char)baSource[i];
                    }
                    else
                        strTarget += (char)baSource[i];
                }


                i++;
            }



            // 看看strPart中是否有积累的内容
            if (strPart != "")
            {
                if ((strPart.Length % 3) != 0)
                {
                    strTarget += strPart;
                    return 0;
                }
                Debug.Assert((strPart.Length % 3) == 0, "");

                string strTemp = "";

                // strPart中必须存放非Unicode字符串
                int nRet = this.EaccCharsetTable.EACCToUnicode(
                    strPart,
                    out strTemp,
                    out strError);
                if (nRet == -1)
                {
                    strTarget += "[EACCToUnicode error:"
                        + strError + "][" + strPart + "]";
                    return 0;
                }
                strTarget += strTemp;

            }

            return 0;
        }
        
        
        
        
                // 装载模板
        public int LoadDp2librarywsTemplate()
        {
            string strError = "";
            int nRet = 0;

            if (this.BiblioChanged == true
                || this.ObjectChanged == true)
            {
                // 警告尚未保存
                DialogResult result = MessageBox.Show(this,
                    "当前有 " + GetCurrentChangedPartName() + " 被修改后尚未保存。若此时装载新内容，现有未保存信息将丢失。\r\n\r\n确实要装载新内容? ",
                    "MarcDetailForm",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question,
                    MessageBoxDefaultButton.Button2);
                if (result == DialogResult.No)
                    return 0;
            }


            dp2SearchForm dp2_searchform = this.GetDp2SearchForm();

            if (dp2_searchform == null)
            {
                strError = "没有连接的或者打开的dp2检索窗，无法装载模板";
                goto ERROR1;
            }

            string strProtocol = "";
            string strPath = "";

            string strServerName = "";
            string strLocalPath = "";

            string strBiblioDbName = "";

            if (String.IsNullOrEmpty(this.SavePath) == false)
            {
                // 分离出各个部分
                nRet = Global.ParsePath(this.SavePath,
                    out strProtocol,
                    out strPath,
                    out strError);
                if (nRet == -1)
                {
                    strError = "解析路径 '" + this.SavePath + "' 字符串过程中发生错误: " + strError;
                    goto ERROR1;
                }

                if (strProtocol == "dp2libraryws")
                {
                    // 解析记录路径。
                    // 记录路径为如下形态 "中文图书/1 @服务器"
                    dp2SearchForm.ParseRecPath(strPath,
                        out strServerName,
                        out strLocalPath);

                    strBiblioDbName = dp2SearchForm.GetDbName(strLocalPath);
                }
                else
                {
                    strProtocol = "dp2libraryws";   // 强行把协议设置为dp2libraryws
                    strPath = "";
                }
            }
            else
            {
                strProtocol = "dp2libraryws";
            }


            /*
            if (this.LinkedSearchForm != null
                && strProtocol != this.LinkedSearchForm.CurrentProtocol)
            {
                strError = "检索窗的协议已经发生改变";
                goto ERROR1;
            }*/

            string strStartPath = "";

            if (String.IsNullOrEmpty(strServerName) == false
                && String.IsNullOrEmpty(strBiblioDbName) == false)
                strStartPath = strServerName + "/" + strBiblioDbName;
            else if (String.IsNullOrEmpty(strServerName) == false)
                strStartPath = strServerName;

            GetDp2ResDlg dlg = new GetDp2ResDlg();

            dlg.Text = "请选择目标数据库";
            dlg.dp2Channels = dp2_searchform.Channels;
            dlg.Servers = this.MainForm.Servers;
            dlg.EnabledIndices = new int[] { dp2ResTree.RESTYPE_DB };
            dlg.Path = strStartPath;

            dlg.ShowDialog(this);

            if (dlg.DialogResult != DialogResult.OK)
                return 0;

            // 将目标路径拆分为两个部分
            nRet = dlg.Path.IndexOf("/");
            if (nRet == -1)
            {
                Debug.Assert(false, "");
                strServerName = dlg.Path;
                strBiblioDbName = "";
                strError = "所选择目标(数据库)路径 '" + dlg.Path + "' 格式不正确";
                goto ERROR1;
            }
            else
            {
                strServerName = dlg.Path.Substring(0, nRet);
                strBiblioDbName = dlg.Path.Substring(nRet + 1);

                // 检查所选数据库的syntax，必须为dc

                string strSyntax = "";
                // 获得一个数据库的数据syntax
                // parameters:
                //      stop    如果!=null，表示使用这个stop，它已经OnStop +=
                //              如果==null，表示会自动使用this.stop，并自动OnStop+=
                // return:
                //      -1  error
                //      0   not found
                //      1   found
                nRet = dp2_searchform.GetDbSyntax(
                    null,
                    strServerName,
                    strBiblioDbName,
                    out strSyntax,
                    out strError);
                if (nRet == -1)
                {
                    strError = "获取书目库 '" + strBiblioDbName + "的数据格式时发生错误: " + strError;
                    goto ERROR1;
                }

                if (strSyntax != "unimarc" 
                    && strSyntax != "usmarc")
                {
                    strError = "所选书目库 '" + strBiblioDbName + "' 不是MARC格式的数据库";
                    goto ERROR1;
                }
            }


            // 然后获得cfgs/template配置文件
            string strCfgFilePath = strBiblioDbName + "/cfgs/template" + "@" + strServerName;

            string strCode = "";
            byte[] baCfgOutputTimestamp = null;
            nRet = dp2_searchform.GetCfgFile(strCfgFilePath,
                out strCode,
                out baCfgOutputTimestamp,
                out strError);
            if (nRet == -1)
                goto ERROR1;

            SelectRecordTemplateDlg tempdlg = new SelectRecordTemplateDlg();
            nRet = tempdlg.Initial(strCode, out strError);
            if (nRet == -1)
            {
                strError = "装载配置文件 '" + strCfgFilePath + "' 发生错误: " + strError;
                goto ERROR1;
            }

            tempdlg.ap = this.MainForm.AppInfo;
            tempdlg.ApCfgTitle = "marcdetailform_selecttemplatedlg";
            tempdlg.ShowDialog(this);

            if (tempdlg.DialogResult != DialogResult.OK)
                return 0;

            string strMarcSyntax = "";
            string strOutMarcSyntax = "";
            string strRecord = "";

            // 从数据记录中获得MARC格式
            nRet = MarcUtil.Xml2Marc(tempdlg.SelectedRecordXml,
                true,
                strMarcSyntax,
                out strOutMarcSyntax,
                out strRecord,
                out strError);
            if (nRet == -1)
            {
                strError = "XML转换到MARC记录时出错: " + strError;
                goto ERROR1;
            }
            this.SavePath = strProtocol + ":" + strBiblioDbName + "/?" + "@" + strServerName;

            this.MarcEditor.ClearMarcDefDom();
            this.MarcEditor.Marc = strRecord;
            this.CurrentTimestamp = baCfgOutputTimestamp;

            /*
            this.MarcEditor.ClearMarcDefDom();
            this.MarcEditor.RefreshNameCaption();
             * */

            this.ObjectChanged = false;
            this.BiblioChanged = false;

            this.LinkedSearchForm = null;  // 切断和原来关联的检索窗的联系。这样就没法前后翻页了
            return 0;
        ERROR1:
            MessageBox.Show(this, strError);
            return -1;
        }
        
        
                // 保存到dp2libraryws模板
        public int SaveToTemplate()
        {
            string strError = "";
            int nRet = 0;

            dp2SearchForm dp2_searchform = this.GetDp2SearchForm();

            if (dp2_searchform == null)
            {
                strError = "没有连接的或者打开的dp2检索窗，无法保存当前内容到模板";
                goto ERROR1;
            }

            string strProtocol = "";
            string strPath = "";

            string strServerName = "";
            string strLocalPath = "";

            string strBiblioDbName = "";

            if (String.IsNullOrEmpty(this.SavePath) == false)
            {
                // 分离出各个部分
                nRet = Global.ParsePath(this.SavePath,
                    out strProtocol,
                    out strPath,
                    out strError);
                if (nRet == -1)
                {
                    strError = "解析路径 '" + this.SavePath + "' 字符串过程中发生错误: " + strError;
                    goto ERROR1;
                }


                if (strProtocol == "dp2libraryws")
                {
                    // 解析记录路径。
                    // 记录路径为如下形态 "中文图书/1 @服务器"
                    dp2SearchForm.ParseRecPath(strPath,
                        out strServerName,
                        out strLocalPath);
                    strBiblioDbName = dp2SearchForm.GetDbName(strLocalPath);
                }
                else
                {
                    strProtocol = "dp2libraryws";   // 强行把协议设置为dp2libraryws
                    strPath = "";
                }
            }


            string strStartPath = "";

            if (String.IsNullOrEmpty(strServerName) == false
                && String.IsNullOrEmpty(strBiblioDbName) == false)
                strStartPath = strServerName + "/" + strBiblioDbName;
            else if (String.IsNullOrEmpty(strServerName) == false)
                strStartPath = strServerName;

            GetDp2ResDlg dlg = new GetDp2ResDlg();

            dlg.Text = "请选择目标数据库";
            dlg.dp2Channels = dp2_searchform.Channels;
            dlg.Servers = this.MainForm.Servers;
            dlg.EnabledIndices = new int[] { dp2ResTree.RESTYPE_DB };
            dlg.Path = strStartPath;

            dlg.ShowDialog(this);

            if (dlg.DialogResult != DialogResult.OK)
                return 0;

            string strSyntax = "";

            nRet = dlg.Path.IndexOf("/");
            if (nRet == -1)
            {
                strServerName = dlg.Path;
                strBiblioDbName = "";
                strError = "未选择目标数据库";
                goto ERROR1;
            }
            else
            {
                strServerName = dlg.Path.Substring(0, nRet);
                strBiblioDbName = dlg.Path.Substring(nRet + 1);

                // 检查所选数据库的syntax，必须为dc

                // 获得一个数据库的数据syntax
                // parameters:
                //      stop    如果!=null，表示使用这个stop，它已经OnStop +=
                //              如果==null，表示会自动使用this.stop，并自动OnStop+=
                // return:
                //      -1  error
                //      0   not found
                //      1   found
                nRet = dp2_searchform.GetDbSyntax(
                    null,
                    strServerName,
                    strBiblioDbName,
                    out strSyntax,
                    out strError);
                if (nRet == -1)
                {
                    strError = "获取书目库 '" + strBiblioDbName + "的数据格式时发生错误: " + strError;
                    goto ERROR1;
                }

                if (strSyntax != "unimarc"
                    && strSyntax != "usmarc")
                {
                    strError = "所选书目库 '" + strBiblioDbName + "' 不是MARC格式的数据库";
                    goto ERROR1;
                }
            }


            // 然后获得cfgs/template配置文件
            string strCfgFilePath = strBiblioDbName + "/cfgs/template" + "@" + strServerName;

            string strCode = "";
            byte[] baCfgOutputTimestamp = null;
            nRet = dp2_searchform.GetCfgFile(strCfgFilePath,
                out strCode,
                out baCfgOutputTimestamp,
                out strError);
            if (nRet == -1)
                goto ERROR1;

            SelectRecordTemplateDlg tempdlg = new SelectRecordTemplateDlg();
            nRet = tempdlg.Initial(strCode, out strError);
            if (nRet == -1)
                goto ERROR1;

            tempdlg.Text = "请选择要修改的模板记录";
            tempdlg.CheckNameExist = false;	// 按OK按钮时不警告"名字不存在",这样允许新建一个模板
            tempdlg.ap = this.MainForm.AppInfo;
            tempdlg.ApCfgTitle = "marcdetailform_selecttemplatedlg";
            tempdlg.ShowDialog(this);

            if (tempdlg.DialogResult != DialogResult.OK)
                return 0;

            // 修改配置文件内容
            if (tempdlg.textBox_name.Text != "")
            {
                string strXml = "";

                nRet = dp2SearchForm.GetBiblioXml(
                    strSyntax,
                    this.MarcEditor.Marc,
                    out strXml,
                    out strError);
                if (nRet == -1)
                    goto ERROR1;

                // 替换或者追加一个记录
                nRet = tempdlg.ReplaceRecord(tempdlg.textBox_name.Text,
                    strXml,
                    out strError);
                if (nRet == -1)
                {
                    goto ERROR1;
                }
            }

            if (tempdlg.Changed == false)	// 没有必要保存回去
                return 0;

            string strOutputXml = tempdlg.OutputXml;

            nRet = dp2_searchform.SaveCfgFile(
                strCfgFilePath,
                strOutputXml,
                baCfgOutputTimestamp,
                out strError);
            if (nRet == -1)
                goto ERROR1;

            MessageBox.Show(this, "修改模板成功");
            return 0;
        ERROR1:
            MessageBox.Show(this, strError);
            return -1;
        }