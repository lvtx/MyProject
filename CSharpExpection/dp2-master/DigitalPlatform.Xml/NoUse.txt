~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        // 编写者：任延华
		public static string GetXml(XmlDocument dom)
		{
			string strResult = "";

			XmlTextWriter xmlTextWriter = null;
			TextWriter s = new StringWriter();
			xmlTextWriter = new XmlTextWriter(s);

			dom.Save(xmlTextWriter);

			xmlTextWriter.Flush();
			strResult = s.ToString();
			xmlTextWriter.Close();
			s.Close();

			return strResult;
		}


~~~~~~~~~~~~~~~
	/// <remarks>
	/// 专门处理dom的类，存放一些静态函数
	/// </remarks>
	public class DpDom
	{

		/// <summary>
		/// 得到括在[]中的号码，转换为数值，并且减1
		/// </summary>
		/// <param name="strText">传入的字符串</param>
		/// <returns>该函数返回的数值，注意比较序号，一定要用数值类型，不要用字符类型，自己原来就错用了字符类型</returns>
		private static int getNo(string strText)
		{
			//首先看"["在该字符串出现的位置
			int nPositionNo = strText.IndexOf("[");

			//如果instr返回值大于，则表示确实出现了，否则没有"]"或其它情况
			if (nPositionNo > 0)
			{
				//截掉strText从"["开始左边的字符，只剩右边
				strText = strText.Substring(nPositionNo+1);

				//然后再从剩下的字符串找"]"出现的位置
				nPositionNo = strText.IndexOf("]");

				//如果找到，则只保存"]"左边的内容，
				if (nPositionNo > 0)
					strText = strText.Substring(0,nPositionNo-1);
				else
					return 0;

				//如果左右截完后，剩下空，则没有序号，函数返回0，跳出函数
				if (strText == "")
					return 0;


				//否则，strPath字符串变成了一个只有数字形式的字符串
				//使用cint()转换成数值，且减1，因为DOM中是从0开始的
				return System.Convert.ToInt32(strText)-1;
			}
			else
			{
				return 0;
			}
		}



		/// <summary>
		/// 通过xpath找节点
		/// </summary>
		/// <param name="nodeRoot">根节点</param>
		/// <param name="strPath">Xpath字符串</param>
		/// <param name="node">out参数，返回找到的节点</param>
		/// <returns>成功执行返回1，参数出错返回-1，没找到返回0</returns>
		public static int Path2Node(XmlNode nodeRoot,string strPath, out XmlNode node)
		{
			node = null;
			if(nodeRoot == null)
			{
				node = null;
				return -1;
			}

			if (strPath == "")
			{
				node = null;
				return -1;
			}


			//定义m_strRight变量,用于存放被截掉的"/#text..."字符串
			string strRight = "";

			//定义m_positionNo变量，存放"/#text"在字符串中出现的位置，以便截取
			int nPositionNo;
			nPositionNo = strPath.IndexOf("/#text");

			//如果m_positionNo>0，则表示确实包含"/#text"，找得是文本节点，先获得右边的部分，然后将传入的strPath中截掉从"/#text"开始的部分，从而strPath变成父亲的路径
			if (nPositionNo >= 0)
			{
				strRight = strPath.Substring(nPositionNo+1);
				strPath = strPath.Substring(1,nPositionNo-1);
			}

			/*
						XmlNamespaceManager nsmgr = new XmlNamespaceManager(nodeRoot.OwnerDocument.NameTable);    //这里改命令空间
						nsmgr.AddNamespace("rdf", @"http://www.w3.org/1999/02/22-rdf-syntax-ns#");
						nsmgr.AddNamespace("rdfs", @"http://www.w3.org/2000/01/rdf-schema#");
						nsmgr.AddNamespace("dc", @"http://purl.org/dc/elements/1.1/");
						nsmgr.AddNamespace("dcq", @"http://purl.org/dc/terms/");
						nsmgr.AddNamespace("dp", DpNs.dprms);
			
						node = nodeRoot.SelectSingleNode(strPath,nsmgr);
			*/
			node = nodeRoot.SelectSingleNode(strPath);

			
			if (node == null)
			{
				node = null;
				return -1;
			}


			//如果strRight不为空，则当前找到是父亲节点，还需要继续找到指定的文本节点
			if (strRight != "")
			{

				//得到文本节点的序号
				int nIndex;
				nIndex = getNo(strRight);	
			
		
				//定义一个i，作文本节点个数的增量
				int i=0;
		
				//循环父亲节点的儿子
				foreach(XmlNode eachNode in node.ChildNodes)
				{
					//如果名字为#text,且序号等于要找的序号，则该节点就是要找到节点，函数返回值为1，跳出函数	
					if (eachNode.Name == "#text")
					{
						if (i == nIndex)
						{
							node = eachNode;
							return 1;
						}
						i += 1;
					}
				}
				
				node = null;
				return 0;
			}

			return 1;


		}






		/// <summary>
		/// 由node得到path,注意对于有返回值参数的函数，记住在函数开始处先将返回值参数清空
		/// </summary>
		/// <param name="nodeRoot">传入的根节点</param>
		/// <param name="node">给定的节点</param>
		/// <param name="strPath">out参数,得到node相对于root_nood的xpath路径</param>
		/// <returns>成功执行返回1，否则返回0</returns>
		public static int Node2Path(XmlNode nodeRoot,XmlNode node, out string strPath)
		{
			strPath = "";

			if (nodeRoot == null)
			{
				Exception ex = new Exception("Node2Path里，nodeRoot为null");
				throw(ex);
			}

			if (node == null)
			{
				Exception ex = new Exception("Node2Path里，node为null");
				throw(ex);
			}


			XmlNode nodeMyself;
			XmlNode nodeTemp;

			int nIndex;


			//当为属性节点时，加了属性path字符串
			string strAttr = "";

			if (node.NodeType == XmlNodeType.Attribute)
			{
				strAttr = "/@" + node.Name;
				
				XmlAttribute AttrNode = (XmlAttribute)node;
				node = AttrNode.OwnerElement;
			}

			while(node != null)
			{
				if (Equals(node,nodeRoot) == true)
					break;

				nodeMyself = node;
				node = node.ParentNode;

				if (node == null)
					break;
				
				nodeTemp = node.FirstChild;
				nIndex = 1;

				while(nodeTemp != null)
				{
					if (Equals(nodeTemp,nodeMyself))
					{
						if (strPath != "")
							strPath = "/" + strPath;

						strPath = nodeMyself.Name + "[" + System.Convert.ToString(nIndex) + "]" + strPath;
						
						break;
					}

					if (nodeTemp.Name == nodeMyself.Name)
						nIndex += 1;
					
					nodeTemp = nodeTemp.NextSibling;

				}

			}

			strPath = strPath + strAttr;

			if (strPath == "")
				return 0;
			else
				return 1;
	
		}



	} // DpDom类结束
	