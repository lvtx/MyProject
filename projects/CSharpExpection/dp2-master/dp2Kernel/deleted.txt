        void ThreadMain()
        {
            // Debug.Assert(false, "");
            CloseHosts();

            // 2017/2/9
            string strError = "";
            // 检查不同实例的 dp2kernel 中所用的 SQL 数据库名是否发生了重复和冲突
            // return:
            //      -1  检查过程出错
            //      0   没有冲突
            //      1   发生了冲突。报错信息在 strError 中
            int nRet = CheckSqlDbNames(out strError);
            if (nRet != 0)
            {
                this.Log.WriteEntry("dp2Kernel 实例启动阶段发生严重错误: " + strError, EventLogEntryType.Error);
                return;
            }

            for (int i = 0; ; i++)
            {
                string strInstanceName = "";
                string strDataDir = "";
                string strCertSN = "";
                string[] existing_urls = null;
                bool bRet = GetInstanceInfo("dp2Kernel",
                    i,
                    out strInstanceName,
                    out strDataDir,
                    out existing_urls,
                    out strCertSN);
                if (bRet == false)
                    break;

#if NO
                string strWsHostUrl = FindUrl("http", existing_urls);

                string strNamedpipeHostUrl = FindUrl("net.pipe", existing_urls);
                string strNetTcpHostUrl = FindUrl("net.tcp", existing_urls);
#endif

                ServiceHost host = new ServiceHost(typeof(KernelService));
                this.m_hosts.Add(host);

                HostInfo info = new HostInfo();
                info.DataDir = strDataDir;
                info.InstanceName = strInstanceName;
                host.Extensions.Add(info);
                /// 

                bool bHasWsHttp = false;
                // 绑定协议
                foreach (string url in existing_urls)
                {
                    if (string.IsNullOrEmpty(url) == true)
                        continue;

                    Uri uri = null;
                    try
                    {
                        uri = new Uri(url);
                    }
                    catch (Exception ex)
                    {
                        this.Log.WriteEntry("dp2Kernel OnStart() 警告：发现不正确的协议URL '" + url + "' (异常信息: " + ex.Message + ")。该URL已被放弃绑定。",
    EventLogEntryType.Error);
                        continue;
                    }

                    if (uri.Scheme.ToLower() == "http")
                    {
                        host.AddServiceEndpoint(typeof(IKernelService),
    CreateWsHttpBinding1(),
    url);
                        bHasWsHttp = true;
                    }
                    else if (uri.Scheme.ToLower() == "net.pipe")
                    {
                        host.AddServiceEndpoint(typeof(IKernelService),
                CreateNamedpipeBinding0(),
                url);
                    }
                    else if (uri.Scheme.ToLower() == "net.tcp")
                    {
                        host.AddServiceEndpoint(typeof(IKernelService),
            CreateNetTcpBinding0(),
            url);
                    }
                    else
                    {
                        // 警告不能支持的协议
                        this.Log.WriteEntry("dp2Kernel OnStart() 警告：发现不能支持的协议类型 '" + url + "'",
                            EventLogEntryType.Information);
                    }
                }

#if NO
                if (String.IsNullOrEmpty(strWsHostUrl) == false)
                {
                    host.AddServiceEndpoint(typeof(IKernelService),
                        CreateWsHttpBinding1(),
                        strWsHostUrl);
                }

                if (String.IsNullOrEmpty(strNamedpipeHostUrl) == false)
                {
                    host.AddServiceEndpoint(typeof(IKernelService),
            CreateNamedpipeBinding0(),
            strNamedpipeHostUrl);
                }
                if (String.IsNullOrEmpty(strNetTcpHostUrl) == false)
                {
                    host.AddServiceEndpoint(typeof(IKernelService),
        CreateNetTcpBinding0(),
        strNetTcpHostUrl);
                }
#endif

                // 如果具有ws1/ws2 binding，才启用证书
                if (bHasWsHttp == true/*String.IsNullOrEmpty(strWsHostUrl) == false*/)
                {
                    try
                    {
                        // host.Credentials.ServiceCertificate.Certificate = GetCertificate(strCertSN);
                        X509Certificate2 cert = GetCertificate(strCertSN,
                            out strError);
                        if (cert == null)
                            this.Log.WriteEntry("dp2Kernel OnStart() 准备证书 时发生错误: " + strError,
EventLogEntryType.Error);
                        else
                            host.Credentials.ServiceCertificate.Certificate = cert;

                    }
                    catch (Exception ex)
                    {
                        this.Log.WriteEntry("dp2Kernel OnStart() 获取证书时发生错误: " + ex.Message,
        EventLogEntryType.Error);
                        return;
                    }
                }

                /*
                 * 
                 * ws2 才启用
                m_host.Credentials.UserNameAuthentication.UserNamePasswordValidationMode = System.ServiceModel.Security.UserNamePasswordValidationMode.Custom;
                m_host.Credentials.UserNameAuthentication.CustomUserNamePasswordValidator = new MyUserNamePasswordValidator();
                */

                /*
                m_host.Credentials.ServiceCertificate.SetCertificate(
                    StoreLocation.CurrentUser,
                    StoreName.My,
                    X509FindType.FindBySubjectName,
                    "DigitalPlatform");
                 * */

                /*
                m_host.Credentials.ClientCertificate.Authentication.CertificateValidationMode = 
                    System.ServiceModel.Security.X509CertificateValidationMode.Custom;
                m_host.Credentials.ClientCertificate.Authentication.CustomCertificateValidator =
        new MyValidator();
                 * */

                // 只有第一个host才有metadata能力
                if (i == 0 && host.Description.Behaviors.Find<ServiceMetadataBehavior>() == null)
                {
                    string strWsHostUrl = FindUrl("http", existing_urls);

                    string strMetadataUrl = strWsHostUrl;
                    if (String.IsNullOrEmpty(strMetadataUrl) == true)
                        strMetadataUrl = "http://localhost:8001/dp2kernel/";
                    if (strMetadataUrl[strMetadataUrl.Length - 1] != '/')
                        strMetadataUrl += "/";
                    strMetadataUrl += "metadata";

                    ServiceMetadataBehavior behavior = new ServiceMetadataBehavior();
                    behavior.HttpGetEnabled = true;
                    behavior.HttpGetUrl = new Uri(strMetadataUrl);
                    host.Description.Behaviors.Add(behavior);
                }

                if (host.Description.Behaviors.Find<ServiceThrottlingBehavior>() == null)
                {
                    ServiceThrottlingBehavior behavior = new ServiceThrottlingBehavior();
                    behavior.MaxConcurrentCalls = 50;
                    behavior.MaxConcurrentInstances = 1000;
                    behavior.MaxConcurrentSessions = 1000;
                    host.Description.Behaviors.Add(behavior);
                }

                // IncludeExceptionDetailInFaults
                ServiceDebugBehavior debug_behavior = host.Description.Behaviors.Find<ServiceDebugBehavior>();
                if (debug_behavior == null)
                {
                    host.Description.Behaviors.Add(new ServiceDebugBehavior() { IncludeExceptionDetailInFaults = true });
                }
                else
                {
                    if (debug_behavior.IncludeExceptionDetailInFaults == false)
                        debug_behavior.IncludeExceptionDetailInFaults = true;
                }

                host.Opening += new EventHandler(host_Opening);
                host.Closing += new EventHandler(m_host_Closing);

                try
                {
                    host.Open();
                }
                catch (Exception ex)
                {
                    // 让调试器能感觉到
                    if (this.m_bConsoleRun == true)
                        throw ex;

                    this.Log.WriteEntry("dp2Kernel OnStart() host.Open() 时发生错误: instancename=[" + strInstanceName + "]:" + ex.Message,
    EventLogEntryType.Error);
                    return;
                }
            }
            this.Log.WriteEntry("dp2Kernel OnStart() end",
EventLogEntryType.Information);

            this.m_thread = null;
        }
