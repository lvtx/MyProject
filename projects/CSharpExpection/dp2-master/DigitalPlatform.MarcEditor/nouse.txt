~~~~~~~~~~~~~~~~~~~~~

		public override Font Font
		{
			get
			{
				return this.DefaultTextFont;
			}
			set
			{
				this.SetFont(value);
			}
		}

		public void SetFont(Font font)
		{
			this.DefaultTextFont = font;
			this.Invalidate();
		}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		// 删除字段
		private void DeleteFieldWithDlg(object sender,
			System.EventArgs e)
		{ 
			if (this.CurField == null)
			{
				Debug.Assert (false,"在'删除'时，CurField不可能为null");
				return;
			}
			string strText = "确实要删除'" 
				+ this.CurField.m_strName 
				+ "'字段吗?";

			DialogResult result = MessageBox.Show(this,
				strText,
				"MarcEditor",
				MessageBoxButtons.YesNo,
				MessageBoxIcon.Question,
				MessageBoxDefaultButton.Button2);

			if (result == DialogResult.No) 
				return;

			// 可以考虑编写RemoveFieldInternal()
			this.record.RemoveFieldAt(this.CurFieldIndex);

		}

~~~~~~~~~~~~~~~~~~~~~		
		// 当某一行设为当前活动的行
		// parameter:
		//		nLine	行号
		// return:
		//		void
		private void ActivateEditLine(int nField)
		{
			if (nField < 0 || nField >= this.record.Count)
				return;

			CurFieldIndex = nField;
		}
		
		~~~~~~~~~~~~~~~~~~~~~~~~~~

		// 得到
		public Rectangle GetItemBounds(int nLine,
			int nCount,
			ItemBoundsPortion portion)
		{
			Rectangle r = new Rectangle(0,0,0,0);
			if (portion == ItemBoundsPortion.Entire 
				|| portion == ItemBoundsPortion.EntireAndBottom) 
			{
				// 兼管左边公共竖线
				r.X =  this.LeftBlank;
				r.Y =  this.TopBlank + lines.GridLineHeight + lines.GetLinesHeight(0, nLine);
				r.Width = this.LeftBlank + lines.NameWidth + lines.ValueWidth + lines.GridLineWidth;
				r.Height = lines.GetLinesHeight(nLine, nCount); // nLineHeight * nCount;

				if (portion == ItemBoundsPortion.EntireAndBottom) 
				{
					r.Height += this.BottomBlank;
				}

				if (nLine == 0) 
				{
					r.Height += lines.GridLineHeight;
					r.Y -= lines.GridLineHeight;
				}

				return r;
			}

			if (portion == ItemBoundsPortion.Name) 
			{
				// 兼管左边公共竖线
				r.X = this.LeftBlank;
				r.Y =  this.TopBlank + lines.GridLineHeight + lines.GetLinesHeight(0, nLine);	//nLine * nLineHeight;
				r.Width = lines.NameWidth + lines.GridLineWidth;
				r.Height = lines.GetLinesHeight(nLine, nCount); // nLineHeight * nCount;


				if (nLine == 0) 
				{
					r.Height += lines.GridLineHeight;
					r.Y -= lines.GridLineHeight;
				}
				return r;
			}

			if (portion == ItemBoundsPortion.Value) 
			{
				// *不*管左边公共竖线
				r.X = this.LeftBlank + lines.GridLineWidth + lines.NameWidth;
				r.Y =  this.TopBlank + lines.GridLineHeight + lines.GetLinesHeight(0, nLine);	//nLine * nLineHeight;
				r.Width = lines.ValueWidth;
				r.Height = lines.GetLinesHeight(nLine, nCount); // nLineHeight * nCount;


				if (nLine == 0) 
				{
					r.Height += lines.GridLineHeight;
					r.Y -= lines.GridLineHeight;
				}

				return r;
			}

			throw(new Exception("无效的ItemBoundsPortion参数"));
		}

		
		
