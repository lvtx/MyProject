
OpacApplication.cs

        // 保存
        // 其实,进入内存属性的XML片断,可以在this.OpacCfgDom中删除.最后直接合并保存这个dom即可.
        // parameters:
        //      bFlush  是否为刷新情形？如果是，则不写入错误日志
        public void Save(string strFileName,
            bool bFlush)
        {
            this.m_lock.AcquireWriterLock(m_nLockTimeout);
            try
            {

                if (this.m_bChanged == false)
                {
                    /*
                    // 调试用
                    OpacApplication.WriteWindowsLog("没有进行Save()，因为m_bChanged==false", EventLogEntryType.Information);
                     * */

                    return;
                }


                // 关闭文件跟踪
                bool bOldState = false;
                if (this.watcher != null)
                {
                    bOldState = watcher.EnableRaisingEvents;
                    watcher.EnableRaisingEvents = false;
                }


                if (strFileName == null)
                    strFileName = m_strFileName;

                if (strFileName == null)
                {
                    throw (new Exception("m_strFileName为空"));
                }

                string strBackupFilename = strFileName + ".bak";

                if (FileUtil.IsFileExsitAndNotNull(strFileName) == true)
                {
                    this.WriteErrorLog("备份 " + strFileName + " 到 " + strBackupFilename);
                    File.Copy(strFileName, strBackupFilename, true);
                }

                if (bFlush == false)
                {
                    this.WriteErrorLog("开始 从内存写入 " + strFileName);
                }

                XmlTextWriter writer = new XmlTextWriter(strFileName,
                    Encoding.UTF8);

                // 缩进
                writer.Formatting = Formatting.Indented;
                writer.Indentation = 4;

                writer.WriteStartDocument();

                writer.WriteStartElement("root");
                if (this.DebugMode == true)
                    writer.WriteAttributeString("debugMode", "true");

                // <version>
                {
                    XmlNode node = this.OpacCfgDom.DocumentElement.SelectSingleNode("version");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }
                }

                // 内核参数
                // 元素<libraryServer>
                // 属性url/username/password
                writer.WriteStartElement("libraryServer");
                writer.WriteAttributeString("url", this.WsUrl);
                writer.WriteAttributeString("username", this.ManagerUserName);
                writer.WriteAttributeString("password",
                    Cryptography.Encrypt(this.ManagerPassword, EncryptKey)
                    );
                if (string.IsNullOrEmpty(this.ReportDir) == false)
                    writer.WriteAttributeString("reportDir", this.ReportDir);
                writer.WriteEndElement();


                // 图书馆业务服务器
                // 元素<opacServer>
                // 属性url
                writer.WriteStartElement("opacServer");
                writer.WriteAttributeString("url", this.OpacServerUrl);
                writer.WriteEndElement();

                // mongoDB 服务器
                // 元素<mongoDB>
                // 属性connectionString
                writer.WriteStartElement("mongoDB");
                writer.WriteAttributeString("connectionString", this.MongoDbConnStr);
                writer.WriteEndElement();


                // 没有进入内存属性的其他XML片断
                if (this.OpacCfgDom != null)
                {
                    // 2009/9/23 new add
                    // <yczb>
                    /*
	<yczb>
		<sso appID='CBPM_Library' validateWsUrl='http://portal.cbpmc.cbpm/AuthCenter/services/validate' />
	</yczb>
                     * */
                    XmlNode node = this.OpacCfgDom.DocumentElement.SelectSingleNode("//yczb");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }

                    // <monitors>
                    node = this.OpacCfgDom.DocumentElement.SelectSingleNode("monitors");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }


                    // TODO: 暂时没有任何地方用到这个信息
                    // <libraryInfo>
                    // 注: <libraryName>元素在此里面
                    node = this.OpacCfgDom.DocumentElement.SelectSingleNode("libraryInfo");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }

                    // <biblioDbGroup>
                    node = this.OpacCfgDom.DocumentElement.SelectSingleNode("biblioDbGroup");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }

                    // <arrived>
                    node = this.OpacCfgDom.DocumentElement.SelectSingleNode("arrived");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }

                    // <browseformats>
                    node = this.OpacCfgDom.DocumentElement.SelectSingleNode("browseformats");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }

                    // <virtualDatabases>
                    node = this.OpacCfgDom.DocumentElement.SelectSingleNode("//virtualDatabases");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }

                    // <externalSsoInterface>
                    node = this.OpacCfgDom.DocumentElement.SelectSingleNode("externalSsoInterface");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }

                    // chat room
                    string strError = "";
                    string strXml = "";
                    this.ChatRooms.GetDef(out strXml, out strError);
                    if (string.IsNullOrEmpty(strXml) == false)
                        writer.WriteRaw("\r\n" + strXml + "\r\n");

                    // 2012/5/23
                    // <dp2sso>
                    /*
	<dp2sso>
		<domain name='dp2bbs' loginUrl='http://dp2003.com/dp2bbs/login.aspx?redirect=%redirect%'  logoutUrl='' />
	</dp2sso>
                     * */
                    node = this.OpacCfgDom.DocumentElement.SelectSingleNode("//dp2sso");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }


                    // <searchLog>
                    node = this.OpacCfgDom.DocumentElement.SelectSingleNode("searchLog");
                    if (node != null)
                    {
                        node.WriteTo(writer);
                    }
                }

                writer.WriteEndElement();

                writer.WriteEndDocument();

                writer.Close();

                if (bFlush == false)
                    this.WriteErrorLog("完成 从内存写入 " + strFileName);

                this.m_bChanged = false;

                if (this.watcher != null)
                {
                    watcher.EnableRaisingEvents = bOldState;
                }

            }
            finally
            {
                this.m_lock.ReleaseWriterLock();
            }

        }

		从上面代码中删除了 yczb 等配置信息的注释

		~~~

		        // 根据源代码文件获得Xml到Html转换的Assembly对象
        public int GetXml2HtmlAssembly(
            string strCodeFileName,
            string strRefFileName,
            string strBinDir,
            out Assembly assembly,
            out string strError)
        {
            strError = "";
            assembly = null;
            int nRet = 0;

            assembly = this.AssemblyCache.FindObject(strCodeFileName.ToLower());
            // 优化
            if (assembly != null)
                return 1;

            string strCode = "";    // c#代码

            // 装入code?
            try
            {
                using (StreamReader sr = new StreamReader(strCodeFileName, true))
                {
                    strCode = sr.ReadToEnd();
                }
            }
            catch (Exception ex)
            {
                strError = ExceptionUtil.GetAutoText(ex);
                return -1;
            }

            string[] saAddRef1 = {
                                         strBinDir + "\\digitalplatform.marcdom.dll",
                                         strBinDir + "\\digitalplatform.marckernel.dll",
										 // strBinDir + "\\digitalplatform.rms.client.dll",
										 strBinDir + "\\digitalplatform.OPAC.Server.dll",
                                         strBinDir + "\\digitalplatform.dll",
                                         strBinDir + "\\digitalplatform.Text.dll",
                                         strBinDir + "\\digitalplatform.IO.dll",
                                         strBinDir + "\\digitalplatform.Xml.dll",
										 // strBinDir + "\\dp2rms.exe",
										 };

            string strWarning = "";
            string strLibPaths = "";

            string[] saRef2 = null;

            if (String.IsNullOrEmpty(strRefFileName) == false)
            {
                // 从references.xml文件中得到refs字符串数组
                // return:
                //		-1	error
                //		0	not found file
                //		1	found file
                nRet = ScriptManager.GetRefs(strRefFileName,
                    out saRef2,
                    out strError);
                if (nRet == -1)
                {
                    strError = "ref文件 '" + strRefFileName + "' 出错: " + strError;
                    return -1;
                }
            }

            string[] saRef = null;
            if (saRef2 != null)
            {
                saRef = new string[saRef2.Length + saAddRef1.Length];
                Array.Copy(saRef2, saRef, saRef2.Length);
                Array.Copy(saAddRef1, 0, saRef, saRef2.Length, saAddRef1.Length);
            }
            else
                saRef = saAddRef1;

            // 创建Script的Assembly
            // 本函数内对saRef不再进行宏替换
            nRet = ScriptManager.CreateAssembly_1(strCode,
                saRef,
                strLibPaths,
                out assembly,
                out strError,
                out strWarning);

            if (nRet == -2)
                goto ERROR1;
            if (nRet == -1)
            {
                strError = "文件 '" + strCodeFileName + "' 编译出错: " + strError;
                if (string.IsNullOrEmpty(strWarning) == true)
                    goto ERROR1;
            }

#if NO
            // 加入hashtable
            this.m_lockXml2HtmlAssemblyTable.AcquireWriterLock(m_nLockTimeout);
            try
            {
                this.Xml2HtmlAssemblyTable[strCodeFileName.ToLower()] = assembly;
            }
            finally
            {
                this.m_lockXml2HtmlAssemblyTable.ReleaseWriterLock();
            }
#endif
            this.AssemblyCache.SetObject(strCodeFileName.ToLower(), assembly);
            return 0;
        ERROR1:
            return -1;
        }
