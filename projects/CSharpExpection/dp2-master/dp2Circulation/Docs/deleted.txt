

test
test
        // 
        /// <summary>
        /// 打印预览(根据册记录)
        /// </summary>
        /// <param name="bDisplayPrinterDialog">是否显示打印机设置对话框</param>
        /// <returns>-1: 出错; 0: 成功</returns>
        public int PrintPreviewFromItemRecords(bool bDisplayPrinterDialog = false)
        {
            string strError = "";

            // 需要先创建标签文件
            string strLabelFilename = this.MainForm.NewTempFilename(
                "temp_labelfiles",
                "~label_");
            string strErrorFilename = this.MainForm.NewTempFilename(
                "temp_labelfiles",
                "~error_");

            this.MainForm.OperHistory.AppendHtml("<div class='debug begin'>" + HttpUtility.HtmlEncode(DateTime.Now.ToLongTimeString()) + " 开始执行打印预览</div>");

            try
            {
                this.textBox_errorInfo.Text = "";

                int nRet = BuildLabelFile(
                    strLabelFilename,
                    strErrorFilename,
                    out strError);
                if (nRet == -1)
                    goto ERROR1;

                FileInfo fi = new FileInfo(strErrorFilename);
                if (fi.Exists && fi.Length > 0)
                {
                    string strContent = "";
                    nRet = Global.ReadTextFileContent(strErrorFilename,
                        out strContent,
                        out strError);
                    if (nRet == -1)
                        return -1;
                    this.textBox_errorInfo.Text = strContent;

                    DialogResult result = MessageBox.Show(this,
                        "创建标签文件的过程中有报错信息，请问是否继续进行打印预览?\r\n\r\n(Yes 继续打印预览；No 不进行打印预览)",
                        "LabelPrintForm",
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Question,
                        MessageBoxDefaultButton.Button2);
                    if (result == DialogResult.No)
                    {
                        this.textBox_errorInfo.Focus();
                        return 0;
                    }

                }

                nRet = this.BeginPrint(
                    strLabelFilename,
                    this.textBox_labelDefFilename.Text,
                    out strError);
                if (nRet == -1)
                    goto ERROR1;

                this.document.PreviewMode = true;

                this.EnableControls(false);
                try
                {
                    bool bCustomPaper = false;

                    printDialog1.Document = this.document;

                    if (this.PrinterInfo != null)
                    {

                        // this.OutputText("恢复以前的打印机名: " + this.PrinterInfo.PrinterName + ", 纸张名: " + this.PrinterInfo.PaperName);

#if NO
                        string strPrinterName = document.PrinterSettings.PrinterName;
                        if (string.IsNullOrEmpty(this.PrinterInfo.PrinterName) == false
                            && this.PrinterInfo.PrinterName != strPrinterName)
                        {
                            this.document.PrinterSettings.PrinterName = this.PrinterInfo.PrinterName;
                            if (this.document.PrinterSettings.IsValid == false)
                            {
                                this.document.PrinterSettings.PrinterName = strPrinterName;
                                MessageBox.Show(this, "打印机 " + this.PrinterInfo.PrinterName + " 当前不可用，请重新选定打印机");
                                this.PrinterInfo.PrinterName = "";
                                bDisplayPrinterDialog = true;
                            }
                        }
#endif
                        // 按照存储的打印机名选定打印机
                        nRet = SelectPrinterByName(this.document,
                            this.PrinterInfo.PrinterName,
                            out  strError);
                        if (nRet == 1)
                        {
                            MessageBox.Show(this, "打印机 " + this.PrinterInfo.PrinterName + " 当前不可用，请重新选定打印机");
                            this.PrinterInfo.PrinterName = "";
                            bDisplayPrinterDialog = true;
                        }

#if NO
                        PaperSize old_papersize = document.DefaultPageSettings.PaperSize;
                        if (string.IsNullOrEmpty(this.PrinterInfo.PaperName) == false
                            && this.PrinterInfo.PaperName != document.DefaultPageSettings.PaperSize.PaperName)
                        {
                            PaperSize found = null;
                            foreach (PaperSize ps in this.document.PrinterSettings.PaperSizes)
                            {
                                if (ps.PaperName.Equals(this.PrinterInfo.PaperName))
                                {
                                    found = ps;
                                    break;
                                }
                            }

                            if (found != null)
                                this.document.DefaultPageSettings.PaperSize = found;
                            else
                            {
                                MessageBox.Show(this, "打印机 " + this.PrinterInfo.PrinterName + " 的纸张类型 " + this.PrinterInfo.PaperName + " 当前不可用，请重新选定纸张");
                                document.DefaultPageSettings.PaperSize = old_papersize;
                                this.PrinterInfo.PaperName = "";
                                bDisplayPrinterDialog = true;
                            }
                        }
#endif

                        // 需要自定义纸张
                        if (string.IsNullOrEmpty(this.label_param.DefaultPrinter) == true
                            && this.label_param.PageWidth > 0
                            && this.label_param.PageHeight > 0)
                        {
                            bCustomPaper = true;

                            PaperSize paper_size = new PaperSize("custom", label_param.PageWidth, label_param.PageHeight);
                            this.document.DefaultPageSettings.PaperSize = paper_size;
                        }


                            if (bDisplayPrinterDialog == false && bCustomPaper == false)
                            {
                                nRet = SelectPaperByName(this.document,
                                    this.PrinterInfo.PaperName,
                                    false,
                                    out strError);
                                if (nRet == 1)
                                {
                                    MessageBox.Show(this, "打印机 " + this.PrinterInfo.PrinterName + " 的纸张类型 " + this.PrinterInfo.PaperName + " 当前不可用，请重新选定纸张");
                                    this.PrinterInfo.PaperName = "";
                                    bDisplayPrinterDialog = true;
                                }
                            }

                        // 只要有一个打印机事项没有确定，就要出现打印机对话框
                            if (bCustomPaper == false)
                            {
                                if (string.IsNullOrEmpty(this.PrinterInfo.PrinterName) == true
                                    || string.IsNullOrEmpty(this.PrinterInfo.PaperName) == true)
                                    bDisplayPrinterDialog = true;
                            }
                    }
                    else
                    {
                        // 没有首选配置的情况下要出现打印对话框
                        bDisplayPrinterDialog = true;
                    }

                    DialogResult result = DialogResult.OK;
                    if (bDisplayPrinterDialog == true)
                    {
                        result = printDialog1.ShowDialog();

                        if (result == DialogResult.OK)
                        {
                            if (bCustomPaper == true)
                            {
                                PaperSize paper_size = new PaperSize("custom", label_param.PageWidth, label_param.PageHeight);
                                this.document.DefaultPageSettings.PaperSize = paper_size;
                            }

                            // 记忆打印参数
                            if (this.PrinterInfo == null)
                                this.PrinterInfo = new PrinterInfo();

                            // this.OutputText("打印机对话框返回后，新选定的打印机名: " + document.PrinterSettings.PrinterName + ", 纸张名: " + document.DefaultPageSettings.PaperSize.PaperName);

                            this.PrinterInfo.PrinterName = document.PrinterSettings.PrinterName;
                            // this.PrinterInfo.PaperName = document.PrinterSettings.DefaultPageSettings.PaperSize.PaperName;  // document.DefaultPageSettings.PaperSize.PaperName
                            this.PrinterInfo.PaperName = PrintUtil.GetPaperSizeString(document.DefaultPageSettings.PaperSize);

                            if (bCustomPaper == false)
                            {
                                // 2014/3/27
                                // this.document.DefaultPageSettings = document.PrinterSettings.DefaultPageSettings;
                                nRet = SelectPaperByName(this.document,
        this.PrinterInfo.PaperName,
        true,
        out strError);
                                if (nRet == 1)
                                {
                                    // MessageBox.Show(this, "打印机 " + this.PrinterInfo.PrinterName + " 的纸张类型 " + this.PrinterInfo.PaperName + " 当前不可用，请重新选定纸张");
                                    //this.PrinterInfo.PaperName = "";
                                    //bDisplayPrinterDialog = true;

                                    this.OutputText("打印机对话框返回后，经过检查，纸张 " + this.PrinterInfo.PaperName + " 不在打印机 " + this.PrinterInfo.PrinterName + " 的可用纸张列表中。出现对话框让用户重新选择纸张");


                                    SelectPaperDialog paper_dialog = new SelectPaperDialog();
                                    MainForm.SetControlFont(paper_dialog, this.Font, false);
                                    paper_dialog.Comment = "纸张 " + this.PrinterInfo.PaperName + " 不在打印机 " + this.PrinterInfo.PrinterName + " 的可用纸张列表中。\r\n请重新选定纸张";
                                    paper_dialog.Document = this.document;
                                    this.MainForm.AppInfo.LinkFormState(paper_dialog, "paper_dialog_state");
                                    paper_dialog.ShowDialog(this);
                                    this.MainForm.AppInfo.UnlinkFormState(paper_dialog);

                                    if (paper_dialog.DialogResult == System.Windows.Forms.DialogResult.Cancel)
                                        return 0;

                                    this.OutputText("对话框中新选定的纸张名: " + document.DefaultPageSettings.PaperSize.PaperName);
                                }
                            }

                            this.PrinterInfo.PaperName = PrintUtil.GetPaperSizeString(document.DefaultPageSettings.PaperSize);

                            SetTitle();
                        }
                        else
                            return 0;
                    }

                    TracePrinterInfo();

                    printPreviewDialog1.Document = this.document;

                    this.MainForm.AppInfo.LinkFormState(printPreviewDialog1, "labelprintform_printpreviewdialog_state");
                    printPreviewDialog1.ShowDialog(this);
                    this.MainForm.AppInfo.UnlinkFormState(printPreviewDialog1);
                }
                finally
                {
                    this.EnableControls(true);

                    this.EndPrint();    // 关闭标签文件。后面才能删除
                }
            }
            finally
            {
                if (String.IsNullOrEmpty(strLabelFilename) == false)
                {
                    try
                    {
                        File.Delete(strLabelFilename);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(this, "删除临时标签文件 '"+strLabelFilename+"' 时出错: " + ex.Message);
                    }
                }
                if (String.IsNullOrEmpty(strErrorFilename) == false)
                {
                    try
                    {
                        File.Delete(strErrorFilename);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(this, "删除临时错误文件 '" + strErrorFilename + "' 时出错: " + ex.Message);
                    }
                }

                this.MainForm.OperHistory.AppendHtml("<div class='debug end'>" + HttpUtility.HtmlEncode(DateTime.Now.ToLongTimeString()) + " 结束执行打印预览</div>");
            }

            return 0;
        ERROR1:
            MessageBox.Show(this, strError);
            return -1;
        }


		        // 
        /// <summary>
        /// 打印(根据标签文件)
        /// </summary>
        /// <param name="bDisplayPrinterDialog">是否显示打印机设置对话框</param>
        /// <returns>-1: 出错; 0: 成功</returns>
        public int PrintFromLabelFile(bool bDisplayPrinterDialog = true)
        {
            string strError = "";
            int nRet = this.BeginPrint(
                this.textBox_labelFile_labelFilename.Text,
                this.textBox_labelDefFilename.Text,
                out strError);
            if (nRet == -1)
                goto ERROR1;

            this.document.PreviewMode = false;

            this.MainForm.OperHistory.AppendHtml("<div class='debug begin'>" + HttpUtility.HtmlEncode(DateTime.Now.ToLongTimeString()) + " 开始执行打印</div>");
            this.EnableControls(false);
            Cursor oldCursor = this.Cursor;
            this.Cursor = Cursors.WaitCursor;
            try
            {

                // Allow the user to choose the page range he or she would
                // like to print.
                printDialog1.AllowSomePages = true;

                // Show the help button.
                printDialog1.ShowHelp = true;

                // Set the Document property to the PrintDocument for 
                // which the PrintPage Event has been handled. To display the
                // dialog, either this property or the PrinterSettings property 
                // must be set 
                printDialog1.Document = this.document;

                if (this.PrinterInfo != null)
                {
                    string strPrinterName = document.PrinterSettings.PrinterName;
                    if (string.IsNullOrEmpty(this.PrinterInfo.PrinterName) == false
                        && this.PrinterInfo.PrinterName != strPrinterName)
                    {
                        this.document.PrinterSettings.PrinterName = this.PrinterInfo.PrinterName;
                        if (this.document.PrinterSettings.IsValid == false)
                        {
                            MessageBox.Show(this, "打印机 " + this.PrinterInfo.PrinterName + " 当前不可用，请重新选定打印机");
                            this.document.PrinterSettings.PrinterName = strPrinterName;
                            this.PrinterInfo.PrinterName = "";
                            bDisplayPrinterDialog = true;
                        }
                    }

                    PaperSize old_papersize = document.DefaultPageSettings.PaperSize;
                    if (string.IsNullOrEmpty(this.PrinterInfo.PaperName) == false
                        && this.PrinterInfo.PaperName != document.DefaultPageSettings.PaperSize.PaperName)
                    {
                        PaperSize found = null;
                        foreach (PaperSize ps in this.document.PrinterSettings.PaperSizes)
                        {
                            if (ps.PaperName.Equals(this.PrinterInfo.PaperName))
                            {
                                found = ps;
                                break;
                            }
                        }

                        if (found != null)
                            this.document.DefaultPageSettings.PaperSize = found;
                        else
                        {
                            MessageBox.Show(this, "打印机 " + this.PrinterInfo.PrinterName + " 的纸张类型 " + this.PrinterInfo.PaperName + " 当前不可用，请重新选定纸张");
                            document.DefaultPageSettings.PaperSize = old_papersize;
                            this.PrinterInfo.PaperName = "";
                            bDisplayPrinterDialog = true;
                        }
                    }
                }
                else
                {
                    // 没有首选配置的情况下要出现打印对话框
                    bDisplayPrinterDialog = true;
                }

                DialogResult result = DialogResult.OK;
                if (bDisplayPrinterDialog == true)
                    result = printDialog1.ShowDialog();

                // If the result is OK then print the document.
                if (result == DialogResult.OK)
                {
                    try
                    {
                        if (bDisplayPrinterDialog == true)
                        {
                            // 记忆打印参数
                            if (this.PrinterInfo == null)
                                this.PrinterInfo = new PrinterInfo();
                            this.PrinterInfo.PrinterName = document.PrinterSettings.PrinterName;
                            this.PrinterInfo.PaperName = document.DefaultPageSettings.PaperSize.PaperName;

                            // 2014/3/27
                            this.document.DefaultPageSettings = document.PrinterSettings.DefaultPageSettings;
                            
                            SetTitle();
                        }

                        TracePrinterInfo();

                        this.document.Print();
                    }
                    catch (Exception ex)
                    {
                        strError = "打印过程出错: " + ex.Message;
                        goto ERROR1;
                    }
                }

            }
            finally
            {
                this.Cursor = oldCursor;
                this.EnableControls(true);
                this.EndPrint();

                this.MainForm.OperHistory.AppendHtml("<div class='debug end'>" + HttpUtility.HtmlEncode(DateTime.Now.ToLongTimeString()) + " 结束执行打印</div>");
            }

            return 0;
        ERROR1:
            MessageBox.Show(this, strError);
            return -1;
        }

		        // 
        /// <summary>
        /// 打印(根据册记录)
        /// </summary>
        /// <param name="bDisplayPrinterDialog">是否显示打印机设置对话框</param>
        /// <returns>-1: 出错; 0: 成功</returns>
        public int PrintFromItemRecords(bool bDisplayPrinterDialog = true)
        {
            string strError = "";

            // 需要先创建标签文件
            string strLabelFilename = this.MainForm.NewTempFilename(
                "temp_labelfiles",
                "~label_");
            string strErrorFilename = this.MainForm.NewTempFilename(
    "temp_labelfiles",
    "~error_");

            this.MainForm.OperHistory.AppendHtml("<div class='debug begin'>" + HttpUtility.HtmlEncode(DateTime.Now.ToLongTimeString()) + " 开始执行打印</div>");

            try
            {
                this.textBox_errorInfo.Text = "";

                int nRet = BuildLabelFile(
                    strLabelFilename,
                    strErrorFilename,
                    out strError);
                if (nRet == -1)
                    goto ERROR1;

                FileInfo fi = new FileInfo(strErrorFilename);
                if (fi.Exists && fi.Length > 0)
                {
                    string strContent = "";
                    nRet = Global.ReadTextFileContent(strErrorFilename,
                        out strContent,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                    this.textBox_errorInfo.Text = strContent;

                    DialogResult result = MessageBox.Show(this,
                        "创建标签文件的过程中有报错信息，请问是否继续进行打印?\r\n\r\n(Yes 继续打印；No 不打印)",
                        "LabelPrintForm",
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Question,
                        MessageBoxDefaultButton.Button2);
                    if (result == DialogResult.No)
                    {
                        this.textBox_errorInfo.Focus();
                        return 0;
                    }
                }

                nRet = this.BeginPrint(
                    strLabelFilename,
                    this.textBox_labelDefFilename.Text,
                    out strError);
                if (nRet == -1)
                    goto ERROR1;

                this.document.PreviewMode = false;

                this.EnableControls(false);
                Cursor oldCursor = this.Cursor;
                this.Cursor = Cursors.WaitCursor;
                try
                {

                    // Allow the user to choose the page range he or she would
                    // like to print.
                    printDialog1.AllowSomePages = true;

                    // Show the help button.
                    printDialog1.ShowHelp = true;

                    // Set the Document property to the PrintDocument for 
                    // which the PrintPage Event has been handled. To display the
                    // dialog, either this property or the PrinterSettings property 
                    // must be set 
                    printDialog1.Document = this.document;

                    if (this.PrinterInfo != null)
                    {
                        string strPrinterName = document.PrinterSettings.PrinterName;
                        if (string.IsNullOrEmpty(this.PrinterInfo.PrinterName) == false
                            && this.PrinterInfo.PrinterName != strPrinterName)
                        {
                            this.document.PrinterSettings.PrinterName = this.PrinterInfo.PrinterName;
                            if (this.document.PrinterSettings.IsValid == false)
                            {
                                MessageBox.Show(this, "打印机 " + this.PrinterInfo.PrinterName + " 当前不可用，请重新选定打印机");
                                this.document.PrinterSettings.PrinterName = strPrinterName;
                                this.PrinterInfo.PrinterName = "";
                                bDisplayPrinterDialog = true;
                            }
                        }

                        PaperSize old_papersize = document.DefaultPageSettings.PaperSize;
                        if (string.IsNullOrEmpty(this.PrinterInfo.PaperName) == false
                            && this.PrinterInfo.PaperName != document.DefaultPageSettings.PaperSize.PaperName)
                        {
                            PaperSize found = null;
                            foreach (PaperSize ps in this.document.PrinterSettings.PaperSizes)
                            {
                                if (ps.PaperName.Equals(this.PrinterInfo.PaperName))
                                {
                                    found = ps;
                                    break;
                                }
                            }

                            if (found != null)
                                this.document.DefaultPageSettings.PaperSize = found;
                            else
                            {
                                MessageBox.Show(this, "打印机 " + this.PrinterInfo.PrinterName + " 的纸张类型 " + this.PrinterInfo.PaperName + " 当前不可用，请重新选定纸张");
                                document.DefaultPageSettings.PaperSize = old_papersize;
                                this.PrinterInfo.PaperName = "";
                                bDisplayPrinterDialog = true;
                            }
                        }
                    }
                    else
                    {
                        // 没有首选配置的情况下要出现打印对话框
                        bDisplayPrinterDialog = true;
                    }

                    DialogResult result = DialogResult.OK;
                    if (bDisplayPrinterDialog == true)
                        result = printDialog1.ShowDialog();

                    // If the result is OK then print the document.
                    if (result == DialogResult.OK)
                    {
                        try
                        {
                            if (bDisplayPrinterDialog == true)
                            {                           // 记忆打印参数
                                if (this.PrinterInfo == null)
                                    this.PrinterInfo = new PrinterInfo();
                                this.PrinterInfo.PrinterName = document.PrinterSettings.PrinterName;
                                this.PrinterInfo.PaperName = document.DefaultPageSettings.PaperSize.PaperName;

                                // 2014/3/27
                                this.document.DefaultPageSettings = document.PrinterSettings.DefaultPageSettings;

                                SetTitle();
                            }

                            TracePrinterInfo();

                            this.document.Print();
                        }
                        catch (Exception ex)
                        {
                            strError = "打印过程出错: " + ex.Message;
                            goto ERROR1;
                        }
                    }

                }
                finally
                {
                    this.Cursor = oldCursor;
                    this.EnableControls(true);

                    this.EndPrint();
                }
            }
            finally
            {
                if (String.IsNullOrEmpty(strLabelFilename) == false)
                {
                    try
                    {
                        File.Delete(strLabelFilename);
                    }
                    catch
                    {
                    }
                }
                if (String.IsNullOrEmpty(strErrorFilename) == false)
                {
                    try
                    {
                        File.Delete(strErrorFilename);
                    }
                    catch
                    {
                    }
                }

                this.MainForm.OperHistory.AppendHtml("<div class='debug end'>" + HttpUtility.HtmlEncode(DateTime.Now.ToLongTimeString()) + " 结束执行打印</div>");
            }

            return 0;
        ERROR1:
            MessageBox.Show(this, strError);
            return -1;
        }


		        // 获得种次号以外的其他区分号，主要是著者号
        // return:
        //      -1  error
        //      0   not found。注意此时也要设置strError值
        //      1   found
        /// <summary>
        /// 获得种次号以外的其他区分号，主要是著者号
        /// </summary>
        /// <param name="strQufenhaoTypes">区分号类型。可以是一个区分号类型，也可以是逗号间隔的若干个区分号类型</param>
        /// <param name="strQufenhao">返回区分号</param>
        /// <param name="strError">返回出错信息</param>
        /// <returns>-1: 出错; 0: 没有找到(注意此时 strError 中也返回了内容); 1: 找到</returns>
        public virtual int GetAuthorNumber(string strQufenhaoTypes,
            out string strQufenhao,
            out string strError)
        {
            strError = "";
            strQufenhao = "";
            int nRet = 0;

            List<string> types = StringUtil.SplitList(strQufenhaoTypes);

            List<AuthorLevel> authors = new List<AuthorLevel>();

            // *** 第一阶段，遍历获取每个区分号类型的著者字符串
            foreach (string type in types)
            {
                string strAuthor = "";
                int nLevel = 0;

                AuthorLevel author = new AuthorLevel();
                author.Type = type;
                if (type == "GCAT")
                {
                    // 根据区分号类型从MARC记录中获得作者字符串
                    // return:
                    //      -1  error
                    //      0   not found
                    //      1   found
                    nRet = GetAuthor(type,
                        out strAuthor,
                        out nLevel,
                        out strError);

#if DEBUG
                    if (nRet == 0)
                    {
                        Debug.Assert(String.IsNullOrEmpty(strAuthor) == true, "");
                    }

                    if (nRet == 1)
                    {
                        Debug.Assert(String.IsNullOrEmpty(strAuthor) == false, "");
                    }
#endif

                        author.Level = nRet;
                        author.Author = strError;
                        authors.Add(author);
                        continue;
#if NO
                    // 获得著者号
                    string strGcatWebServiceUrl = this.DetailForm.MainForm.GcatServerUrl;   // "http://dp2003.com/dp2libraryws/gcat.asmx";

                    // 获得著者号
                    // return:
                    //      -1  error
                    //      0   canceled
                    //      1   succeed
                    nRet = GetGcatAuthorNumber(strGcatWebServiceUrl,
                        strAuthor,
                        out strQufenhao,
                        out strError);
                    if (nRet == -1)
                    {
                        author.Level = -1;
                        author.Author = strError;
                        authors.Add(author);
                        continue;
                    }

                    // 放弃回答问题
                    if (nRet == 0)
                        return 0;

                    return 1;
#endif
                }
                else if (type == "四角号码")
                {
                    // 根据区分号类型从MARC记录中获得作者字符串
                    // return:
                    //      -1  error
                    //      0   not found
                    //      1   found
                    nRet = GetAuthor(type,
                        out strAuthor,
                        out nLevel,
                        out strError);
                    if (nRet == -1)
                    {
                        author.Level = -1;
                        author.Author = strError;
                        authors.Add(author);
                        continue;
                    }
                    if (nRet == 0)
                    {
                        Debug.Assert(String.IsNullOrEmpty(strAuthor) == true, "");
                        author.Level = 0;
                        author.Author = strError;
                        authors.Add(author);
                        continue;
                    }
                    Debug.Assert(String.IsNullOrEmpty(strAuthor) == false, "");

#if NO
                    // 获得著者号
                    // return:
                    //      -1  error
                    //      0   canceled
                    //      1   succeed
                    nRet = GetSjhmAuthorNumber(
                        strAuthor,
                        out strQufenhao,
                        out strError);
                    if (nRet == -1)
                    {
                        author.Level = -1;
                        author.Author = strError;
                        authors.Add(author);
                        continue;
                    }
                    // 放弃回答问题
                    if (nRet == 0)
                        return 0;

                    return 1;
#endif
                }
                else if (type == "Cutter-Sanborn Three-Figure")
                {
                    // 根据区分号类型从MARC记录中获得作者字符串
                    // return:
                    //      -1  error
                    //      0   not found
                    //      1   found
                    nRet = GetAuthor(type,
                        out strAuthor,
                        out nLevel,
                        out strError);
                    if (nRet == -1)
                    {
                        author.Level = -1;
                        author.Author = strError;
                        authors.Add(author);
                        continue;
                    }
                    if (nRet == 0)
                    {
                        Debug.Assert(String.IsNullOrEmpty(strAuthor) == true, "");
                        author.Level = 0;
                        author.Author = strError;
                        authors.Add(author);
                        continue;
                    }
                    Debug.Assert(String.IsNullOrEmpty(strAuthor) == false, "");

#if NO
                    // 获得著者号
                    // return:
                    //      -1  error
                    //      0   canceled
                    //      1   succeed
                    nRet = GetCutterAuthorNumber(
                        strAuthor,
                        out strQufenhao,
                        out strError);
                    if (nRet == -1)
                    {
                        author.Level = -1;
                        author.Author = strError;
                        authors.Add(author);
                        continue;
                    }

                    // 放弃回答问题
                    if (nRet == 0)
                        return 0;

                    return 1;
#endif
                }
#if SHITOUTANG
                else if (type == "石头汤著者号"
                    || type == "石头汤")
                {
                    // 根据区分号类型从MARC记录中获得作者字符串
                    // return:
                    //      -1  error
                    //      0   not found
                    //      1   found
                    nRet = GetAuthor(type,
                        out strAuthor,
                        out nLevel,
                        out strError);
                    if (nRet == -1)
                    {
                        author.Level = -1;
                        author.Author = strError;
                        authors.Add(author);
                        continue;
                    }
                    if (nRet == 0)
                    {
                        Debug.Assert(String.IsNullOrEmpty(strAuthor) == true, "");
                        author.Level = 0;
                        author.Author = strError;
                        authors.Add(author);
                        continue;
                    }
                    Debug.Assert(String.IsNullOrEmpty(strAuthor) == false, "");

#if NO
                    strQufenhao = strAuthor;
                    return 1;
#endif
                }
#endif
                else if (type == "手动")
                {
                    strQufenhao = "?";
                    return 1;
                }
                else if (type == "<无>")
                {
                    strQufenhao = "";
                    return 1;
                }
                else
                {
                    strError = "未知的区分号类型 '" + type + "'";
                    goto ERROR1;
                }
            }

            // *** 第二阶段，选择一个 level 最高的著者信息
            AuthorLevel one = null;
            if (authors.Count == 0)
            {
                strError = "没有指定任何区分号类型，无法获得著者字符串";
                return 0;
            }
            else if (authors.Count == 1)
            {
                one = authors[0];
            }
            if (authors.Count > 1)
            {
                authors.Sort(new AuthorLevelComparer());

                one = authors[0];
                if (one.Level <= 0)
                {
                    string strWarning = "";
                    string strErrorText = "";
                    foreach (AuthorLevel author in authors)
                    {
                        if (author.Level == -1)
                        {
                            if (string.IsNullOrEmpty(strErrorText) == false)
                                strErrorText += "; ";
                            strErrorText += author.Author;
                        }
                        if (author.Level == 0)
                        {
                            if (string.IsNullOrEmpty(strWarning) == false)
                                strWarning += "; ";
                            strWarning += author.Author;
                        } 
                    }

                    if (string.IsNullOrEmpty(strErrorText) == false)
                    {
                        strError = strErrorText;
                        return -1;
                    }

                    strError = strWarning;
                    return 0;
                }
            }

            if (one.Level == -1)
            {
                strError = one.Author;
                return -1;
            }
            if (one.Level == 0)
            {
                strError = one.Author;
                return 0;
            }

            // *** 第三阶段，从著者字符串创建著者号
            {
                string type = one.Type;
                string strAuthor = one.Author;
                Debug.Assert(String.IsNullOrEmpty(strAuthor) == false, "");

                if (type == "GCAT")
                {

                    // 获得著者号
                    string strGcatWebServiceUrl = this.DetailForm.MainForm.GcatServerUrl;   // "http://dp2003.com/dp2libraryws/gcat.asmx";

                    // 获得著者号
                    // return:
                    //      -1  error
                    //      0   canceled
                    //      1   succeed
                    nRet = GetGcatAuthorNumber(strGcatWebServiceUrl,
                        strAuthor,
                        out strQufenhao,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;

                    // 放弃回答问题
                    if (nRet == 0)
                        return 0;

                    return 1;
                }
                else if (type == "四角号码")
                {
                    // 获得著者号
                    // return:
                    //      -1  error
                    //      0   canceled
                    //      1   succeed
                    nRet = GetSjhmAuthorNumber(
                        strAuthor,
                        out strQufenhao,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;

                    // 放弃回答问题
                    if (nRet == 0)
                        return 0;

                    return 1;
                }
                else if (type == "Cutter-Sanborn Three-Figure")
                {
                    // 获得著者号
                    // return:
                    //      -1  error
                    //      0   canceled
                    //      1   succeed
                    nRet = GetCutterAuthorNumber(
                        strAuthor,
                        out strQufenhao,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;

                    // 放弃回答问题
                    if (nRet == 0)
                        return 0;

                    return 1;
                }
#if SHITOUTANG
                else if (type == "石头汤著者号"
                    || type == "石头汤")
                {
                    strQufenhao = strAuthor;
                    return 1;
                }
#endif
                else if (type == "手动")
                {
                    strQufenhao = "?";
                    return 1;
                }
                else if (type == "<无>")
                {
                    strQufenhao = "";
                    return 1;
                }
                else
                {
                    strError = "未知的区分号类型 '" + type + "'";
                    goto ERROR1;
                }
            }
            return 0;
        ERROR1:
            return -1;
        }

		#if NO
                            string strAction = DomUtil.GetElementText(dom.DocumentElement, "action");
                            string strOperator = DomUtil.GetElementText(dom.DocumentElement, "operator");

                            XmlNode nodeReader = null;
                            string strReaderXml = DomUtil.GetElementText(dom.DocumentElement,
                                    "readerRecord", out nodeReader);
                            string strReaderRecPath = DomUtil.GetAttr(nodeReader, "recPath");
                            string strReaderDbName = Global.GetDbName(strReaderRecPath);
                            // TODO: 根据读者库名获得馆代码
                            // string strLibraryCode = "";

                            string strItemBarcode = DomUtil.GetElementText(dom.DocumentElement,
                                "itemBarcode");
                            string strReaderBarcode = DomUtil.GetElementText(dom.DocumentElement,
                                "readerBarcode");
                            string strOperTime = DomUtil.GetElementText(dom.DocumentElement,
                                "operTime");

                            OperLogLine line = new OperLogLine();
                            line.Date = item.Date + ":" + item.Index.ToString();
                            line.Operation = strOperation;
                            line.Action = strAction;
                            line.ItemBarcode = strItemBarcode;
                            // 馆藏地点需要另行获得
                            line.ReaderBarcode = strReaderBarcode;
                            line.OperTime = strOperTime;
                            // line.LibraryCode = strLibraryCode;

                            lines.Add(line);
#endif


        // 将一个统计文件条目写入到 index.xml 的 DOM 中
        // 注：要确保每个报表的名字 strTableName 是不同的。如果同一报表要在不同条件下输出多次，需要把条件字符串也加入到名字中
        // parameters:
        //      strOutputDir    报表输出目录。例如 c:\users\administrator\dp2circulation_v2\reports
        int WriteIndexXml(
            string strTimeType,
            string strTime,
            string strTableName,
            string strOutputDir,
            string strReportFileName,
            string strReportType,
            out string strError)
        {
            strError = "";

            // 这里决定在分馆所述的目录内，如何划分 index.xml 文件的层级和个数
            string strFileName = Path.Combine(strOutputDir, "index.xml");

            if (strFileName != _strIndexXmlFileName
                && string.IsNullOrEmpty(_strIndexXmlFileName) == false)
            {
                // 保存上一个文件
                Debug.Assert(_indexDom != null, "");
                _indexDom.Save(_strIndexXmlFileName);
                File.SetAttributes(_strIndexXmlFileName, FileAttributes.Archive);

                _indexDom = null;
                _strIndexXmlFileName = "";
            }

            if (_indexDom == null)
            {
                _indexDom = new XmlDocument();
                if (File.Exists(strFileName) == true)
                {
                    try
                    {
                        _indexDom.Load(strFileName);
                    }
                    catch (Exception ex)
                    {
                        strError = "装入文件 " + strFileName + " 时出错: " + ex.Message;
                        return -1;
                    }
                }
                else
                {
                    _indexDom.LoadXml("<root />");
                }

                _strIndexXmlFileName = strFileName;
            }

            // 根据时间类型创建一个 index.xml 中的 item 元素
            XmlNode item = CreateItemNode(_indexDom.DocumentElement,
                strTimeType,
                strTime,
                strTableName + "-" + strReportType,
                strReportType);
            Debug.Assert(item != null, "");

            // DomUtil.SetAttr(item, "type", strReportType);

            if (strReportType == "131")
            {
                string strNewFileName = "." + strReportFileName.Substring(strOutputDir.Length);
                DomUtil.SetAttr(item, "link", strNewFileName.Replace("\\", "/"));
            }
            else
            {
                /*
                 * 文件名不能包含任何以下字符：\ / : * ?"< > |
                 * 
    对于命名的文件、 文件夹或快捷方式是有效的字符包括字母 (A-Z) 和数字 (0-9)，再加上下列特殊字符的任意组合：
       ^   Accent circumflex (caret)
       &   Ampersand
       '   Apostrophe (single quotation mark)
       @   At sign
       {   Brace left
       }   Brace right
       [   Bracket opening
       ]   Bracket closing
       ,   Comma
       $   Dollar sign
       =   Equal sign
       !   Exclamation point
       -   Hyphen
       #   Number sign
       (   Parenthesis opening
       )   Parenthesis closing
       %   Percent
       .   Period
       +   Plus
       ~   Tilde
       _   Underscore             * */
                string strName = DomUtil.GetAttr(item, "name").Replace("/", "+");

                Debug.Assert(strName.IndexOf("|") == -1, "");
                // 将文件名改名
                string strFileName1 = Path.Combine(Path.GetDirectoryName(strReportFileName), strName + Path.GetExtension(strReportFileName));
                if (File.Exists(strFileName1) == true)
                    File.Delete(strFileName1);

#if NO
                FileAttributes attr = File.GetAttributes(strReportHtmlFileName);
#endif

                File.Move(strReportFileName, strFileName1);
                strReportFileName = strFileName1;

#if NO
                FileAttributes attr1 = File.GetAttributes(strReportHtmlFileName);
                Debug.Assert(attr == attr1, "");
#endif
                string strNewFileName = "." + strReportFileName.Substring(strOutputDir.Length);

                // 创建 .html 文件
                if ((this._fileType & FileType.HTML) != 0)
                {
                    string strHtmlFileName = Path.Combine(Path.GetDirectoryName(strReportFileName), Path.GetFileNameWithoutExtension(strReportFileName) + ".html");
                    int nRet = Report.RmlToHtml(strReportFileName,
                        strHtmlFileName,
                        this._cssTemplate,
                        out strError);
                    if (nRet == -1)
                        return -1;
                    // File.SetAttributes(strHtmlFileName, FileAttributes.Archive);
                }

                // 创建 Excel 文件
                if ((this._fileType & FileType.Excel) != 0)
                {
                    string strExcelFileName = Path.Combine(Path.GetDirectoryName(strReportFileName), Path.GetFileNameWithoutExtension(strReportFileName) + ".xlsx");
                    int nRet = Report.RmlToExcel(strReportFileName,
                        strExcelFileName,
                        out strError);
                    if (nRet == -1)
                        return -1;
                    // File.SetAttributes(strExcelFileName, FileAttributes.Archive);
                }

                // 删除以前的对照关系
                string strOldFileName = DomUtil.GetAttr(item, "link");
                if (string.IsNullOrEmpty(strOldFileName) == false)
                // && PathUtil.IsEqual(strOldFileName, strHtmlFileName) == false
                {
                    string strOldPhysicalPath = GetRealPath(strOutputDir,
        strOldFileName);

                    if (PathUtil.IsEqual(strOldPhysicalPath, strReportFileName) == false
                    && File.Exists(strOldPhysicalPath) == true)
                    {
                        try
                        {

                            File.Delete(strOldPhysicalPath);
                        }
                        catch
                        {
                        }
                    }
                }

                DomUtil.SetAttr(item, "link", strNewFileName.Replace("\\", "/"));
#if DEBUG
                // 检查文件是否存在
                if (File.Exists(strReportFileName) == false)
                {
                    strError = strTime + " " + strTableName + " 的文件 '" + strReportFileName + "' 不存在";
                    return -1;
                }
#endif
            }

            // dom.Save(strFileName);
            return 0;
        }



		        if (File.Exists(strXmlFileName) == false)
        {
            if (string.IsNullOrEmpty(strStart) == true)
                strError = "分馆 '"+strLibraryCode+"' 的报表不存在";
            else
                strError = "分馆 '" + strLibraryCode + "' 的起始路径为 '"+strStart+"' 的报表不存在";
            goto ERROR1;
        }


		        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_422_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateWorkerReport(
                strLibraryCode,
                strDateRange,
                "422",
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "0:a";    // "0:a" 操作者

            tableDepartment.Sort(SortColumnCollection.NormalToTable(strColumnSortStyle));

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }

		


        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_431_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateWorkerReport(
                strLibraryCode,
                strDateRange,
                "431",
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "5:a";    // "5:a" 操作时间

            tableDepartment.Sort(SortColumnCollection.NormalToTable(strColumnSortStyle));

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }


		

        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_432_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateWorkerReport(
                strLibraryCode,
                strDateRange,
                "432",
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "0:a";    // "0:a" 操作者

            tableDepartment.Sort(SortColumnCollection.NormalToTable(strColumnSortStyle));

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }
        //

        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_441_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateWorkerReport(
                strLibraryCode,
                strDateRange,
                "441",
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "5:a";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle);    // "3:a" 操作时间

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }


        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_442_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateWorkerReport(
                strLibraryCode,
                strDateRange,
                "442",
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "-1:a";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle);    // "-1:a" 操作者

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }

        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_443_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateWorkerReport(
                strLibraryCode,
                strDateRange,
                "443",
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "-1:a";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle);    // "-1:a" 馆藏地点

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }


		//////

		        private void button_test_replication_Click(object sender, EventArgs e)
        {
            string strError = "";

            this.ClearErrorInfoForm();

            string strStartDate = InputDlg.GetInput(
this,
"测试同步",
"请指定开始日期: ",
"20140104:1-",
this.MainForm.DefaultFont);
            if (strStartDate == null)
                return;

            string strEndDate = DateTimeUtil.DateTimeToString8(DateTime.Now);
            string strLastDate = "";
            long last_index = 0;
            // parameters:
            //      index   从指定的日志文件的什么记录偏移开始处理
            // return:
            //      -1  出错
            //      0   中断
            //      1   完成
            int nRet = DoReplication(
                strStartDate,   // "20060101",
                strEndDate,
                out strLastDate,
                out last_index,
                out strError);
            if (nRet == -1 || nRet == 0)
                goto ERROR1;

            return;
        ERROR1:
            MessageBox.Show(this, strError);
        }
		        private void button_test_initialTables_Click(object sender, EventArgs e)
        {
            string strError = "";


            this._connectionString = GetOperlogConnectionString();  //  SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

            // 创建日志表
            int nRet = OperLogLine.CreateOperLogTable(
                this._connectionString,
                out strError);
            if (nRet == -1)
                goto ERROR1;

            nRet = ItemLine.CreateItemTable(
    this._connectionString,
    out strError);
            if (nRet == -1)
                goto ERROR1;

            nRet = ReaderLine.CreateReaderTable(
    this._connectionString,
    out strError);
            if (nRet == -1)
                goto ERROR1;

            nRet = BiblioLine.CreateBiblioTable(
    this._connectionString,
    out strError);
            if (nRet == -1)
                goto ERROR1;

            {

                List<string> styles = new List<string>();

                // 获得所有分类号检索途径 style
                nRet = GetClassFromStyles(out styles,
                    out strError);
                if (nRet == -1)
                    goto ERROR1;

                foreach (string strStyle in styles)
                {
                    nRet = ClassLine.CreateClassTable(
                        this._connectionString,
                        "class_" + strStyle,
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;
                }
            }

            return;
        ERROR1:
            MessageBox.Show(this, strError);
        }
        private void button_deleteOperLogDb_Click(object sender, EventArgs e)
        {
            string strFileName = GetOperlogConnectionString();  //  SQLiteUtil.GetDatabaseFilePath(this.MainForm.UserDir, "operlog.bin");
            File.Delete(strFileName);
        }

		        private void button_management_createOperLogTable_Click(object sender, EventArgs e)
        {
            string strError = "";
            int nRet = DoTask1(out strError);
            if (nRet == -1)
                goto ERROR1;
            return;
        ERROR1:
            MessageBox.Show(this, strError);
        }

		        int DoTask1(out string strError)
        {
            strError = "";

            EnableControls(false);

            stop.OnStop += new StopEventHandler(this.DoStop);
            stop.Initial("正在执行统计任务 ...");
            stop.BeginLoop();

            try
            {
                int nRet = DoTask1Begin(out strError);
                if (nRet == -1)
                    return -1;
                // 循环
                nRet = DoTask1Loop(out strError);
                if (nRet == -1)
                    return -1;
                nRet = DoTask1End(out strError);
                if (nRet == -1)
                    return -1;

                return 0;
            }
            finally
            {
                stop.EndLoop();
                stop.OnStop -= new StopEventHandler(this.DoStop);
                stop.Initial("");
                stop.HideProgress();

                EnableControls(true);
            }
        }

		        int DoTask1Begin(out string strError)
        {
            strError = "";

            this._connectionString = GetOperlogConnectionString();  //  SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

            // 创建日志表
            int nRet = OperLogLine.CreateOperLogTable(
                this._connectionString,
                out strError);
            if (nRet == -1)
                return -1;


            return 0;
        }

        int DoTask1End(out string strError)
        {
            strError = "";


            return 0;
        }


        // 对每个日志文件，每个日志记录进行循环
        // return:
        //      0   普通返回
        //      1   要全部中断
        int DoTask1Loop(out string strError)
        {
            strError = "";
            int nRet = 0;
            // long lRet = 0;

#if NO
            List<string> LogFileNames = null;

            // TODO: 是否需要检查起止日期是否为空值？空值是警告还是就当作今天？

            string strStartDate = DateTimeUtil.DateTimeToString8(this.dateControl_start.Value);
            string strEndDate = DateTimeUtil.DateTimeToString8(this.dateControl_end.Value);

            string strWarning = "";

            // 根据日期范围，发生日志文件名
            // parameters:
            //      strStartDate    起始日期。8字符
            //      strEndDate  结束日期。8字符
            // return:
            //      -1  错误
            //      0   成功
            nRet = MakeLogFileNames(strStartDate,
                strEndDate,
                true,
                out LogFileNames,
                out strWarning,
                out strError);
            if (nRet == -1)
                return -1;

            if (String.IsNullOrEmpty(strWarning) == false)
                MessageBox.Show(this, strWarning);
#endif

            using (SQLiteConnection connection = new SQLiteConnection(this._connectionString))
            {
                connection.Open();

                stop.SetMessage("正在准备日志文件名 ...");
                List<string> filenames = new List<string>();
                for (int i = 0; i < this.textBox_filenames.Lines.Length; i++)
                {
                    Application.DoEvents();

                    if (stop != null && stop.State != 0)
                        return 0;

                    string strLine = this.textBox_filenames.Lines[i];
                    filenames.Add(strLine);
                }


#if NO
            string strStyle = "";
            if (this.MainForm.AutoCacheOperlogFile == true)
                strStyle = "autocache";
#endif

                ProgressEstimate estimate = new ProgressEstimate();

#if NO
            nRet = OperLogForm.ProcessFiles(this,
stop,
estimate,
Channel,
LogFileNames,
this.MainForm.OperLogLevel,
strStyle,
this.MainForm.OperLogCacheDir,
null,   // param,
procDoRecord,   // DoRecord,
out strError);
            if (nRet == -1)
                return -1;
#endif

                OperLogLoader loader = new OperLogLoader();
                loader.Channel = this.Channel;
                loader.Stop = this.Progress;
                // loader.owner = this;
                loader.estimate = estimate;
                loader.FileNames = filenames;
                loader.nLevel = this.MainForm.OperLogLevel;
                loader.AutoCache = false;
                loader.CacheDir = "";

                loader.Prompt -= new MessagePromptEventHandler(loader_Prompt);
                loader.Prompt += new MessagePromptEventHandler(loader_Prompt);

                List<OperLogLine> lines = new List<OperLogLine>();

                foreach (OperLogItem item in loader)
                {
                    string strXml = item.Xml;

                    if (string.IsNullOrEmpty(strXml) == true)
                        continue;

                    {
                        XmlDocument dom = new XmlDocument();
                        try
                        {
                            dom.LoadXml(strXml);
                        }
                        catch (Exception ex)
                        {
                            strError = "Load Xml to DOM error: " + ex.Message;
                            return -1;
                        }

                        string strOperation = DomUtil.GetElementText(dom.DocumentElement, "operation");
                        if (strOperation != "borrow" && strOperation != "return")
                            continue;

#if NO
                        string strAction = DomUtil.GetElementText(dom.DocumentElement, "action");
                        string strOperator = DomUtil.GetElementText(dom.DocumentElement, "operator");

                        XmlNode nodeReader = null;
                        string strReaderXml = DomUtil.GetElementText(dom.DocumentElement,
                                "readerRecord", out nodeReader);
                        string strReaderRecPath = DomUtil.GetAttr(nodeReader, "recPath");
                        string strReaderDbName = Global.GetDbName(strReaderRecPath);
                        // TODO: 根据读者库名获得馆代码
                        string strLibraryCode = "";

                        string strItemBarcode = DomUtil.GetElementText(dom.DocumentElement,
                            "itemBarcode");
                        string strReaderBarcode = DomUtil.GetElementText(dom.DocumentElement,
                            "readerBarcode");
                        string strOperTime = DomUtil.GetElementText(dom.DocumentElement,
                            "operTime");

                        OperLogLine line = new OperLogLine();
                        line.Date = item.Date + ":" + item.Index.ToString();
                        line.Operation = strOperation;
                        line.Action = strAction;
                        line.ItemBarcode = strItemBarcode;
                        // 馆藏地点需要另行获得
                        line.ReaderBarcode = strReaderBarcode;
                        line.OperTime = strOperTime;
                        line.LibraryCode = strLibraryCode;
#endif

                        OperLogLine line = null;
                        nRet = OperLogLine.Xml2Line(dom, item.Date, item.Index,
                            out line,
                            out strError);
                        if (nRet == -1)
                            return -1;
                        lines.Add(line);
                    }


                    if (lines.Count >= INSERT_BATCH)
                    {
                        // 写入数据库一次
                        nRet = OperLogLine.AppendOperLogLines(
                            connection,
                            lines,
                            true,
                            out strError);
                        if (nRet == -1)
                            return -1;
                        lines.Clear();
                    }

                }

                if (lines.Count > 0)
                {
                    // 写入数据库一次
                    nRet = OperLogLine.AppendOperLogLines(
                        connection,
                        lines,
                        true,
                        out strError);
                    if (nRet == -1)
                        return -1;
                }

                return 0;
            }
        }

		
        private void button_management_createItemTable_Click(object sender, EventArgs e)
        {
#if NO
            string strError = "";
            int nRet = DoCreateItemTable(out strError);
            if (nRet == -1)
                goto ERROR1;
            return;
        ERROR1:
            MessageBox.Show(this, strError);
#endif
        }

		
        private void button_management_createReaderTable_Click(object sender, EventArgs e)
        {
#if NO
            string strError = "";
            int nRet = DoCreateReaderTable(out strError);
            if (nRet == -1)
                goto ERROR1;
            return;
        ERROR1:
            MessageBox.Show(this, strError);
#endif
        }

		

        private void button_management_createBiblioTable_Click(object sender, EventArgs e)
        {
#if NO
            string strError = "";
            int nRet = DoCreateBiblioTable(out strError);
            if (nRet == -1)
                goto ERROR1;
            return;
        ERROR1:
            MessageBox.Show(this, strError);
#endif
        }

		

        private void button_management_createClassTable_Click(object sender, EventArgs e)
        {
#if NO
            string strError = "";
            int nRet = DoCreateClassTable(out strError);
            if (nRet == -1)
                goto ERROR1;
            return;
        ERROR1:
            MessageBox.Show(this, strError);
#endif
        }

		


        private void button_test_Click(object sender, EventArgs e)
        {
#if NO
            string strError = "";
            int nRet = 0;

            this.EnableControls(false);

            try
            {

                List<string> librarycodes = this.MainForm.GetAllLibraryCode();
                foreach (string strLibraryCode in librarycodes)
                {
                    {
                        // *** 101
                        Table tableDepartment = null;
                        nRet = CreateReaderReport(
                            strLibraryCode,
                            "101",
                            "",
                            ref tableDepartment,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;

                        tableDepartment.Sort("0:d");

                        Report report = Report.BuildReport(tableDepartment,
            "部门||department,借书(册)||borrowitem",
            "&nbsp;",
            true);
                        if (report != null)
                        {
                            string strDeleteComment = "";

                            string strHead = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>"
                                + "<meta http-equiv='Content-Type' content=\"text/html; charset=utf-8\">"
                                + "<title></title>"
                                + "<link rel='stylesheet' href='" + this.MainForm.DataDir + "/style_department.css' type='text/css'>"
                                + "</head><body>"
                                + "<div class='tabletitle'>借阅排行 按部门 <br/>" + strLibraryCode + "<br/>[]</div>"
                                + "<div class='titlecomment'>" + strDeleteComment + "</div>";
                            string strTail = "</body></html>";

                            string strHtml = strHead + report.HtmlTable(tableDepartment) + strTail;

                            // this.WriteTextToConsole("</pre>" + strHtml);

                            // 写入输出文件
                            string strOutputFileName = this.NewOutputFileName();
                            this.WriteToOutputFile(strOutputFileName,
                                strHtml,
                                Encoding.UTF8);
                        }
                    }

                    // *** 102
                    // 按照指定的单位名称列表，列出借书册数
                    nRet = Create_102_report(strLibraryCode,
                        "选定的部门",    // 例如： 各年级
                        out strError);
                    if (nRet == -1)
                        goto ERROR1;

                    {
                        // *** 103
                        Table tableDepartment = null;
                        nRet = CreateReaderReport(
                            strLibraryCode,
                            "103",
                            "",
                            ref tableDepartment,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;

                        tableDepartment.Sort("0:d");

                        Report report = Report.BuildReport(tableDepartment,
            "读者类型||department,借书(册)||borrowitem",
            "&nbsp;",
            true);
                        if (report != null)
                        {
                            string strDeleteComment = "";

                            string strHead = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>"
                                + "<meta http-equiv='Content-Type' content=\"text/html; charset=utf-8\">"
                                + "<title></title>"
                                + "<link rel='stylesheet' href='" + this.MainForm.DataDir + "/style_department.css' type='text/css'>"
                                + "</head><body>"
                                + "<div class='tabletitle'>借阅排行 按读者类型 <br/>" + strLibraryCode + "<br/>[]</div>"
                                + "<div class='titlecomment'>" + strDeleteComment + "</div>";
                            string strTail = "</body></html>";

                            string strHtml = strHead + report.HtmlTable(tableDepartment) + strTail;

                            // this.WriteTextToConsole("</pre>" + strHtml);

                            // 写入输出文件
                            string strOutputFileName = this.NewOutputFileName();
                            this.WriteToOutputFile(strOutputFileName,
                                strHtml,
                                Encoding.UTF8);
                        }
                    }

                    {
                        // *** 104
                        Table tableDepartment = null;
                        nRet = CreateReaderReport(
                            strLibraryCode,
                            "104",
                            "",
                            ref tableDepartment,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;

                        tableDepartment.Sort("0:d");

                        Report report = Report.BuildReport(tableDepartment,
            "读者姓名||department,借书(册)||borrowitem",
            "&nbsp;",
            true);
                        if (report != null)
                        {
                            string strDeleteComment = "";

                            string strHead = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>"
                                + "<meta http-equiv='Content-Type' content=\"text/html; charset=utf-8\">"
                                + "<title></title>"
                                + "<link rel='stylesheet' href='" + this.MainForm.DataDir + "/style_department.css' type='text/css'>"
                                + "</head><body>"
                                + "<div class='tabletitle'>借阅排行 按读者姓名 <br/>" + strLibraryCode + "<br/>[]</div>"
                                + "<div class='titlecomment'>" + strDeleteComment + "</div>";
                            string strTail = "</body></html>";

                            string strHtml = strHead + report.HtmlTable(tableDepartment) + strTail;

                            // this.WriteTextToConsole("</pre>" + strHtml);

                            // 写入输出文件
                            string strOutputFileName = this.NewOutputFileName();
                            this.WriteToOutputFile(strOutputFileName,
                                strHtml,
                                Encoding.UTF8);
                        }
                    }
                }

            }
            finally
            {
                this.EnableControls(true);
            }

            return;
        ERROR1:
            MessageBox.Show(this, strError);
#endif
        }


        private void comboBox_quickSetFilenames_SelectedIndexChanged(object sender, EventArgs e)
        {
            Delegate_QuickSetFilenames d = new Delegate_QuickSetFilenames(QuickSetFilenames);
            this.BeginInvoke(d, new object[] { sender });
        }

        delegate void Delegate_QuickSetFilenames(Control control);

        void QuickSetFilenames(Control control)
        {
            string strStartDate = "";
            string strEndDate = "";

            string strName = control.Text.Replace(" ", "").Trim();

            if (strName == "本周")
            {
                DateTime now = DateTime.Now;
                int nDelta = (int)now.DayOfWeek; // 0-6 sunday - saturday
                DateTime start = now - new TimeSpan(nDelta, 0, 0, 0);

                strStartDate = DateTimeUtil.DateTimeToString8(start);
                // strEndDate = DateTimeUtil.DateTimeToString8(start + new TimeSpan(7, 0,0,0));
                strEndDate = DateTimeUtil.DateTimeToString8(now);
            }
            else if (strName == "本月")
            {
                DateTime now = DateTime.Now;
                strEndDate = DateTimeUtil.DateTimeToString8(now);
                strStartDate = strEndDate.Substring(0, 6) + "01";
            }
            else if (strName == "本年")
            {
                DateTime now = DateTime.Now;
                strEndDate = DateTimeUtil.DateTimeToString8(now);
                strStartDate = strEndDate.Substring(0, 4) + "0101";
            }
            else if (strName == "最近七天" || strName == "最近7天")
            {
                DateTime now = DateTime.Now;
                DateTime start = now - new TimeSpan(7 - 1, 0, 0, 0);

                strStartDate = DateTimeUtil.DateTimeToString8(start);
                strEndDate = DateTimeUtil.DateTimeToString8(now);
            }
            else if (strName == "最近三十天" || strName == "最近30天")
            {
                DateTime now = DateTime.Now;
                DateTime start = now - new TimeSpan(30 - 1, 0, 0, 0);
                strStartDate = DateTimeUtil.DateTimeToString8(start);
                strEndDate = DateTimeUtil.DateTimeToString8(now);
            }
            else if (strName == "最近三十一天" || strName == "最近31天")
            {
                DateTime now = DateTime.Now;
                DateTime start = now - new TimeSpan(31 - 1, 0, 0, 0);
                strStartDate = DateTimeUtil.DateTimeToString8(start);
                strEndDate = DateTimeUtil.DateTimeToString8(now);
            }
            else if (strName == "最近三百六十五天" || strName == "最近365天")
            {
                DateTime now = DateTime.Now;
                DateTime start = now - new TimeSpan(365 - 1, 0, 0, 0);
                strStartDate = DateTimeUtil.DateTimeToString8(start);
                strEndDate = DateTimeUtil.DateTimeToString8(now);
            }
            else if (strName == "最近十年" || strName == "最近10年")
            {
                DateTime now = DateTime.Now;
                DateTime start = now - new TimeSpan(10 * 365 - 1, 0, 0, 0);
                strStartDate = DateTimeUtil.DateTimeToString8(start);
                strEndDate = DateTimeUtil.DateTimeToString8(now);
            }
            else
            {
                MessageBox.Show(this, "无法识别的周期 '" + strName + "'");
                return;
            }

            List<string> LogFileNames = null;
            string strWarning = "";
            string strError = "";
            // 根据日期范围，发生日志文件名
            // parameters:
            //      strStartDate    起始日期。8字符
            //      strEndDate  结束日期。8字符
            // return:
            //      -1  错误
            //      0   成功
            int nRet = OperLogStatisForm.MakeLogFileNames(strStartDate,
                strEndDate,
                true,  // 是否包含扩展名 ".log"
        out LogFileNames,
        out strWarning,
        out strError);
            if (nRet == -1)
                goto ERROR1;

            if (string.IsNullOrEmpty(strWarning) == false)
                MessageBox.Show(this, strWarning);

            string strText = "";
            for (int i = 0; i < LogFileNames.Count; i++)
            {
                if (i != 0)
                    strText += "\r\n";
                strText += LogFileNames[i];
            }
            this.textBox_filenames.Text = strText;
            return;
        ERROR1:
            MessageBox.Show(this, strError);
        }

		

        private void button_loadFilenams_Click(object sender, EventArgs e)
        {
            int x = 0;
            int y = 0;
            API.GetEditCurrentCaretPos(
                this.textBox_filenames,
                out x,
                out y);

            string strLine = "";

            if (this.textBox_filenames.Lines.Length > 0)
                strLine = this.textBox_filenames.Lines[y];

            GetOperLogFilenameDlg dlg = new GetOperLogFilenameDlg();
            MainForm.SetControlFont(dlg, this.Font, false);

            if (String.IsNullOrEmpty(strLine) == false)
                dlg.OperLogFilenames.Add(strLine);

            dlg.ShowDialog(this);

            if (dlg.DialogResult != DialogResult.OK)
                return;

            string strText = "";
            if (dlg.OperLogFilenames.Count == 1)
                strText = dlg.OperLogFilenames[0];
            else
            {
                for (int i = 0; i < dlg.OperLogFilenames.Count; i++)
                {
                    if (i != 0)
                        strText += "\r\n";
                    strText += dlg.OperLogFilenames[i];
                }
            }
            Global.SetLineText(this.textBox_filenames, y, strText);

            this.textBox_filenames.Focus();
        }

		
#if NO
        int DoCreateItemTable(out string strError)
        {
            strError = "";

            EnableControls(false);

            // 获得全部实体库名
            List<string> item_dbnames = new List<string>();
            if (this.MainForm.BiblioDbProperties != null)
            {
                for (int i = 0; i < this.MainForm.BiblioDbProperties.Count; i++)
                {
                    BiblioDbProperty property = this.MainForm.BiblioDbProperties[i];

                    if (String.IsNullOrEmpty(property.ItemDbName) == false)
                        item_dbnames.Add(property.ItemDbName);
                }
            }


            stop.OnStop += new StopEventHandler(this.DoStop);
            stop.Initial("正在创建册记录表 ...");
            stop.BeginLoop();

            try
            {
                this._connectionString = SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

                int nRet = ItemLine.CreateItemTable(
                    this._connectionString,
                    out strError);
                if (nRet == -1)
                    return -1;
                // 循环
                foreach (string strDbName in item_dbnames)
                {
                    nRet = BuildItemRecords(
                        strDbName,
                        out strError);
                    if (nRet == -1)
                        return -1;
                }

                return 0;
            }
            finally
            {
                stop.EndLoop();
                stop.OnStop -= new StopEventHandler(this.DoStop);
                stop.Initial("");
                stop.HideProgress();

                EnableControls(true);
            }
        }
#endif

#if NO
        int DoCreateReaderTable(out string strError)
        {
            strError = "";

            EnableControls(false);

            // 获得全部读者库名
            List<string> reader_dbnames = new List<string>();
            if (this.MainForm.ReaderDbNames != null)
            {
                foreach (string s in this.MainForm.ReaderDbNames)
                {
                    if (String.IsNullOrEmpty(s) == false)
                        reader_dbnames.Add(s);
                }
            }


            stop.OnStop += new StopEventHandler(this.DoStop);
            stop.Initial("正在创建读者记录表 ...");
            stop.BeginLoop();

            try
            {
                this._connectionString = SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

                int nRet = ReaderLine.CreateReaderTable(
                    this._connectionString,
                    out strError);
                if (nRet == -1)
                    return -1;
                // 循环
                foreach (string strDbName in reader_dbnames)
                {
                    nRet = BuildReaderRecords(
                        strDbName,
                        out strError);
                    if (nRet == -1)
                        return -1;
                }

                return 0;
            }
            finally
            {
                stop.EndLoop();
                stop.OnStop -= new StopEventHandler(this.DoStop);
                stop.Initial("");
                stop.HideProgress();

                EnableControls(true);
            }
        }
#endif

#if NO
        int DoCreateBiblioTable(out string strError)
        {
            strError = "";

            EnableControls(false);

            // 获得全部书目库名
            List<string> biblio_dbnames = new List<string>();
            if (this.MainForm.BiblioDbProperties != null)
            {
                foreach (BiblioDbProperty prop in this.MainForm.BiblioDbProperties)
                {
                    if (String.IsNullOrEmpty(prop.DbName) == false)
                        biblio_dbnames.Add(prop.DbName);
                }
            }


            stop.OnStop += new StopEventHandler(this.DoStop);
            stop.Initial("正在创建书目记录表 ...");
            stop.BeginLoop();

            try
            {
                this._connectionString = SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

                int nRet = BiblioLine.CreateBiblioTable(
                    this._connectionString,
                    out strError);
                if (nRet == -1)
                    return -1;
                // 循环
                foreach (string strDbName in biblio_dbnames)
                {
                    nRet = BuildBiblioRecords(
                        strDbName,
                        out strError);
                    if (nRet == -1)
                        return -1;
                }

                return 0;
            }
            finally
            {
                stop.EndLoop();
                stop.OnStop -= new StopEventHandler(this.DoStop);
                stop.Initial("");
                stop.HideProgress();

                EnableControls(true);
            }
        }
#endif
#if NO
        int DoCreateClassTable(out string strError)
        {
            strError = "";

            EnableControls(false);

            // 获得全部书目库名
            List<string> biblio_dbnames = new List<string>();
            if (this.MainForm.BiblioDbProperties != null)
            {
                foreach (BiblioDbProperty prop in this.MainForm.BiblioDbProperties)
                {
                    if (String.IsNullOrEmpty(prop.DbName) == false)
                        biblio_dbnames.Add(prop.DbName);
                }
            }

            List<string> styles = new List<string>();

            // 获得所有分类号检索途径 style
            int nRet = GetClassFromStyles(out styles,
                out strError);
            if (nRet == -1)
                return -1;

            stop.OnStop += new StopEventHandler(this.DoStop);
            stop.Initial("正在创建分类号记录表 ...");
            stop.BeginLoop();

            try
            {
                this._connectionString = SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

                foreach (string strStyle in styles)
                {
                    nRet = ClassLine.CreateClassTable(
                        this._connectionString,
                        "class_" + strStyle,
                        out strError);
                    if (nRet == -1)
                        return -1;
                }

                // 循环
                foreach (string strDbName in biblio_dbnames)
                {
                    foreach (string strStyle in styles)
                    {
                        nRet = BuildClassRecords(
                            strDbName,
                            strStyle,
                            "class_" + strStyle,
                            out strError);
                        if (nRet == -1)
                            return -1;
                    }
                }

                return 0;
            }
            finally
            {
                stop.EndLoop();
                stop.OnStop -= new StopEventHandler(this.DoStop);
                stop.Initial("");
                stop.HideProgress();

                EnableControls(true);
            }
        }
#endif



#if NO
        private void button_test_Click(object sender, EventArgs e)
        {
            string strError = "";

            List<string> lines = new List<string>();

            string strCommand = "select operlog.itembarcode, item.location, operlog.opertime "
                + " FROM operlogcircu JOIN item ON operlog.itembarcode = item.itembarcode "
                + " WHERE item.location = '竖标书库' "
                + " ORDER BY operlog.opertime LIMIT 10;";

            this._connectionString = GetOperlogConnectionString();  //  SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

            using (SQLiteConnection connection = new SQLiteConnection(this._connectionString))
            {
                connection.Open();

                using (SQLiteCommand command = new SQLiteCommand(strCommand,
    connection))
                {

                    try
                    {
                        SQLiteDataReader dr = command.ExecuteReader(CommandBehavior.SingleResult);
                        try
                        {
                            // 如果记录不存在
                            if (dr == null
                                || dr.HasRows == false)
                                return;

                            // 如果记录已经存在
                            while (dr.Read())
                            {
                                lines.Add(dr.GetString(0) + "\t" + dr.GetString(1));
                            }
                        }
                        finally
                        {
                            dr.Close();
                        }
                    }
                    catch (SQLiteException ex)
                    {
                        strError = "执行SQL语句发生错误: " + ex.Message + "\r\nSQL 语句: " + strCommand;
                        goto ERROR1;
                    }
                } // end of using command
            }

            return;
        ERROR1:
            MessageBox.Show(this, strError);
        }
#endif

        // 创建报表
        // 测试 HTML
        private void toolStripButton_createReport_Click(object sender, EventArgs e)
        {
            string strError = "";
            int nRet = 0;

            // 删除所有输出文件
            if (this.OutputFileNames != null)
            {
                Global.DeleteFiles(this.OutputFileNames);
                this.OutputFileNames = new List<string>();
            }

            string strUsedDateRange = this.MainForm.AppInfo.GetString("reportform",
                "daterange",
                "2013");

            string strDateRange = InputDlg.GetInput(
    this,
    "创建报表",
    "请指定时间范围: ",
    strUsedDateRange,
    this.MainForm.DefaultFont);
            if (strDateRange == null)
                return;

            this.MainForm.AppInfo.SetString("reportform",
                "daterange", 
                strDateRange);

            this.EnableControls(false);

            try
            {
                List<string> class_styles = new List<string>();

#if NO
                // 获得所有分类号检索途径 style
                nRet = GetClassFromStyles(out class_styles,
                    out strError);
                if (nRet == -1)
                    goto ERROR1;
#endif
                class_styles.Add("clc");
                class_styles.Add("hnb");

                List<string> librarycodes = this.GetLibraryCodes();
                foreach (string strLibraryCode in librarycodes)
                {
                    XmlNode nodeLibrary = this._cfg.GetLibraryNode(strLibraryCode);
                    if (nodeLibrary == null)
                    {
                        strError = "在配置文件中没有找到馆代码为 '" + strLibraryCode + "' 的 <library> 元素";
                        goto ERROR1;
                    }

                    XmlNodeList nodes = nodeLibrary.SelectNodes("reports/report");
                    foreach (XmlNode node in nodes)
                    {
                        string strName = DomUtil.GetAttr(node, "name");
                        string strType = DomUtil.GetAttr(node, "type");
                        string strCfgFile = DomUtil.GetAttr(node, "cfgFile");
                        string strNameTable = DomUtil.GetAttr(node, "nameTable");

                        Hashtable macro_table = new Hashtable();
                        macro_table["%library%"] = strLibraryCode;


                        if (strType == "101")
                        {
                            nRet = Create_101_report(strLibraryCode,
                                strDateRange,
                                strCfgFile,
                                macro_table,
                                null,
                                out strError);
                            if (nRet == -1)
                                goto ERROR1;
                        }
                        else if (strType == "102")
                        {
                            // *** 102
                            // 按照指定的单位名称列表，列出借书册数
                            nRet = Create_102_report(strLibraryCode,
                                strDateRange,
                                strCfgFile,
                                // "选定的部门",    // 例如： 各年级
                                macro_table,
                                strNameTable,
                                null,
                                out strError);
                            if (nRet == -1)
                                goto ERROR1;
                        }
                        else if (strType == "111")
                        {
                            nRet = Create_111_report(strLibraryCode,
                                strDateRange,
                                strCfgFile,
                                macro_table,
                                null,
                                out strError);
                            if (nRet == -1)
                                goto ERROR1;
                        }
                        if (strType == "121")
                        {
                            nRet = Create_121_report(strLibraryCode,
                                strDateRange,
                                strCfgFile,
                                macro_table,
                                null,
                                out strError);
                            if (nRet == -1)
                                goto ERROR1;
                        }

                        if (strType == "201"
                            || strType == "202"
                            || strType == "212") // begin of 2xx
                        {
                            // 获得分馆的所有馆藏地点

                            List<string> locations = null;
                            nRet = GetAllItemLocations(
                                strLibraryCode,
                                true,
                                out locations,
                                out strError);
                            if (nRet == -1)
                                goto ERROR1;
                            foreach (string strLocation in locations)
                            {
                                macro_table["%location%"] = strLocation;
                                if (strType == "201")
                                {
                                    nRet = Create_201_report(strLocation,
                                        strDateRange,
                                        strCfgFile,
                                        macro_table,
                                null,
                                        out strError);
                                    if (nRet == -1)
                                        goto ERROR1;
                                }
                                else if (strType == "202")
                                {
                                    nRet = Create_202_report(strLocation,
                                        strDateRange,
                                        strCfgFile,
                                        macro_table,
                                        null,
                                        out strError);
                                    if (nRet == -1)
                                        goto ERROR1;
                                }
                                else if (strType == "212")
                                {
                                    foreach (string strClassStyle in class_styles)
                                    {
                                        nRet = Create_212_report(strLocation,
                                            strClassStyle,
                                            "",
                                            strDateRange,
                                            strCfgFile,
                                            macro_table,
                                            null,
                                            out strError);
                                        if (nRet == -1)
                                            goto ERROR1;
                                    }
                                }
                            }

                            // TODO: 总的馆藏地点还要来一次

                        } // end 2xx

                    }



#if NO

                    {
                        // *** 103
                        Table tableDepartment = null;
                        nRet = CreateReaderReport(
                            strLibraryCode,
                            "103",
                            "",
                            ref tableDepartment,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;

                        tableDepartment.Sort("0:d");

                        Report report = Report.BuildReport(tableDepartment,
            "读者类型||department,借书(册)||borrowitem",
            "&nbsp;",
            true);
                        if (report != null)
                        {
                            string strDeleteComment = "";

                            string strHead = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>"
                                + "<meta http-equiv='Content-Type' content=\"text/html; charset=utf-8\">"
                                + "<title></title>"
                                + "<link rel='stylesheet' href='" + this.MainForm.DataDir + "/style_department.css' type='text/css'>"
                                + "</head><body>"
                                + "<div class='tabletitle'>借阅排行 按读者类型 <br/>" + strLibraryCode + "<br/>[]</div>"
                                + "<div class='titlecomment'>" + strDeleteComment + "</div>";
                            string strTail = "</body></html>";

                            string strHtml = strHead + report.HtmlTable(tableDepartment) + strTail;

                            // this.WriteTextToConsole("</pre>" + strHtml);

                            // 写入输出文件
                            string strOutputFileName = this.NewOutputFileName();
                            this.WriteToOutputFile(strOutputFileName,
                                strHtml,
                                Encoding.UTF8);
                        }
                    }

                    {
                        // *** 104
                        Table tableDepartment = null;
                        nRet = CreateReaderReport(
                            strLibraryCode,
                            "104",
                            "",
                            ref tableDepartment,
                            out strError);
                        if (nRet == -1)
                            goto ERROR1;

                        tableDepartment.Sort("0:d");

                        Report report = Report.BuildReport(tableDepartment,
            "读者姓名||department,借书(册)||borrowitem",
            "&nbsp;",
            true);
                        if (report != null)
                        {
                            string strDeleteComment = "";

                            string strHead = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>"
                                + "<meta http-equiv='Content-Type' content=\"text/html; charset=utf-8\">"
                                + "<title></title>"
                                + "<link rel='stylesheet' href='" + this.MainForm.DataDir + "/style_department.css' type='text/css'>"
                                + "</head><body>"
                                + "<div class='tabletitle'>借阅排行 按读者姓名 <br/>" + strLibraryCode + "<br/>[]</div>"
                                + "<div class='titlecomment'>" + strDeleteComment + "</div>";
                            string strTail = "</body></html>";

                            string strHtml = strHead + report.HtmlTable(tableDepartment) + strTail;

                            // this.WriteTextToConsole("</pre>" + strHtml);

                            // 写入输出文件
                            string strOutputFileName = this.NewOutputFileName();
                            this.WriteToOutputFile(strOutputFileName,
                                strHtml,
                                Encoding.UTF8);
                        }
                    }

#endif
                }

            }
            finally
            {
                this.EnableControls(true);
            }

            return;
        ERROR1:
            MessageBox.Show(this, strError);
        }
#if NO
        // 创建本地存储
        // TODO: 中间从服务器复制表的阶段，也应该可以中断，以后可以从断点继续。会出现一个对话框，询问是否继续
        private void button_start_createLocalStorage_Click(object sender, EventArgs e)
        {
            string strError = "";
            int nRet = 0;
            // 记下当前时刻日志文件末尾位置,
            // 然后开始从服务器复制各种信息表格

            // 开始处理时的日期
            string strEndDate = DateTimeUtil.DateTimeToString8(DateTime.Now);

            {
                // 清除断点信息
                nRet = WriteBreakPoint(
                    "",
                    0,
                    out strError);
                if (nRet == -1)
                    MessageBox.Show(this, strError);
            }

            // 获得日志文件中记录的总数
            // parameters:
            //      strDate 日志文件的日期，8 字符
            // return:
            //      -1  出错
            //      0   日志文件不存在，或者记录数为 0
            //      >0  记录数
            long lCount = GetOperLogCount(strEndDate,
                out strError);
            if (nRet == -1)
                goto ERROR1;

            // 创建册表格
            nRet = DoCreateItemTable(out strError);
            if (nRet == -1)
                goto ERROR1;

            // 如果完成，记忆一下，以后再来的时候就不用重做了

            // 创建读者表格
            nRet = DoCreateReaderTable(out strError);
            if (nRet == -1)
                goto ERROR1;

            // 创建书目表格
            nRet = DoCreateBiblioTable(out strError);
            if (nRet == -1)
                goto ERROR1;

            // 创建分类表格
            nRet = DoCreateClassTable(out strError);
            if (nRet == -1)
                goto ERROR1;


            // 从最早日期开始复制日志表
            nRet = DoCreateOperLogTable("20060101",
                strEndDate + ":0-" + (lCount - 1).ToString(), // 需要测试一下 :0--1
                out strError);
            if (nRet == -1)
                goto ERROR1;

            // 也许上面的处理完成后，时间已经过去了几天
            // 结束处理时的日期
            string strEndDate1 = DateTimeUtil.DateTimeToString8(DateTime.Now);


            // 从开头记忆的位置，执行一轮同步操作
            // 同步前，就把断点记忆好
            {
                // 写入断点信息
                nRet = WriteBreakPoint(
                    strEndDate,
                    lCount,
                    out strError);
                if (nRet == -1)
                    MessageBox.Show(this, strError);
            }

            string strLastDate = "";
            long last_index = 0;

            try
            {
                // return:
                //      -1  出错
                //      0   中断
                //      1   完成
                nRet = DoReplication(
                    strEndDate + ":" + lCount.ToString() + "-",
                    strEndDate1,
                    // long index,
                    out strLastDate,
                    out last_index,
                    out strError);
                if (nRet == -1)
                    goto ERROR1;

            }
            finally
            {
                // 写入断点信息
                if (string.IsNullOrEmpty(strLastDate) == false
                    && last_index != -1)
                {
                    nRet = WriteBreakPoint(
                    strLastDate,
                    last_index,
                    out strError);
                    if (nRet == -1)
                        MessageBox.Show(this, strError);
                }
            }

            MessageBox.Show(this, "处理完成");
            return;
        ERROR1:
            MessageBox.Show(this, strError);
        }

#endif

#if NO
        // 同步
        // parameters:
        //      index   从指定的日志文件的什么记录偏移开始处理
        // return:
        //      -1  出错
        //      0   中断
        //      1   完成
        int DoReplication(
            string strStartDate,
            string strEndDate,
            long index,
            out string strLastDate,
            out long last_index,
            out string strError)
        {
            strError = "";
            strLastDate = "";
            last_index = -1;    // -1 表示尚未处理

            EnableControls(false);

            stop.OnStop += new StopEventHandler(this.DoStop);
            stop.Initial("正在进行同步 ...");
            stop.BeginLoop();

            try
            {

                string strWarning = "";
                List<string> dates = null;
                int nRet = OperLogStatisForm.MakeLogFileNames(strStartDate,
                    strEndDate,
                    false,  // 是否包含扩展名 ".log"
                    out dates,
                    out strWarning,
                    out strError);
                if (nRet == -1)
                    return -1;

                this._connectionString = SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

                using (SQLiteConnection connection = new SQLiteConnection(this._connectionString))
                {
                    connection.Open();

                    foreach (string strCurrentDate in dates)
                    {
                        if (stop != null && stop.State != 0)
                        {
                            strError = "用户中断";
                            return 0;
                        }

                        if (stop != null)
                            stop.SetMessage("正在同步 " + strCurrentDate + " ...");

                        long lProcessCount = 0;

                        // 记忆
                        strLastDate = strCurrentDate;
                        last_index = index;

                        long lIndex = index;
                        long lHint = -1;
                        for (; ; )
                        {
                            if (stop != null && stop.State != 0)
                            {
                                strError = "用户中断";
                                return 0;
                            }

                            DigitalPlatform.CirculationClient.localhost.OperLogInfo[] records = null;

                            // 获得日志
                            // return:
                            //      -1  error
                            //      0   file not found
                            //      1   succeed
                            //      2   超过范围，本次调用无效
                            long lRet = this.Channel.GetOperLogs(
                                null,
                                strCurrentDate + ".log",
                                lIndex,
                                lHint,
                                -1,
                                "level-0",
                                "setBiblioInfo,setReaderInfo,setEntity,borrow,return", // strFilter
                                out records,
                                out strError);
                            if (lRet == -1)
                            {
                                strError = "同步过程中 GetOperLogs " + strCurrentDate + " index=" + lIndex.ToString() + " error: " + strError + "\r\n";
                                return -1;
                                // break;
                            }
                            if (lRet == 0 || lRet == 2)
                                break;

                            if (records == null || records.Length == 0)
                            {
                                strError = "records error";
                                return -1;
                            }

                            int i = 0;
                            foreach (DigitalPlatform.CirculationClient.localhost.OperLogInfo record in records)
                            {
                                if (stop != null && stop.State != 0)
                                {
                                    strError = "用户中断";
                                    return 0;
                                }

                                if (string.IsNullOrEmpty(record.Xml) == true)
                                    continue;

                                if (stop != null)
                                    stop.SetMessage("正在同步 " + strCurrentDate + " "+record.Index.ToString()+" ...");

                                nRet = ProcessLogRecord(
                                    connection,
                                    record,
                                    out strError);
                                if (nRet == -1)
                                {
                                    strError = "同步 " + strCurrentDate + " " + record.Index.ToString() + " 时出错: " + strError;

                                    // TODO: 最好有个冻结按钮
                                    DialogResult result = AutoCloseMessageBox.Show(this, strError + "\r\n\r\n(点右上角关闭按钮可以中断批处理)", 5000);
                                    if (result != System.Windows.Forms.DialogResult.OK)
                                        return -1;

                                    // 记入日志，继续处理
                                    this.GetErrorInfoForm().WriteHtml(strError + "\r\n");
                                }

                                lProcessCount++;

                                // 记忆
                                strLastDate = strCurrentDate;
                                last_index = lIndex + i + 1;
                            }

                            lHint = records[records.Length - 1].HintNext;
                            lIndex += records.Length;
                        }
                        index = 0;  // 第一个日志文件后面的，都从头开始了
                    }
                }

                return 1;
            }
            finally
            {
                stop.EndLoop();
                stop.OnStop -= new StopEventHandler(this.DoStop);
                stop.Initial("");
                stop.HideProgress();

                EnableControls(true);
            }
        }

#endif




#if NO
        int UpdateBiblioRecord(
    SQLiteConnection connection,
    string strBiblioRecPath,
    string strBiblioXml,
    out string strError)
        {
            strError = "";
            int nRet = 0;

            string strDbName = Global.GetDbName(strBiblioRecPath);
            if (this.MainForm.IsBiblioDbName(strDbName) == false)
                return 0;

            // 调用一次 API 获得检索点和书目摘要
            string[] formats = new string[2];
            formats[0] = "keys";
            formats[1] = "summary";

            string[] results = null;
            byte[] timestamp = null;
        REDO:
            long lRet = Channel.GetBiblioInfos(
                Progress,
                strBiblioRecPath,
                strBiblioXml,
                formats,
                out results,
                out timestamp,
                out strError);
            if (lRet == -1)
            {
                DialogResult result = MessageBox.Show(this,
"获取书目记录信息 (" + strBiblioRecPath + ") 的操作发生错误： " + strError + "\r\n\r\n是否重试操作?\r\n\r\n(是: 重试; 取消: 停止操作)",
"ReportForm",
MessageBoxButtons.OKCancel,
MessageBoxIcon.Question,
MessageBoxDefaultButton.Button1);
                if (result == DialogResult.OK)
                    goto REDO;
                if (result == DialogResult.Cancel)
                    return -1;
            }

            string strKeysXml = "";
            string strSummary = "";
            if (results != null && results.Length > 0)
                strKeysXml = results[0];
            if (results != null && results.Length > 1)
                strSummary = results[1];

            // 把书目摘要写入 biblio 表
            string strCommand = "insert or replace into biblio values (@bibliorecpath, @summary) ;";
            using (SQLiteCommand command = new SQLiteCommand(strCommand,
connection))
            {
                SQLiteUtil.SetParameter(command,
    "@bibliorecpath",
    strBiblioRecPath);
                SQLiteUtil.SetParameter(command,
 "@summary",
 strSummary);
                int nCount = command.ExecuteNonQuery();

            }

            // *** 取得分类号 keys
            List<BiblioDbFromInfo> styles = null;
            // 获得所有分类号检索途径 style
            nRet = GetClassFromStyles(out styles,
                out strError);
            if (nRet == -1)
                return -1;
            if (styles.Count > 0)
            {
                XmlDocument dom = new XmlDocument();
                try
                {
                    dom.LoadXml(strKeysXml);
                }
                catch (Exception ex)
                {
                    strError = "XML 装入 DOM 时出错: " + ex.Message;
                    return -1;
                }

                StringBuilder text = new StringBuilder(4096);
                int i = 0;
                using (SQLiteCommand command = new SQLiteCommand("",
connection))
                {

                    foreach (BiblioDbFromInfo style in styles)
                    {
                        XmlNodeList nodes = dom.DocumentElement.SelectNodes("k[@f='" + style.Caption + "']");
                        List<string> keys = new List<string>();
                        foreach (XmlNode node in nodes)
                        {
                            keys.Add(DomUtil.GetAttr(node, "k"));
                        }

                        text.Append("delete from class_" + style.Style + " where bibliorecpath = @bibliorecpath ;");

                        SQLiteUtil.SetParameter(command,
            "@bibliorecpath",
            strBiblioRecPath);

                        foreach (string key in keys)
                        {
                            // 把分类号写入分类号表
                            text.Append("insert into class_" + style.Style + " values (@bibliorecpath, @class" + i + ") ;");

                            SQLiteUtil.SetParameter(command,
             "@class" + i,
             key);
                            i++;
                        }
                    }

                    IDbTransaction trans = connection.BeginTransaction();
                    try
                    {
                        command.CommandText = text.ToString();
                        int nCount = command.ExecuteNonQuery();
                        if (trans != null)
                        {
                            trans.Commit();
                            trans = null;
                        }
                    }
                    finally
                    {
                        if (trans != null)
                            trans.Rollback();
                    }

                }
            }

            return 0;
        }

#endif

        int CopySubRecords(
            SQLiteConnection connection,
            XmlDocument dom,
            string strDbType,
            string strAction,
            string strTargetBiblioRecPath,
            out string strError)
        {
            strError = "";
            int nRet = 0;

            if (dom == null || dom.DocumentElement == null)
                return 0;

            string strElement = "";
            if (strDbType == "item")
            {
                if (strAction == "move")
                    strElement = "moveEntityRecords";
                else if (strAction == "copy")
                    strElement = "copyEntityRecords";
            }
            else if (strDbType == "order")
            {
                if (strAction == "move")
                    strElement = "moveOrderRecords";
                else if (strAction == "copy")
                    strElement = "copyOrderRecords";
            }
            else if (strDbType == "issue")
            {
                if (strAction == "move")
                    strElement = "moveIssueRecords";
                else if (strAction == "copy")
                    strElement = "copyIssueRecords";
            }
            else if (strDbType == "comment")
            {
                if (strAction == "move")
                    strElement = "moveCommentRecords";
                else if (strAction == "copy")
                    strElement = "copyCommentRecords";
            }
            else
            {
                strError = "未知的 strDbType '"+strDbType+"'";
                return -1;
            }

            XmlNodeList nodes = dom.DocumentElement.SelectNodes(strElement + "/record");
            if (nodes.Count == 0)
                return 0;

            nRet = CommitUpdateBiblios(
    connection,
    out strError);
            if (nRet == -1)
            {
                strError = "CopySubRecords() 中 CommitUpdateBiblios() 出错: " + strError;
                return -1;
            }
            nRet = CommitDeleteBiblios(
connection,
out strError);
            if (nRet == -1)
            {
                strError = "CopySubRecords() 中 CommitDeleteBiblios() 出错: " + strError;
                return -1;
            }

            StringBuilder text = new StringBuilder(4096);
            int i = 0;
            using (SQLiteCommand command = new SQLiteCommand("",
connection))
            {
                SQLiteUtil.SetParameter(command,
"@t_bibliorecpath",
strTargetBiblioRecPath);

                foreach (XmlNode node in nodes)
                {
                    string strSourceRecPath = DomUtil.GetAttr(node, "recPath");
                    string strTargetRecPath = DomUtil.GetAttr(node, "targetRecPath");

                    if (strAction == "copy")
                    {
                        string strNewBarcode = DomUtil.GetAttr(node, "newBarocde");
                        // TODO: 目标位置实体记录已经存在怎么办 ?
                        // 目标册记录的 barcode 字段要修改为空
                        text.Append("insert or replace into item (itemrecpath, itembarcode, location, accessno, bibliorecpath) ");
                        text.Append("select @t_itemrecpath" + i + " as itemrecpath, @newbarcode" + i + " as itembarcode, location, accessno, @t_bibliorecpath as bibliorecpath from item where itemrecpath = @s_itemrecpath" + i + " ; ");

                        SQLiteUtil.SetParameter(command,
"@newbarcode" + i,
strNewBarcode);
                    }
                    else
                    {
                        // *** 如果目标位置有记录，而源位置没有记录，应该是直接在目标记录上修改

                        // 确保源位置有记录
                        text.Append("insert or ignore into item (itemrecpath, itembarcode, location, accessno, bibliorecpath) ");
                        text.Append("select @s_itemrecpath" + i + " as itemrecpath, itembarcode, location, accessno, @t_bibliorecpath as bibliorecpath from item where itemrecpath = @t_itemrecpath" + i + " ; ");

                        // 如果目标位置已经有记录，先删除
                        text.Append("delete from item where itemrecpath = @t_itemrecpath" + i + " ;");


                        // 等于是修改 item 表的 itemrecpath 字段内容
                        text.Append("update item SET itemrecpath = @t_itemrecpath" + i + " , bibliorecpath = @t_bibliorecpath where itemrecpath=@s_itemrecpath" + i + " ;");
                    }

                    SQLiteUtil.SetParameter(command,
"@t_itemrecpath" + i,
strTargetRecPath);
                    SQLiteUtil.SetParameter(command,
"@s_itemrecpath" + i,
strSourceRecPath);
                    i++;
                }

                IDbTransaction trans = connection.BeginTransaction();
                try
                {
                    command.CommandText = text.ToString();
                    int nCount = command.ExecuteNonQuery();
                    if (trans != null)
                    {
                        trans.Commit();
                        trans = null;
                    }
                }
                finally
                {
                    if (trans != null)
                        trans.Rollback();
                }
            }

            return 0;
        }



		        /// <summary>
        /// 执行一次检索
        /// </summary>
        /// <param name="bOutputKeyCount">是否要输出为 key+count 形态</param>
        /// <param name="bOutputKeyID">是否为 keyid 形态</param>
        /// <param name="input_query">检索式</param>
        public void DoSearch(bool bOutputKeyCount,
            bool bOutputKeyID,
            ItemQueryParam input_query)
        {
            string strError = "";

            if (bOutputKeyCount == true
                && bOutputKeyID == true)
            {
                strError = "bOutputKeyCount和bOutputKeyID不能同时为true";
                goto ERROR1;
            }

            /*
            bool bOutputKeyCount = false;
            if (Control.ModifierKeys == Keys.Control)
                bOutputKeyCount = true;
             * */

            if (input_query != null)
            {
                QueryToPanel(input_query);
            }

            // 记忆下检索式
            this.m_bFirstColumnIsKey = bOutputKeyID;
            this.ClearListViewPropertyCache();

            ItemQueryParam query = PanelToQuery();
            PushQuery(query);

            ClearListViewItems();
            m_tableSummaryColIndex.Clear();


            EnableControls(false);
            this.label_message.Text = "";

            stop.Style = StopStyle.None;
            stop.OnStop += new StopEventHandler(this.DoStop);
            stop.Initial("正在检索 ...");
            stop.BeginLoop();

            bool bAccessBiblioSummaryDenied = false;

            try
            {
                string strMatchStyle = "";

                strMatchStyle = GetCurrentMatchStyle();

                if (this.textBox_queryWord.Text == "")
                {
                    if (strMatchStyle == "null")
                    {
                        this.textBox_queryWord.Text = "";

                        // 专门检索空值
                        strMatchStyle = "exact";
                    }
                    else
                    {
                        // 为了在检索词为空的时候，检索出全部的记录
                        strMatchStyle = "left";
                    }
                }

                string strBrowseStyle = "id, cols";
                string strOutputStyle = "";
                if (bOutputKeyCount == true)
                {
                    strOutputStyle = "keycount";
                    strBrowseStyle = "keycount";
                }
                else if (bOutputKeyID == true)
                {
                    strOutputStyle = "keyid";
                    strBrowseStyle = "keyid,key,id,cols";
                }

                long lRet = 0;

                if (this.DbType == "item")
                {
                    lRet = Channel.SearchItem(stop,
                        this.comboBox_entityDbName.Text, // "<all>",
                        this.textBox_queryWord.Text,
                        this.MaxSearchResultCount,
                        this.comboBox_from.Text,
                        strMatchStyle, // this.textBox_queryWord.Text == "" ? "left" : "exact",    // 原来为left 2007/10/18 changed
                        this.Lang,
                        null,   // strResultSetName
                        "",    // strSearchStyle
                        strOutputStyle, // (bOutputKeyCount == true ? "keycount" : ""),
                        out strError);
                }
                else if (this.DbType == "comment")
                {
                    lRet = Channel.SearchComment(stop,
                        this.comboBox_entityDbName.Text,
                        this.textBox_queryWord.Text,
                        this.MaxSearchResultCount,
                        this.comboBox_from.Text,
                        strMatchStyle, 
                        this.Lang,
                        null,
                        "",
                        strOutputStyle,
                        out strError);
                }
                else if (this.DbType == "order")
                {
                    lRet = Channel.SearchOrder(stop,
                        this.comboBox_entityDbName.Text,
                        this.textBox_queryWord.Text,
                        this.MaxSearchResultCount,
                        this.comboBox_from.Text,
                        strMatchStyle,
                        this.Lang,
                        null,
                        "",
                        strOutputStyle,
                        out strError);
                }
                else if (this.DbType == "issue")
                {
                    lRet = Channel.SearchIssue(stop,
                        this.comboBox_entityDbName.Text,
                        this.textBox_queryWord.Text,
                        this.MaxSearchResultCount,
                        this.comboBox_from.Text,
                        strMatchStyle,
                        this.Lang,
                        null,
                        "",
                        strOutputStyle,
                        out strError);
                }
                else
                    throw new Exception("未知的DbType '" + this.DbType + "'");


                if (lRet == -1)
                    goto ERROR1;

                long lHitCount = lRet;

                this.label_message.Text = "检索共命中 " + lHitCount.ToString() + " 条";
                stop.SetProgressRange(0, lHitCount);
                stop.Style = StopStyle.EnableHalfStop;

                bool bSelectFirstLine = false;
                long lStart = 0;
                long lCount = lHitCount;
                DigitalPlatform.CirculationClient.localhost.Record[] searchresults = null;

                bool bPushFillingBrowse = this.PushFillingBrowse;


                // 装入浏览格式
                for (; ; )
                {
                    Application.DoEvents();	// 出让界面控制权

                    if (stop != null)
                    {
                        if (stop.State != 0)
                        {
                            // MessageBox.Show(this, "用户中断");
                            this.label_message.Text = "检索共命中 " + lHitCount.ToString() + " 条，已装入 " + lStart.ToString() + " 条，用户中断...";
                            return;
                        }
                    }


                    lRet = Channel.GetSearchResult(
                        stop,
                        null,   // strResultSetName
                        lStart,
                        lCount,
                        strBrowseStyle, // bOutputKeyCount == true ? "keycount" : "id,cols",
                        this.Lang,
                        out searchresults,
                        out strError);
                    if (lRet == -1)
                    {
                        this.label_message.Text = "检索共命中 " + lHitCount.ToString() + " 条，已装入 " + lStart.ToString() + " 条，" + strError;
                        goto ERROR1;
                    }

                    if (lRet == 0)
                    {
                        MessageBox.Show(this, "未命中");
                        return;
                    }

                    // 处理浏览结果
                    this.listView_records.BeginUpdate();
                    try
                    {
                        List<ListViewItem> items = new List<ListViewItem>();
                        for (int i = 0; i < searchresults.Length; i++)
                        {
                            ListViewItem item = null;

                            DigitalPlatform.CirculationClient.localhost.Record searchresult = searchresults[i];

                            if (bOutputKeyCount == false
                                && bOutputKeyID == false)
                            {
                                if (bPushFillingBrowse == true)
                                    item = Global.InsertNewLine(
                                        this.listView_records,
                                        searchresult.Path,
                                        this.m_bBiblioSummaryColumn == true ? InsertBlankColumn(searchresult.Cols) : searchresult.Cols);
                                else
                                    item = Global.AppendNewLine(
                                        this.listView_records,
                                        searchresult.Path,
                                        this.m_bBiblioSummaryColumn == true ? InsertBlankColumn(searchresult.Cols) : searchresult.Cols);
                            }
                            else if (bOutputKeyCount == true)
                            {
                                // 输出keys
                                if (searchresult.Cols == null)
                                {
                                    strError = "要使用获取检索点功能，请将 dp2Library 应用服务器和 dp2Kernel 数据库内核升级到最新版本";
                                    goto ERROR1;
                                }
                                string[] cols = new string[(searchresult.Cols == null ? 0 : searchresult.Cols.Length) + 1];
                                cols[0] = searchresult.Path;
                                if (cols.Length > 1)
                                    Array.Copy(searchresult.Cols, 0, cols, 1, cols.Length - 1);

                                if (bPushFillingBrowse == true)
                                    item = Global.InsertNewLine(
                                        this.listView_records,
                                        "",
                                        cols);
                                else
                                    item = Global.AppendNewLine(
                                        this.listView_records,
                                        "",
                                        cols);
                                item.Tag = query;
                            }
                            else if (bOutputKeyID == true)
                            {
                                if (searchresult.Cols == null)
                                {
                                    strError = "要使用带有检索点的检索功能，请将 dp2Library 应用服务器和 dp2Kernel 数据库内核升级到最新版本";
                                    goto ERROR1;
                                }


#if NO
                                string[] cols = new string[(searchresult.Cols == null ? 0 : searchresult.Cols.Length) + 1];
                                cols[0] = LibraryChannel.BuildDisplayKeyString(searchresult.Keys);
                                if (cols.Length > 1)
                                    Array.Copy(searchresult.Cols, 0, cols, 1, cols.Length - 1);
#endif
                                string[] cols = this.m_bBiblioSummaryColumn == true ? InsertBlankColumn(searchresult.Cols, 2) : searchresult.Cols;
                                cols[0] = LibraryChannel.BuildDisplayKeyString(searchresult.Keys);

                                if (bPushFillingBrowse == true)
                                    item = Global.InsertNewLine(
                                        this.listView_records,
                                        searchresult.Path,
                                        cols);
                                else
                                    item = Global.AppendNewLine(
                                        this.listView_records,
                                        searchresult.Path,
                                        cols);
                                item.Tag = query;
                            }

                            query.Items.Add(item);
                            items.Add(item);
                            stop.SetProgressValue(lStart + i);
                        }

                        if (bOutputKeyCount == false
                            && bAccessBiblioSummaryDenied == false)
                        {
                            // return:
                            //      -2  获得书目摘要的权限不够
                            //      -1  出错
                            //      0   用户中断
                            //      1   完成
                            int nRet = _fillBiblioSummaryColumn(items,
                                0,
                                false,
                                false,
                                out strError);
                            if (nRet == -1)
                                goto ERROR1;
                            if (nRet == -2)
                                bAccessBiblioSummaryDenied = true;

                            if (nRet == 0)
                            {
                                this.label_message.Text = "检索共命中 " + lHitCount.ToString() + " 条，已装入 " + lStart.ToString() + " 条，用户中断...";
                                return;
                            }
                        }

                    }
                    finally
                    {
                        this.listView_records.EndUpdate();
                    }

                    if (bSelectFirstLine == false && this.listView_records.Items.Count > 0)
                    {
                        if (this.listView_records.SelectedItems.Count == 0)
                            this.listView_records.Items[0].Selected = true;
                        bSelectFirstLine = true;
                    }

                    lStart += searchresults.Length;
                    lCount -= searchresults.Length;

                    stop.SetMessage("共命中 "+lHitCount.ToString()+" 条，已装入 "+lStart.ToString()+" 条");

                    if (lStart >= lHitCount || lCount <= 0)
                        break;
                    stop.SetProgressValue(lStart);
                }

                // MessageBox.Show(this, Convert.ToString(lRet) + " : " + strError);
                this.label_message.Text = "检索共命中 " + lHitCount.ToString() + " 条，已全部装入";
            }
            finally
            {
                stop.EndLoop();
                stop.OnStop -= new StopEventHandler(this.DoStop);
                stop.Initial("");
                stop.HideProgress();
                stop.Style = StopStyle.None;

                EnableControls(true);

            if (bAccessBiblioSummaryDenied == true)
                MessageBox.Show(this, "当前用户不具备获取书目摘要的权限");
            }

            return;
        ERROR1:
            MessageBox.Show(this, strError);
        }


		        /// <summary>
        /// 得到特定类型的顶层 MDI 子窗口
        /// </summary>
        /// <typeparam name="T">子窗口类型</typeparam>
        /// <returns>子窗口对象</returns>
        public T GetTopChildWindow<T>()
        {
            if (ActiveMdiChild == null)
                return default(T);

            // 得到顶层的MDI Child
            IntPtr hwnd = this.ActiveMdiChild.Handle;

            if (hwnd == IntPtr.Zero)
                return default(T);

            for (; ; )
            {
                if (hwnd == IntPtr.Zero)
                    break;

                Form child = null;
                for (int j = 0; j < this.MdiChildren.Length; j++)
                {
                    if (hwnd == this.MdiChildren[j].Handle)
                    {
                        child = this.MdiChildren[j];
                        goto FOUND;
                    }
                }

                goto CONTINUE;
            FOUND:

                if (child is T)
                    return (T)Convert.ChangeType(child, typeof(T));

            CONTINUE:
                hwnd = API.GetWindow(hwnd, API.GW_HWNDNEXT);
            }

            return default(T);
        }

		        // 设置“上传报表”按钮的状态和文字
        void SetUploadButtonState()
        {
            string strReportDir = Path.Combine(this.MainForm.UserDir, "reports");
            // string strZipFileName = Path.Combine(this.MainForm.UserDir, "reports.zip");

            DirectoryInfo di = new DirectoryInfo(strReportDir);
            if (di.Exists == false)
            {
                // 报表目录不存在
                this.button_start_uploadReport.Text = "上传报表";
                this.button_start_uploadReport.Enabled = false;
                return;
            }

            Cursor oldCursor = this.Cursor;
            this.Cursor = Cursors.WaitCursor;
            bool bOldEnabled = this.tabControl1.Enabled;
            this.tabControl1.Enabled = false;
            List<string> filenames = GetFileNames(strReportDir, FileAttributes.Archive);
            this.tabControl1.Enabled = bOldEnabled;
            this.Cursor = oldCursor;

            this.button_start_uploadReport.Text = "上传报表 (" + filenames.Count.ToString() + ")";
            this.button_start_uploadReport.Enabled = true;
        }

		        delegate void Delegate_SetUploadButtonState();

        void DelaySetUploadButtonState()
        {
            Delegate_SetUploadButtonState d = new Delegate_SetUploadButtonState(SetUploadButtonState);
            this.BeginInvoke(d);
        }



		        // 这是创建到一个子目录(会在子目录中创建很多文件和下级目录)，而不是输出到一个文件
        // return:
        //      -1  出错
        //      0   没有创建目录
        //      1   创建了目录
        int Create_131_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            // string strTitle,    // 例如： 各年级
            Hashtable macro_table,
            // string strNameTable,
            string strOutputDir,
            out string strError)
        {
            strError = "";
            int nRet = 0;

            // macro_table["%library%"] = strLibraryCode;

            Table reader_table = null;

            // 获得一个分馆内读者记录的证条码号和单位名称
            nRet = GetAllReaderDepartments(
                    strLibraryCode,
                    ref reader_table,
                    out strError);
            if (nRet == -1)
                return -1;

            if (reader_table.Count == 0)
                return 0;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "1:a";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            reader_table.Sort("1:a,-1:a");    // 

            int nWriteCount = 0;    // 创建了多少个具体的报表

            // stop.SetProgressRange(0, reader_table.Count);
            for (int i = 0; i < reader_table.Count; i++)
            {
                Application.DoEvents();
                if (stop != null && stop.State != 0)
                {
                    strError = "用户中断...";
                    return -1;
                }

                Line line = reader_table[i];
                string strReaderBarcode = line.Entry;
                string strName = line.GetString(0);
                string strDepartment = line.GetString(1);

                string strDepartmentName = strDepartment.Replace(" ", "_");
                if (string.IsNullOrEmpty(strDepartmentName) == true)
                    strDepartmentName = "其他部门";

                string strOutputFileName = Path.Combine(strOutputDir,
                    // strLibraryCode + "\\" + 
                    strDepartmentName + "\\" + strReaderBarcode + "_" + strName.Replace(" ", "") + ".rml");    // xlsx

                stop.SetMessage("正在创建报表文件 " + strOutputFileName + " " + (i + 1).ToString() + "/" + reader_table.Count.ToString() + " ...");

#if NO
                Table tableList = null;
                nRet = CreateReaderReport(
                    strLibraryCode,
                    strDateRange,
                    "131",
                    strReaderBarcode,
                    ref tableList,
                    out strError);
                if (nRet == -1)
                    return -1;

                tableList.Sort(strColumnSortStyle);  // "1:a" 按照借书时间排序
#endif
                SQLiteDataReader dr = null;
                nRet = CreateReaderReport(
    strLibraryCode,
    strDateRange,
    "131",
    strReaderBarcode,
    ref dr,
    out strError);
                if (nRet == -1)
                    return -1;

                macro_table["%name%"] = strName;
                macro_table["%department%"] = strDepartment;
                macro_table["%readerbarcode%"] = strReaderBarcode;

                // macro_table["%linecount%"] = tableList.Count.ToString();
                macro_table["%daterange%"] = strDateRange;

                // return:
                //      -1  出错
                //      0   没有创建文件(因为输出的表格为空)
                //      1   成功创建文件
                nRet = OutputRmlReport(    // OutputExcelReport
                    dr, // tableList,
                    strCfgFile,
                    macro_table,
                    strOutputFileName,
                    out strError);
                if (nRet == -1)
                    return -1;

                // TODO: 没有数据的读者，是否在 index.xml 也创建一个条目?
                if (nRet == 1)
                {
                    // 将一个统计文件条目写入到 131 子目录中的 index.xml 的 DOM 中
                    // parameters:
                    //      strOutputDir    index.xml 所在目录
                    nRet = Write_131_IndexXml(
                        strDepartmentName,
                        strName,
                        strReaderBarcode,
                        strOutputDir,
                        strOutputFileName,
                        out strError);
                    if (nRet == -1)
                        return -1;

                    nWriteCount++;
                }
            }

            if (nWriteCount > 0
                && (this._fileType & FileType.HTML) != 0)
            {
                string strIndexXmlFileName = Path.Combine(strOutputDir, "index.xml");
                string strIndexHtmlFileName = Path.Combine(strOutputDir, "index.html");

                if (stop != null)
                    stop.SetMessage("正在创建 " + strIndexHtmlFileName);

                // 根据 index.xml 文件创建 index.html 文件
                nRet = CreateIndexHtmlFile(strIndexXmlFileName,
                    strIndexHtmlFileName,
                    out strError);
                if (nRet == -1)
                    return -1;

            }

            if (nWriteCount > 0)
                return 1;
            return 0;
        }

		        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_111_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateReaderReport(
                strLibraryCode,
                strDateRange,
                "111",
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "0:d";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle); // "0:d"

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }

		        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_121_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateReaderReport(
                strLibraryCode,
                strDateRange,
                "121",
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "2:d";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle);    // "2:d" 册数

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }


		        // 创建读者报表，关于流通业务
        // 1) 按照读者自然单位分类的借书册数表 101
        // 2) 按照指定的单位分类的借书册数表 102
        // 3) 按照读者类型分类的借书册数表 111
        // 4) 按照读者姓名分类的借书册数表 121
        // 5) 每个读者的借阅清单 131
        int CreateReaderReport(
            string strLibraryCode,
            string strDateRange,
            string strStyle,
            string strParameters,
            ReportWriter writer,
            string strOutputFileName,
            Hashtable macro_table,
            out string strError)
        {
            strError = "";

            string strStartDate = "";
            string strEndDate = "";

            try
            {
                // 将日期字符串解析为起止范围日期
                // throw:
                //      Exception
                DateTimeUtil.ParseDateRange(strDateRange,
                    out strStartDate,
                    out strEndDate);

                // 2014/3/19
                if (string.IsNullOrEmpty(strEndDate) == true)
                    strEndDate = strStartDate;
            }
            catch (Exception ex)
            {
                strError = "日期范围字符串 '" + strDateRange + "' 格式不正确";
                return -1;
            }

            string strCommand = "";

            int nNumber = 0;

            if (StringUtil.IsInList("101", strStyle) == true)
            {
                // 101 表 按照读者 *自然单位* 分类的借书册数表
                strCommand = "select reader.department, count(*) as count "
                     + " FROM operlogcircu left outer JOIN reader ON operlogcircu.readerbarcode = reader.readerbarcode "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' "
                     + " GROUP BY reader.department ORDER BY count DESC ;";
            }
            else if (StringUtil.IsInList("102", strStyle) == true)
            {
                // 102 表 按照 *指定的单位* 分类的借书册数表
                // 这里每次只能获得一个单位的一行数据。需要按照不同单位 (strParameters) 多次循环调用本函数
                strCommand = "select '" + strParameters + "' as department, count(*) as count "
                     + " FROM operlogcircu JOIN reader ON operlogcircu.readerbarcode = reader.readerbarcode "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' AND reader.department like '" + strParameters + "' "
                     + " ;";
            }
            else if (StringUtil.IsInList("111", strStyle) == true)
            {
                // 111 表 按照读者 *自然类型* 分类的借书册数表
                strCommand = "select reader.readertype, count(*) as count "
                     + " FROM operlogcircu JOIN reader ON operlogcircu.readerbarcode = reader.readerbarcode "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' "
                     + " GROUP BY reader.readertype ORDER BY count DESC;";
            }
            else if (StringUtil.IsInList("121", strStyle) == true)
            {
                // 121 表 按照读者 *姓名* 分类的借书册数表
                strCommand = "select operlogcircu.readerbarcode, reader.name, reader.department, count(*) as count "
                     + " FROM operlogcircu JOIN reader ON operlogcircu.readerbarcode = reader.readerbarcode "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' "
                     + " GROUP BY operlogcircu.readerbarcode ORDER BY count DESC;";

                nNumber = 121;
            }
            else if (StringUtil.IsInList("131", strStyle) == true)
            {
                // 131 表 每个读者的借阅清单
                strCommand = "select oper1.itembarcode, biblio.summary, oper1.opertime as 'borrowtime', oper2.opertime as 'returntime' from operlogcircu as oper1 "
                        + " left join operlogcircu as oper2 on oper1.itembarcode = oper2.itembarcode and oper1.readerbarcode = oper2.readerbarcode and oper2.operation = 'return' and oper1.opertime <= oper2.opertime  "
                        + " left JOIN item ON oper1.itembarcode = item.itembarcode "
                        + " left JOIN biblio ON biblio.bibliorecpath = item.bibliorecpath "
                        + " where oper1.operation = 'borrow' and oper1.action = 'borrow' "
                        + "     AND oper1.date >= '" + strStartDate + "' AND oper1.date <= '" + strEndDate + "' "
                        + "     AND oper1.readerbarcode = '" + strParameters + "' "
                        + " group by oper1.readerbarcode, oper1.itembarcode, oper1.opertime order by oper1.readerbarcode, oper1.opertime ; ";

                nNumber = 131;
            }

            this._connectionString = GetOperlogConnectionString();  //  SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

            using (SQLiteConnection connection = new SQLiteConnection(this._connectionString))
            {
                connection.Open();

                using (SQLiteCommand command = new SQLiteCommand(strCommand,
    connection))
                {

                    try
                    {
                        using (SQLiteDataReader dr = command.ExecuteReader(CommandBehavior.SingleResult))
                        {
                            // 如果记录不存在
                            if (dr == null
                                || dr.HasRows == false)
                                return 0;

                            return writer.OutputRmlReport(
                                dr,
                                macro_table,
                                strOutputFileName,
                                out strError);
                        }

#if NO
                        try
                        {
                            // 如果记录不存在
                            if (dr == null
                                || dr.HasRows == false)
                                return 0;

                            // 如果记录已经存在
                            while (dr.Read())
                            {
                                string strKey = GetString(dr, 0);
                                if (nNumber == 121)
                                {
                                    // 证条码号
                                    table.SetValue(strKey, 0, GetString(dr, 1));
                                    // 单位
                                    table.SetValue(strKey, 1, GetString(dr, 2));
                                    // 册数
                                    table.SetValue(strKey, 2, dr.GetInt32(3));
                                }
                                else if (nNumber == 131)
                                {
                                    // 册条码号 摘要
                                    table.SetValue(strKey, 0, GetString(dr, 1));
                                    // 借阅时间
                                    table.SetValue(strKey, 1, GetString(dr, 2));
                                    // 还书时间
                                    table.SetValue(strKey, 2, GetString(dr, 3));
                                }
                                else
                                    table.SetValue(strKey, 0, dr.GetInt32(1));
                            }
                        }
                        finally
                        {
                            // dr.Close();
                        }
#endif
                    }
                    catch (SQLiteException ex)
                    {
                        strError = "执行SQL语句发生错误: " + ex.Message + "\r\nSQL 语句: " + strCommand;
                        return -1;
                    }
                } // end of using command
            }

            return 1;
        }

		        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_201_report(
            string strLocation,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateBookReport(
                strLocation,
                strDateRange,
                "201",
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "1:d";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle); // "1:d"

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }


		
        // 创建图书报表，关于流通业务
        // 1) 201 按照图书种分类的借书册数表
        // 2) 202 从来没有借出的图书 *种* 。册数列表示种下属的册数，不是被借出的册数
        // 4) 212 表 按照图书 *分类* 分类的借书册数表
        int CreateBookReportCommand(
    string strLocation, // "名称/"
    string strDateRange,
    string strStyle,
    string strParameters,
    // ref Table table,
            out string strCommand,
    out string strError)
        {
            strError = "";
            strCommand = "";

            string strStartDate = "";
            string strEndDate = "";

            try
            {
                // 将日期字符串解析为起止范围日期
                // throw:
                //      Exception
                DateTimeUtil.ParseDateRange(strDateRange,
                    out strStartDate,
                    out strEndDate);
                // 2014/4/11
                if (string.IsNullOrEmpty(strEndDate) == true)
                    strEndDate = strStartDate;
            }
            catch (Exception ex)
            {
                strError = "日期范围字符串 '" + strDateRange + "' 格式不正确";
                return -1;
            }

#if NO
            if (table == null)
                table = new Table(2);
#endif

            string strCommand = "";

            int nNumber = 0;

            string strLocationLike = " item.location like '" + strLocation + "%' ";
            if (string.IsNullOrEmpty(strLocation) == true)
                strLocationLike = " item.location = '' ";   // 2014/5/28
            else if (strLocation == "/")
                strLocationLike = " (item.location like '/%' OR item.location not like '%/%') ";   // 全局的馆藏点比较特殊

            if (StringUtil.IsInList("201", strStyle) == true)
            {
                // 201 表 按照图书 *种* 分类的借书册数表
                strCommand = "select item.bibliorecpath, biblio.summary, count(*) as count "
                     + " FROM operlogcircu JOIN item ON operlogcircu.itembarcode = item.itembarcode "
                     + " JOIN biblio ON biblio.bibliorecpath = item.bibliorecpath "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND " + strLocationLike
                     + " GROUP BY item.bibliorecpath ;";
                nNumber = 201;
            }
            else if (StringUtil.IsInList("202", strStyle) == true)
            {
                // 202 表 从来没有借出的图书 *种* 。册数列表示种下属的册数，不是被借出的册数
                strCommand = "select item.bibliorecpath, biblio.summary, count(*) as count "
                     + " FROM item "
                     + " JOIN biblio ON biblio.bibliorecpath = item.bibliorecpath "
                     + " WHERE item.bibliorecpath not in "
                     + " ( select item.bibliorecpath "
                     + " FROM operlogcircu JOIN item ON operlogcircu.itembarcode = item.itembarcode "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND "+strLocationLike+" ) "
                     + " AND " + strLocationLike    // 限定 item 表里面的记录范围为分馆的册
                     + " AND substr(item.createtime,1,10) <= '" + strEndDate.Insert(6, "-").Insert(4, "-") + "' "  // 限定册记录创建的时间在 end 以前
                     + " GROUP BY item.bibliorecpath ;";
                nNumber = 202;
            }
            else if (StringUtil.IsInList("212", strStyle) == true)
            {
                string strClassTableName = "class_" + strParameters;

                int nRet = PrepareDistinctClassTable(
            strClassTableName,
            out strError);
                if (nRet == -1)
                    return -1;

                string strDistinctClassTableName = "class_" + strParameters + "_d";

#if NO
                // 去掉重复的 bibliorecpath 条目
                string strSubSelect = " ( select * from " + strClassTableName + " group by bibliorecpath) a ";
#endif

                // 212 表 按照图书 *分类* 分类的借书册数表
                strCommand = "select substr(" + strDistinctClassTableName + ".class,1,1) as classhead, count(*) as count "
                    // strCommand = "select " + strClassTableName + ".class as class, count(*) as count "
                     + " FROM operlogcircu left outer JOIN item ON operlogcircu.itembarcode = item.itembarcode "
                     + " left outer JOIN " + strDistinctClassTableName + " ON " + strDistinctClassTableName + ".bibliorecpath = item.bibliorecpath "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND " + strLocationLike
                     + " GROUP BY classhead ;";
                nNumber = 212;
            }
            else
            {
                strError = "不支持的 strStyle '"+strStyle+"'";
                return -1;
            }

            this._connectionString = GetOperlogConnectionString();  //  SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

            using (SQLiteConnection connection = new SQLiteConnection(this._connectionString))
            {
                connection.Open();

                using (SQLiteCommand command = new SQLiteCommand(strCommand,
    connection))
                {
                    try
                    {
                        SQLiteDataReader dr = command.ExecuteReader(CommandBehavior.SingleResult);
                        try
                        {
                            // 如果记录不存在
                            if (dr == null
                                || dr.HasRows == false)
                                return 0;

                            // 如果记录已经存在
                            while (dr.Read())
                            {
                                string strKey = GetString(dr, 0);
                                if (nNumber == 201 || nNumber == 202)
                                {
                                    // 摘要
                                    table.SetValue(strKey, 0, GetString(dr, 1));
                                    // 册数
                                    table.SetValue(strKey, 1, dr.GetInt32(2));
                                }
                                else
                                    table.SetValue(strKey, 0, dr.GetInt32(1));
                            }
                        }
                        finally
                        {
                            dr.Close();
                        }
                    }
                    catch (SQLiteException ex)
                    {
                        strError = "执行 SQL 语句发生错误: " + ex.Message + "\r\nSQL 语句: " + strCommand;
                        return -1;
                    }
                } // end of using command
            }

            return 0;
        }

		        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_202_report(
            string strLocation,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateBookReport(
                strLocation,
                strDateRange,
                "202",
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "-1:a";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle); // "-1:a"

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }

		        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_212_report(
            string strLocation,
            string strClassType,
            string strClassCaption,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateBookReport(
                strLocation,
                strDateRange,
                "212",
                strClassType,
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "-1:a";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle); // "-1:a"

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;
            macro_table["%class%"] = string.IsNullOrEmpty(strClassCaption) == false ? strClassCaption : strClassType;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }


		
        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_301_report(
            string strLocation,
            string strClassType,
            string strClassCaption,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateStorageReport(
                strLocation,
                strDateRange,
                "301",
                strClassType,
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "-1:a";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle); // "-1:a"

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;
            macro_table["%class%"] = string.IsNullOrEmpty(strClassCaption) == false ? strClassCaption : strClassType;
            macro_table["%createtime%"] = DateTime.Now.ToLongDateString();

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }


		        // 创建图书报表，关于典藏业务
        // 1) 301 按照馆藏地点的当前全部 图书分类 种册统计
        // 2) 302 在架情况(是否被借出)
        int CreateStorageReport(
    string strLocation, // "名称/"
    string strDateRange,
    string strStyle,
    string strParameters,
    ref Table table,
    out string strError)
        {
            strError = "";

            string strStartDate = "";
            string strEndDate = "";

            try
            {
                // 将日期字符串解析为起止范围日期
                // throw:
                //      Exception
                DateTimeUtil.ParseDateRange(strDateRange,
                    out strStartDate,
                    out strEndDate);
                // 2014/4/11
                if (string.IsNullOrEmpty(strEndDate) == true)
                    strEndDate = strStartDate;
            }
            catch (Exception ex)
            {
                strError = "日期范围字符串 '" + strDateRange + "' 格式不正确";
                return -1;
            }

            if (table == null)
                table = new Table(2);

            string strCommand = "";

            int nNumber = 0;

            string strLocationLike = " item.location like '" + strLocation + "%' ";
            if (string.IsNullOrEmpty(strLocation) == true)
                strLocationLike = " item.location = '' ";   // 2014/5/28
            else if (strLocation == "/")
                strLocationLike = " (item.location like '/%' OR item.location not like '%/%') ";   // 全局的馆藏点比较特殊

            if (StringUtil.IsInList("301", strStyle) == true)
            {
                /*
select class1, count(path1) as bcount, sum (icount) from
(
select substr(class_clc.class,1,1) as class1, item.bibliorecpath as path1, count(item.itemrecpath) as icount
 FROM item 
 JOIN class_clc ON class_clc.bibliorecpath = item.bibliorecpath 
     WHERE item.location like '合肥望湖小学/%'
group by path1 
)
group by class1
                 * 
                 * */
                string strClassTableName = "class_" + strParameters;

                int nRet = PrepareDistinctClassTable(
strClassTableName,
out strError);
                if (nRet == -1)
                    return -1;

                string strDistinctClassTableName = "class_" + strParameters + "_d";

                // 301 表 按照图书 *分类* 分类的图书册数表
                strCommand = "select classhead, count(path1) as bcount, sum (icount) from ( "
                     + "select substr(" + strDistinctClassTableName + ".class,1,1) as classhead, item.bibliorecpath as path1, count(item.itemrecpath) as icount "
                     + " FROM item "
                     + " LEFT OUTER JOIN " + strDistinctClassTableName + " ON " + strDistinctClassTableName + ".bibliorecpath = item.bibliorecpath "
                     + "     WHERE " + strLocationLike
                     + " AND substr(item.createtime,1,10) <= '" + strEndDate.Insert(6, "-").Insert(4, "-") + "' "  // 限定册记录创建的时间在 end 以前
                     + " GROUP BY path1 "
                     + " ) group by classhead ;";
                nNumber = 301;
                // left outer join 是包含了左边找不到右边的那些行， 然后 class 列为 NULL
            }
            else if (StringUtil.IsInList("302", strStyle) == true)
            {
                /*
select substr(class_clc.class,1,1) as class1, 
count(case when item.borrower <> '' then item.borrower end) as outitems, 
count(case when item.borrower = '' then item.borrower end) as initems, 
count(item.itemrecpath) as icount,
printf("%.2f%", 100.0 * count(case when item.borrower <> '' then item.borrower end) / count(item.itemrecpath)) as percent
 FROM item 
 JOIN class_clc ON class_clc.bibliorecpath = item.bibliorecpath 
     WHERE item.location like '合肥望湖小学/%'
group by class1 
                 * 
                 * */
                string strClassTableName = "class_" + strParameters;

                int nRet = PrepareDistinctClassTable(
strClassTableName,
out strError);
                if (nRet == -1)
                    return -1;

                string strDistinctClassTableName = "class_" + strParameters + "_d";

                // 302 表 册在架情况
                strCommand = "select substr(" + strDistinctClassTableName + ".class,1,1) as classhead, "
                    + " count(case when item.borrower <> '' then item.borrower end) as outitems, " 
                    + " count(case when item.borrower = '' then item.borrower end) as initems, "
                    + " count(item.itemrecpath) as icount "        
                    // + " printf(\"%.2f%\", 100.0 * count(case when item.borrower <> '' then item.borrower end) / count(item.itemrecpath)) as percent "
                     + " FROM item "
                     + " LEFT OUTER JOIN " + strDistinctClassTableName + " ON " + strDistinctClassTableName + ".bibliorecpath = item.bibliorecpath "
                     + "     WHERE " + strLocationLike
                     + " AND substr(item.createtime,1,10) <= '" + strEndDate.Insert(6, "-").Insert(4, "-") + "' "  // 限定册记录创建的时间在 end 以前
                     + " GROUP BY classhead ;";
                nNumber = 302;
                // left outer join 是包含了左边找不到右边的那些行， 然后 class 列为 NULL
            }
            else
            {
                strError = "不支持的 strStyle '" + strStyle + "'";
                return -1;
            }

            this._connectionString = GetOperlogConnectionString();  //  SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

            using (SQLiteConnection connection = new SQLiteConnection(this._connectionString))
            {
                connection.Open();

                using (SQLiteCommand command = new SQLiteCommand(strCommand,
    connection))
                {
                    try
                    {
                        SQLiteDataReader dr = command.ExecuteReader(CommandBehavior.SingleResult);
                        try
                        {
                            // 如果记录不存在
                            if (dr == null
                                || dr.HasRows == false)
                                return 0;

                            // 如果记录已经存在
                            while (dr.Read())
                            {
                                string strKey = GetString(dr, 0);
                                if (nNumber == 301)
                                {
                                    // 种数
                                    table.SetValue(strKey, 0, dr.GetInt32(1));
                                    // 册数
                                    table.SetValue(strKey, 1, dr.GetInt32(2));
                                }
                                else if (nNumber == 302)
                                {
                                    // 外借册数
                                    table.SetValue(strKey, 0, dr.GetInt32(1));
                                    // 在架册数
                                    table.SetValue(strKey, 1, dr.GetInt32(2));
                                    // 总册数
                                    table.SetValue(strKey, 2, dr.GetInt32(3));
                                    // 借出比率
                                    // table.SetValue(strKey, 3, GetString(dr, 4));
                                }
                                else
                                    table.SetValue(dr.GetString(0), 0, dr.GetInt32(1));
                            }
                        }
                        finally
                        {
                            dr.Close();
                        }
                    }
                    catch (SQLiteException ex)
                    {
                        strError = "执行 SQL 语句发生错误: " + ex.Message + "\r\nSQL 语句: " + strCommand;
                        return -1;
                    }
                } // end of using command
            }

            return 0;
        }

		        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_302_report(
            string strLocation,
            string strClassType,
            string strClassCaption,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateStorageReport(
                strLocation,
                strDateRange,
                "302",
                strClassType,
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "-1:a";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle); // "-1:a"

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;
            macro_table["%class%"] = string.IsNullOrEmpty(strClassCaption) == false ? strClassCaption : strClassType;
            macro_table["%createtime%"] = DateTime.Now.ToLongDateString();


            // 修改栏目定义，让最后一栏不要 sum。然后给出一个回调函数进行合计行运算 sum

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }


		        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_4XX_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            string strType,
            out string strError)
        {
            strError = "";

            Table tableDepartment = null;
            int nRet = CreateWorkerReport(
                strLibraryCode,
                strDateRange,
                strType,
                "",
                ref tableDepartment,
                out strError);
            if (nRet == -1)
                return -1;

            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
            {
                if (strType == "421")
                    strColumnSortStyle = "4:a";    // "4:a" 操作时间
                else if (strType == "422")
                    strColumnSortStyle = "0:a";    // "0:a" 操作者
                else if (strType == "431")
                    strColumnSortStyle = "5:a";    // "5:a" 操作时间
                else if (strType == "432")
                    strColumnSortStyle = "0:a";    // "0:a" 操作者
                if (strType == "441")
                    strColumnSortStyle = "6:a";
                else if (strType == "442")
                    strColumnSortStyle = "0:a";
                else if (strType == "443")
                    strColumnSortStyle = "0:a";
            }

            tableDepartment.Sort(SortColumnCollection.NormalToTable(strColumnSortStyle));

            macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
        }

		        int CreateWorkerReport(
            string strLibraryCode,
            string strDateRange,
            string strStyle,
            string strParameters,
            ref Table table,
            out string strError)
        {
            strError = "";

            string strStartDate = "";
            string strEndDate = "";

            try
            {
                // 将日期字符串解析为起止范围日期
                // throw:
                //      Exception
                DateTimeUtil.ParseDateRange(strDateRange,
                    out strStartDate,
                    out strEndDate);

                if (string.IsNullOrEmpty(strEndDate) == true)
                    strEndDate = strStartDate;
            }
            catch (Exception ex)
            {
                strError = "日期范围字符串 '" + strDateRange + "' 格式不正确";
                return -1;
            }

            if (table == null)
                table = new Table(3);

            string strCommand = "";

            int nNumber = GetStyleNumber(strStyle);

            if (nNumber == 421)
            {
                // 421 表，编目流水
                strCommand = "select operlogbiblio.action, operlogbiblio.bibliorecpath, biblio.summary, operlogbiblio.opertime, operlogbiblio.operator "  // 
                     + " FROM operlogbiblio  "
                     + " left outer JOIN biblio ON operlogbiblio.bibliorecpath = biblio.bibliorecpath "
                     + " left outer JOIN user ON operlogbiblio.operator = user.id "
                     + " WHERE "
                     + "     operlogbiblio.date >= '" + strStartDate + "' AND operlogbiblio.date <= '" + strEndDate + "' "
                     + "     AND user.librarycodelist like '%," + strLibraryCode + ",%' "
                     + " ORDER BY operlogbiblio.opertime ;";
            }
            else if (nNumber == 422)
            {
                // 422 表，每个工作人员编目各类工作量
                strCommand = "select operlogbiblio.operator,  "  // 
                    + "  count(case operlogbiblio.action when 'new' then operlogbiblio.action end) as new, "
                    + "  count(case operlogbiblio.action when 'change' then operlogbiblio.action end) as change, "
                    + "  count(case operlogbiblio.action when 'delete' then operlogbiblio.action when 'onlydeletebiblio' then 'delete' end) as del, "
                    + "  count(case operlogbiblio.action when 'copy' then operlogbiblio.action when 'onlycopybiblio' then 'copy' end) as copy, "
                    + "  count(case operlogbiblio.action when 'move' then operlogbiblio.action when 'onlymovebiblio' then 'move' end) as move, "
                    + "  count(*) as total "
                     + " FROM operlogbiblio "
                     + " left outer JOIN user ON operlogbiblio.operator = user.id "
                     + " WHERE "
                     + "     operlogbiblio.date >= '" + strStartDate + "' AND operlogbiblio.date <= '" + strEndDate + "' "
                     + "     AND user.librarycodelist like '%," + strLibraryCode + ",%' "
                     + " GROUP BY operlogbiblio.operator ;";
                ;
            }
            else if (nNumber == 411
                || nNumber == 431
                || nNumber == 451)
            {
                // 411 表，订购流水
                // 431 表，册登记流水
                // 451 表，期登记流水

                string strTableName = "";
                if (nNumber == 411)
                    strTableName = "operlogorder";
                else if (nNumber == 431)
                    strTableName = "operlogitem";
                else if (nNumber == 451)
                    strTableName = "operlogissue";

                strCommand = "select " + strTableName + ".action, " + strTableName + ".bibliorecpath, biblio.summary, " + strTableName + ".itemrecpath, " + strTableName + ".opertime, " + strTableName + ".operator "  // 
                     + " FROM " + strTableName + "  "
                     + " left outer JOIN biblio ON " + strTableName + ".bibliorecpath = biblio.bibliorecpath "
                     + " left outer JOIN user ON " + strTableName + ".operator = user.id "
                     + " WHERE "
                     + "     " + strTableName + ".date >= '" + strStartDate + "' AND " + strTableName + ".date <= '" + strEndDate + "' "
                     + "     AND user.librarycodelist like '%," + strLibraryCode + ",%' "
                     + " ORDER BY " + strTableName + ".opertime ;";
            }
            else if (nNumber == 412
                || nNumber == 432
                || nNumber == 452)
            {
                // 412 表，每个工作人员订购各类工作量
                // 432 表，每个工作人员册登记各类工作量
                // 452 表，每个工作人员期登记各类工作量

                string strTableName = "";
                if (nNumber == 412)
                    strTableName = "operlogorder";
                else if (nNumber == 432)
                    strTableName = "operlogitem";
                else if (nNumber == 452)
                    strTableName = "operlogissue";

                strCommand = "select " + strTableName + ".operator,  "  // 
                    + "  count(case " + strTableName + ".action when 'new' then " + strTableName + ".action end) as new, "
                    + "  count(case " + strTableName + ".action when 'change' then " + strTableName + ".action end) as change, "
                    + "  count(case " + strTableName + ".action when 'delete' then " + strTableName + ".action end) as del, "
                    + "  count(case " + strTableName + ".action when 'copy' then " + strTableName + ".action end) as copy, "
                    + "  count(case " + strTableName + ".action when 'move' then " + strTableName + ".action end) as move, "
                    + "  count(*) as total "
                     + " FROM " + strTableName + " "
                     + " left outer JOIN user ON " + strTableName + ".operator = user.id "
                     + " WHERE "
                     + "     " + strTableName + ".date >= '" + strStartDate + "' AND " + strTableName + ".date <= '" + strEndDate + "' "
                     + "     AND user.librarycodelist like '%," + strLibraryCode + ",%' "
                     + " GROUP BY " + strTableName + ".operator ;";
            }
            else if (nNumber == 441)
            {
                // 441 表，出纳流水
                strCommand = "select operlogcircu.readerbarcode, reader.name, operlogcircu.action, operlogcircu.itembarcode, biblio.summary,  operlogcircu.opertime , operlogcircu.operator "  // 
                     + " FROM operlogcircu left outer JOIN item ON operlogcircu.itembarcode = item.itembarcode "
                     + " left outer JOIN biblio ON item.bibliorecpath = biblio.bibliorecpath "
                     + " left outer JOIN reader ON operlogcircu.readerbarcode = reader.readerbarcode "
                     + " WHERE "
                     + "     operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' "
                     + " ORDER BY operlogcircu.opertime ;";
            }
            else if (nNumber == 442)
            {
                // 442 表，每个工作人员各类工作量
                strCommand = "select operlogcircu.operator,  "  // 
                    + "  count(case operlogcircu.action when 'borrow' then operlogcircu.action end) as borrow, "
                    + "  count(case operlogcircu.action when 'renew' then operlogcircu.action end) as renew, "
                    + "  count(case operlogcircu.action when 'return' then operlogcircu.action end) as return, "
                    + "  count(case operlogcircu.action when 'lost' then operlogcircu.action end) as lost, "
                    + "  count(*) as total "
                     + " FROM operlogcircu "
                     + " left outer JOIN reader ON operlogcircu.readerbarcode = reader.readerbarcode "
                     + " WHERE "
                     + "     operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' "
                     + " GROUP BY operlogcircu.operator ;";
            }
            else if (nNumber == 443)
            {
                // 443 表，每个馆藏地点各类工作量
                strCommand = "select item.location,  "  // 
                    + "  count(case operlogcircu.action when 'borrow' then operlogcircu.action end) as borrow, "
                    + "  count(case operlogcircu.action when 'renew' then operlogcircu.action end) as renew, "
                    + "  count(case operlogcircu.action when 'return' then operlogcircu.action end) as return, "
                    + "  count(case operlogcircu.action when 'lost' then operlogcircu.action end) as lost, "
                    + "  count(*) as total "
                     + " FROM operlogcircu "
                     + " left outer JOIN reader ON operlogcircu.readerbarcode = reader.readerbarcode "
                     + " left outer JOIN item ON operlogcircu.itembarcode = item.itembarcode "
                     + " WHERE "
                     + "     operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' "
                     + " GROUP BY item.location ;";
            }
            else
            {
                strError = "CreateWorkerReport() 中 strStyle=" + strStyle + " 没有分支处理";
                return -1;
            }

            Debug.Assert(string.IsNullOrEmpty(strCommand) == false, "");

            this._connectionString = GetOperlogConnectionString();  //  SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

            using (SQLiteConnection connection = new SQLiteConnection(this._connectionString))
            {
                connection.Open();

                using (SQLiteCommand command = new SQLiteCommand(strCommand,
    connection))
                {

                    try
                    {
                        SQLiteDataReader dr = command.ExecuteReader(CommandBehavior.SingleResult);
                        try
                        {
                            // 如果记录不存在
                            if (dr == null
                                || dr.HasRows == false)
                                return 0;

                            int no = 0;
                            // 如果记录已经存在
                            while (dr.Read())
                            {
                                if (nNumber == 421)
                                {
                                    // 序号
                                    string strKey = (no + 1).ToString();

                                    // 操作
                                    table.SetValue(strKey, 0, GetString(dr, 0));

                                    // 书目记录路径
                                    table.SetValue(strKey, 1, GetString(dr, 1));

                                    // 摘要
                                    table.SetValue(strKey, 2, GetString(dr, 2));

                                    // 操作时间
                                    table.SetValue(strKey, 3, GetString(dr, 3));

                                    // 操作者
                                    table.SetValue(strKey, 4, GetString(dr, 4));

                                }
                                else if (nNumber == 412
                                    || nNumber == 422
                                    || nNumber == 432
                                    || nNumber == 452)
                                {
                                    string strOperator = GetString(dr, 0);
                                    // new
                                    table.SetValue(strOperator, 0, dr.GetInt64(1));
                                    // change
                                    table.SetValue(strOperator, 1, dr.GetInt64(2));
                                    // delete
                                    table.SetValue(strOperator, 2, dr.GetInt64(3));
                                    // copy
                                    table.SetValue(strOperator, 3, dr.GetInt64(4));
                                    // move
                                    table.SetValue(strOperator, 4, dr.GetInt64(5));
                                    // total
                                    table.SetValue(strOperator, 5, dr.GetInt64(6));
                                }
                                else if (nNumber == 411
                                    || nNumber == 431
                                    || nNumber == 451)
                                {
                                    // 序号
                                    string strKey = (no + 1).ToString();

                                    // 操作
                                    table.SetValue(strKey, 0, GetString(dr, 0));

                                    // 书目记录路径
                                    table.SetValue(strKey, 1, GetString(dr, 1));

                                    // 摘要
                                    table.SetValue(strKey, 2, GetString(dr, 2));

                                    // 册记录路径
                                    table.SetValue(strKey, 3, GetString(dr, 3));

                                    // 操作时间
                                    table.SetValue(strKey, 4, GetString(dr, 4));

                                    // 操作者
                                    table.SetValue(strKey, 5, GetString(dr, 5));

                                }
                                else if (nNumber == 441)
                                {
                                    // 序号
                                    string strKey = (no + 1).ToString();

                                    // 读者证条码号
                                    table.SetValue(strKey, 0, GetString(dr, 0));

                                    // 读者姓名
                                    table.SetValue(strKey, 1, GetString(dr, 1));

                                    // 操作
                                    table.SetValue(strKey, 2, GetString(dr, 2));

                                    // 册条码号
                                    table.SetValue(strKey, 3, GetString(dr, 3));

                                    // 摘要
                                    table.SetValue(strKey, 4, GetString(dr, 4));

                                    // 操作时间
                                    table.SetValue(strKey, 5, GetString(dr, 5));

                                    // 操作者
                                    table.SetValue(strKey, 6, GetString(dr, 6));

                                }
                                else if (nNumber == 442)
                                {
                                    string strOperator = GetString(dr, 0);
                                    // borrow
                                    table.SetValue(strOperator, 0, dr.GetInt64(1));
                                    // renew
                                    table.SetValue(strOperator, 1, dr.GetInt64(2));
                                    // return
                                    table.SetValue(strOperator, 2, dr.GetInt64(3));
                                    // lost
                                    table.SetValue(strOperator, 3, dr.GetInt64(4));
                                    // total
                                    table.SetValue(strOperator, 4, dr.GetInt64(5));

                                }
                                no++;
                            }
                        }
                        finally
                        {
                            dr.Close();
                        }
                    }
                    catch (SQLiteException ex)
                    {
                        strError = "执行 SQL 语句发生错误: " + ex.Message + "\r\nSQL 语句: " + strCommand;
                        return -1;
                    }
                } // end of using command
            }

            return 0;
        }


		        // 按照自然的单位名称列表，列出借书册数
        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_101_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            // macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            ReportWriter writer = null;
            int nRet = GetReportWriter(strCfgFile,
                out writer,
                out strError);
            if (nRet == -1)
                return -1;

            List<string> commands = new List<string>();

            string strCommand = "";
            nRet = CreateReaderReportCommand(
                strLibraryCode,
                strDateRange,
                "101",
                "",
                out strCommand,
                out strError);
            if (nRet == -1)
                return -1;
            commands.Add(strCommand);

            return RunQuery(
    commands,
writer,
strOutputFileName,
macro_table,
out strError);

#if NO
            return CreateReaderReport(
                strLibraryCode,
                strDateRange,
                "101",
                "",
    writer,
    strOutputFileName,
    macro_table, 
    out strError);
#endif

#if NO
            if (nRet == -1)
                return -1;
            string strColumnSortStyle = GetColumnSortStyle(strCfgFile);
            if (string.IsNullOrEmpty(strColumnSortStyle) == true)
                strColumnSortStyle = "0:d";
            else
                strColumnSortStyle = SortColumnCollection.NormalToTable(strColumnSortStyle);

            tableDepartment.Sort(strColumnSortStyle);   // "0:d"



            return OutputRmlReport(
                tableDepartment,
                strCfgFile,
                macro_table,
                strOutputFileName,
                out strError);
#endif
        }


		        // 按照自然的单位名称列表，列出借书册数
        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_111_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            // macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            ReportWriter writer = null;
            int nRet = GetReportWriter(strCfgFile,
                out writer,
                out strError);
            if (nRet == -1)
                return -1;

            List<string> commands = new List<string>();
            string strCommand = "";
            nRet = CreateReaderReportCommand(
                strLibraryCode,
                strDateRange,
                "111",
                "",
                out strCommand,
                out strError);
            if (nRet == -1)
                return -1;
            commands.Add(strCommand);

            return RunQuery(
    commands,
writer,
strOutputFileName,
macro_table,
out strError);
        }

		                else if (strReportType == "141")
                {
                    nRet = Create_141_report(strLibraryCode,
                        time.Time,
                        strCfgFile,
                        macro_table,
                        strOutputFileName,
                        out strError);
                    if (nRet == -1)
                        return -1;
                    if (nRet == 0)
                        nAdd = -1;
                    else if (nRet == 1)
                        nAdd = 1;
                }


				        // 按照自然的单位名称列表，列出借书册数
        // return:
        //      -1  出错
        //      0   没有创建文件(因为输出的表格为空)
        //      1   成功创建文件
        int Create_141_report(string strLibraryCode,
            string strDateRange,
            string strCfgFile,
            Hashtable macro_table,
            string strOutputFileName,
            out string strError)
        {
            strError = "";

            // macro_table["%linecount%"] = tableDepartment.Count.ToString();
            macro_table["%daterange%"] = strDateRange;

            ReportWriter writer = null;
            int nRet = GetReportWriter(strCfgFile,
                out writer,
                out strError);
            if (nRet == -1)
                return -1;

            List<string> commands = new List<string>();

            string strCommand = "";
            nRet = CreateReaderReportCommand(
                strLibraryCode,
                strDateRange,
                "141",
                "",
                out strCommand,
                out strError);
            if (nRet == -1)
                return -1;
            commands.Add(strCommand);

            return RunQuery(
    commands,
writer,
strOutputFileName,
macro_table,
out strError);
        }


		
        // 创建读者报表，关于流通业务
        // 1) 按照读者自然单位分类的借书册数表 101
        // 2) 按照指定的单位分类的借书册数表 102
        // 3) 按照读者类型分类的借书册数表 111
        // 4) 按照读者姓名分类的借书册数表 121
        // 6) 每个读者的借阅清单 131
        int CreateReaderReport(
            string strLibraryCode,
            string strDateRange,
            string strStyle,
            string strParameters,
            ref Table table,
            out string strError)
        {
            strError = "";

            string strStartDate = "";
            string strEndDate = "";

            try
            {
                // 将日期字符串解析为起止范围日期
                // throw:
                //      Exception
                DateTimeUtil.ParseDateRange(strDateRange,
                    out strStartDate,
                    out strEndDate);

                // 2014/3/19
                if (string.IsNullOrEmpty(strEndDate) == true)
                    strEndDate = strStartDate;
            }
            catch (Exception ex)
            {
                strError = "日期范围字符串 '"+strDateRange+"' 格式不正确";
                return -1;
            }

            if (table == null)
                table = new Table(3);

            string strCommand = "";

            int nNumber = 0;

            if (StringUtil.IsInList("101", strStyle) == true)
            {
                // 101 表 按照读者 *自然单位* 分类的借书册数表
                strCommand = "select reader.department, count(*) as count "
                     + " FROM operlogcircu left outer JOIN reader ON operlogcircu.readerbarcode <> '' AND operlogcircu.readerbarcode = reader.readerbarcode "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' "
                     + " GROUP BY reader.department ;";
            }
            else if (StringUtil.IsInList("102", strStyle) == true)
            {
                // 102 表 按照 *指定的单位* 分类的借书册数表
                // 这里每次只能获得一个单位的一行数据。需要按照不同单位 (strParameters) 多次循环调用本函数
                strCommand = "select '"+strParameters+"' as department, count(*) as count "
                     + " FROM operlogcircu JOIN reader ON operlogcircu.readerbarcode <> '' AND operlogcircu.readerbarcode = reader.readerbarcode "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' AND reader.department like '" + strParameters + "' "
                     + " ;";
            }
            else if (StringUtil.IsInList("111", strStyle) == true)
            {
                // 111 表 按照读者 *自然类型* 分类的借书册数表
                strCommand = "select reader.readertype, count(*) as count "
                     + " FROM operlogcircu JOIN reader ON operlogcircu.readerbarcode <> '' AND operlogcircu.readerbarcode = reader.readerbarcode "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' "
                     + " GROUP BY reader.readertype ;";
            }
            else if (StringUtil.IsInList("121", strStyle) == true)
            {
                // 121 表 按照读者 *姓名* 分类的借书册数表
                strCommand = "select operlogcircu.readerbarcode, reader.name, reader.department, count(*) as count "
                     + " FROM operlogcircu JOIN reader ON operlogcircu.readerbarcode <> '' AND operlogcircu.readerbarcode = reader.readerbarcode "
                     + " WHERE operlogcircu.operation = 'borrow' and operlogcircu.action = 'borrow' "
                     + "     AND operlogcircu.date >= '" + strStartDate + "' AND operlogcircu.date <= '" + strEndDate + "' "
                     + "     AND reader.librarycode = '" + strLibraryCode + "' "
                     + " GROUP BY operlogcircu.readerbarcode ;";

                nNumber = 121;
            }

            else if (StringUtil.IsInList("131", strStyle) == true)
            {
                // 131 表 每个读者的借阅清单
                strCommand = "select oper1.itembarcode, biblio.summary, oper1.opertime as 'borrowtime', oper2.opertime as 'returntime' from operlogcircu as oper1 "
                        + " left join operlogcircu as oper2 on oper2.itembarcode <> '' AND oper1.itembarcode = oper2.itembarcode and oper2.readerbarcode <> '' AND oper1.readerbarcode = oper2.readerbarcode and oper2.operation = 'return' and oper1.opertime <= oper2.opertime  "
                        + " left JOIN item ON oper1.itembarcode <> '' AND oper1.itembarcode = item.itembarcode "
                        + " left JOIN biblio ON item.bibliorecpath <> '' AND biblio.bibliorecpath = item.bibliorecpath "
                        + " where oper1.operation = 'borrow' and oper1.action = 'borrow' "
                        + "     AND oper1.date >= '" + strStartDate + "' AND oper1.date <= '" + strEndDate + "' "
                        + "     AND oper1.readerbarcode = '" + strParameters + "' "
                        + " group by oper1.readerbarcode, oper1.itembarcode, oper1.opertime order by oper1.readerbarcode, oper1.opertime ; ";

                nNumber = 131;
            }

            this._connectionString = GetOperlogConnectionString();  //  SQLiteUtil.GetConnectionString(this.MainForm.UserDir, "operlog.bin");

            using (SQLiteConnection connection = new SQLiteConnection(this._connectionString))
            {
                connection.Open();

                using (SQLiteCommand command = new SQLiteCommand(strCommand,
    connection))
                {

                    try
                    {
                        SQLiteDataReader dr = command.ExecuteReader(CommandBehavior.SingleResult);
                        try
                        {
                            // 如果记录不存在
                            if (dr == null
                                || dr.HasRows == false)
                                return 0;

                            // 如果记录已经存在
                            while (dr.Read())
                            {
                                string strKey = GetString(dr, 0);
                                if (nNumber == 121)
                                {
                                    // 证条码号
                                    table.SetValue(strKey, 0, GetString(dr, 1));
                                    // 单位
                                    table.SetValue(strKey, 1, GetString(dr, 2));
                                    // 册数
                                    table.SetValue(strKey, 2, dr.GetInt32(3));
                                }
                                else if (nNumber == 131)
                                {
                                    // 册条码号 摘要
                                    table.SetValue(strKey, 0, GetString(dr, 1));
                                    // 借阅时间
                                    table.SetValue(strKey, 1, GetString(dr, 2));
                                    // 还书时间
                                    table.SetValue(strKey, 2, GetString(dr, 3));
                                }
                                else
                                    table.SetValue(strKey, 0, dr.GetInt32(1));
                            }
                        }
                        finally
                        {
                            dr.Close();
                        }
                    }
                    catch (SQLiteException ex)
                    {
                        strError = "执行SQL语句发生错误: " + ex.Message + "\r\nSQL 语句: " + strCommand;
                        return -1;
                    }
                } // end of using command
            }

            return 0;
        }


		~~~

		        void SearchLines(List<RegisterLine> lines)
        {
            string strError = "";
            int nRet = 0;

            this.Progress.OnStop += new StopEventHandler(this.DoStop);
            // this.Progress.Initial("进行一轮任务处理...");
            this.Progress.BeginLoop();
            try
            {

                foreach (RegisterLine line in lines)
                {
                    // DoTasks();

                    string strQueryWord = line.BiblioBarcode;

                    string strFromStyle = "";

                    try
                    {
                        strFromStyle = this.MainForm.GetBiblioFromStyle("ISBN");
                    }
                    catch (Exception ex)
                    {
                        strError = ex.Message;
                        goto ERROR1;
                    }

                    if (String.IsNullOrEmpty(strFromStyle) == true)
                    {
                        strError = "GetFromStyle()没有找到 '" + "ISBN" + "' 对应的style字符串";
                        goto ERROR1;
                    }

                    string strMatchStyle = "left";  // BiblioSearchForm.GetCurrentMatchStyle(this.comboBox_matchStyle.Text);
                    if (string.IsNullOrEmpty(strQueryWord) == true)
                    {
                        if (strMatchStyle == "null")
                        {
                            strQueryWord = "";

                            // 专门检索空值
                            strMatchStyle = "exact";
                        }
                        else
                        {
                            // 为了在检索词为空的时候，检索出全部的记录
                            strMatchStyle = "left";
                        }
                    }
                    else
                    {
                        if (strMatchStyle == "null")
                        {
                            strError = "检索空值的时候，请保持检索词为空";
                            goto ERROR1;
                        }
                    }

                    line.SetBiblioSearchState("searching");

                    string strQueryXml = "";
                    long lRet = Channel.SearchBiblio(Progress,
                        this.GetBiblioDbNames(),    // "<全部>",
                        strQueryWord,   // this.textBox_queryWord.Text,
                        1000,
                        strFromStyle,
                        strMatchStyle,
                        this.Lang,
                        null,   // strResultSetName
                        "",    // strSearchStyle
                        "", // strOutputStyle
                        out strQueryXml,
                        out strError);
                    if (lRet == -1)
                    {
                        goto ERROR1;
                    }

                    // 如果命中唯一一条，则可以立即装入
                    nRet = LoadBiblioSubItems(line, out strError);
                    if (nRet == -1)
                        goto ERROR1;

                    line.SetBiblioSearchState(lRet.ToString());

                    // 装入浏览格式
                    long lHitCount = lRet;

                    long lStart = 0;
                    long lCount = lHitCount;
                    DigitalPlatform.CirculationClient.localhost.Record[] searchresults = null;

                    string strStyle = "id";

                    List<string> biblio_recpaths = new List<string>();
                    // 装入浏览格式
                    for (; ; )
                    {
                        if (this.Progress != null && this.Progress.State != 0)
                        {
                            break;
                        }
                        // DoTasks();

                        lRet = this.Channel.GetSearchResult(
                            this.Progress,
                            null,   // strResultSetName
                            lStart,
                            lCount,
                            strStyle, // bOutputKeyCount == true ? "keycount" : "id,cols",
                            this.Lang,
                            out searchresults,
                            out strError);
                        if (lRet == -1)
                        {
                            strError = "检索共命中 " + lHitCount.ToString() + " 条，已装入 " + lStart.ToString() + " 条，" + strError;
                            goto ERROR1;
                        }

                        if (lRet == 0)
                            break;

                        // 处理浏览结果

                        foreach (DigitalPlatform.CirculationClient.localhost.Record searchresult in searchresults)
                        {
                            biblio_recpaths.Add(searchresult.Path);
                        }

                        {
                            // 获得书目摘要
                            BiblioLoader loader = new BiblioLoader();
                            loader.Channel = this.Channel;
                            loader.Stop = this.Progress;
                            loader.Format = "xml";
                            loader.GetBiblioInfoStyle = GetBiblioInfoStyle.None;
                            loader.RecPaths = biblio_recpaths;

                            try
                            {
                                int i = 0;
                                foreach (BiblioItem item in loader)
                                {
                                    string strXml = item.Content;

                                    string strMARC = "";
                                    string strMarcSyntax = "";
                                    // 将XML格式转换为MARC格式
                                    // 自动从数据记录中获得MARC语法
                                    nRet = MarcUtil.Xml2Marc(strXml,    // info.OldXml,
                                        true,
                                        null,
                                        out strMarcSyntax,
                                        out strMARC,
                                        out strError);
                                    if (nRet == -1)
                                    {
                                        strError = "XML转换到MARC记录时出错: " + strError;
                                        goto ERROR1;
                                    }

                                    string strBrowseText = "";
                                    nRet = BuildMarcBrowseText(
                                        strMarcSyntax,
                                        strMARC,
                                        out strBrowseText,
                                        out strError);
                                    if (nRet == -1)
                                    {
                                        strError = "MARC记录转换到浏览格式时出错: " + strError;
                                        goto ERROR1;
                                    }

                                    BiblioInfo info = new BiblioInfo();
                                    info.OldXml = strMARC;
                                    info.Timestamp = item.Timestamp;
                                    info.RecPath = item.RecPath;
                                    line.AddBiblioBrowseLine(item.RecPath,
                                        strBrowseText,
                                        info);
                                    i++;
                                }
                            }
                            catch (Exception ex)
                            {
                                strError = ex.Message;
                                goto ERROR1;
                            }


                            // lIndex += biblio_recpaths.Count;
                            biblio_recpaths.Clear();
                        }

                        lStart += searchresults.Length;
                        lCount -= searchresults.Length;

                        if (lStart >= lHitCount || lCount <= 0)
                            break;
                    }

                    line._biblioRegister.DisplayMode = "select";

                    continue;
                ERROR1:
                    line._biblioRegister.DisplayMode = "summary";
                    line.SetBiblioSearchState("error");
                    line.BiblioSummary = strError;
                    continue;
                }
            }
            finally
            {
                this.Progress.EndLoop();
                this.Progress.OnStop -= new StopEventHandler(this.DoStop);
                // this.Progress.Initial("");
            }
        }




		~~~~~~~~~~~~
		getsummary.js

		/* last-modified: 2011-12-6 */

$(document).ready(function () {
    if (window.external == null) {
        alert("window没有联接external");
        return;
    }
    var external = window.external;
    external.IsInLoop = true;
    GetSummary();
});

function GetSummary() {

    if (window.external == null) {
        alert("window没有联接external");
        return;
    }

    try {
        var external = window.external;

        if (external.IsInLoop == false)
            return;


        var oo = $(".pending:first");
        if (oo.length == 0) {
            return;
        }

        o = oo[0];


        var path = o.innerText;

        o.innerHTML = "<img src='./servermapped/images/ajax-loader.gif'></img>";

        var prefix = "";
        var nRet = path.indexOf(":");
        if (nRet != -1) {
            prefix = path.substring(0, nRet);
            path = path.substr(nRet + 1);
        }

        try {
            if (prefix == "P")
                o.innerHTML = external.GetPatronSummary(path);
            else
                o.innerHTML = /*path + "||" + */"<div class='wide'><div>" + external.GetSummary(path, false);
        }
        catch (e) {
            o.innerHTML = path + "||######" + e;
        }

        oo.removeClass("pending");
        window.setTimeout("GetSummary()", 100);
    }
    catch (e) {

    }

}



    /// <summary>
    /// ISBN号分析器，帮助插入'-'
    /// </summary>
    public class IsbnSplitter
    {
        XmlDocument dom = null;

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="strIsbnFileName">ISBN 定义文件。XML 格式</param>
        public IsbnSplitter(string strIsbnFileName)
        {
            dom = new XmlDocument();
            dom.Load(strIsbnFileName);
        }

        static bool InRange(string strValue,
            string strStart,
            string strEnd)
        {
            if (String.Compare(strValue, strStart) < 0)
                return false;
            if (String.Compare(strValue, strEnd) > 0)
                return false;

            return true;
        }

        static bool IsNumber(string strText)
        {
            for (int i = 0; i < strText.Length; i++)
            {
                if (strText[0] < '0' || strText[0] > '9')
                    return false;
            }

            return true;
        }


        /// <summary>
        ///  校验 ISBN 第一部分是否正确
        /// </summary>
        /// <param name="strFirstPart">ISBN 的第一部分</param>
        /// <param name="strError">返回出错信息</param>
        /// <returns>-1: 错误; 0: 正确</returns>
        public static int VerifyIsbnFirstPart(string strFirstPart,
                        out string strError)
        {
            strError = "";

            if (IsNumber(strFirstPart) == false)
            {
                strError = "ISBN第一部分应当为纯数字";
                goto WRONG;
            }


            if (String.IsNullOrEmpty(strFirstPart) == true)
            {
                strError = "ISBN第一部分字符数不能为0";
                goto WRONG;
            }
            if (strFirstPart.Length == 1)
            {
                if (InRange(strFirstPart, "0", "7") == true)
                    goto CORRECT;
                else
                {
                    strError = "如果ISBN第一部分('" + strFirstPart + "')为1字符，其取值范围应当为 0-7";
                    goto WRONG;
                }
            }
            else if (strFirstPart.Length == 2)
            {
                if (InRange(strFirstPart, "80", "94") == true)
                    goto CORRECT;
                else
                {
                    strError = "如果ISBN第一部分('"
                        + strFirstPart + "')为2字符，其取值范围应当为 80-94";
                    goto WRONG;
                }
            }

            else if (strFirstPart.Length == 3)
            {
                if (InRange(strFirstPart, "950", "994") == true)
                    goto CORRECT;
                else
                {
                    strError = "如果ISBN第一部分('" + strFirstPart + "')为3字符，其取值范围应当为 950-994";
                    goto WRONG;
                }
            }

            else if (strFirstPart.Length == 4)
            {
                if (InRange(strFirstPart, "9950", "9989") == true)
                    goto CORRECT;
                else
                {
                    strError = "如果ISBN第一部分('" + strFirstPart + "')为4字符，其取值范围应当为 9950-9989";
                    goto WRONG;
                }
            }

            else if (strFirstPart.Length == 5)
            {
                if (InRange(strFirstPart, "99900", "99999") == true)
                    goto CORRECT;
                else
                {
                    strError = "如果ISBN第一部分('" + strFirstPart + "')为5字符，其取值范围应当为 99900-99999";
                    goto WRONG;
                }
            }

            strError = "ISBN第一部分字符数不能超过5";
        WRONG:
            return -1;
        CORRECT:
            return 0;
        }

        // return:
        //      -1  出错
        //      0   校验正确
        //      1   校验不正确。提示信息在strError中
        public static int VerifyISBN(string strISBNParam,
            out string strError)
        {
            strError = "";

            if (string.IsNullOrEmpty(strISBNParam) == true)
            {
                strError = "ISBN字符串内容为空";
                return 1;
            }

            string strISBN = strISBNParam.Replace("-", "");
            if (string.IsNullOrEmpty(strISBN) == true)
            {
                strError = "ISBN字符串内容为空";
                return 1;
            }

            if (strISBN.Length != 10 && strISBN.Length != 13)
            {
                strError = "ISBN字符串的长度既不是10位也不是13位";
                return 1;
            }

            if (strISBN.Length == 10)
            {
                char c = GetIsbn10VerifyChar(strISBN);
                if (c != strISBN[9])
                {
                    strError = "ISBN '"+strISBN+"' 校验不正确";
                    return 1;
                }
            }

            if (strISBN.Length == 13)
            {
                char c = GetIsbn13VerifyChar(strISBN);
                if (c != strISBN[12])
                {
                    strError = "ISBN '" + strISBN + "' 校验不正确";
                    return 1;
                }
            }

            return 0;
        }

        /// <summary>
        /// 计算出 ISBN-10 校验位
        /// </summary>
        /// <param name="strISBN">ISBN 字符串</param>
        /// <returns>校验位字符</returns>
        public static char GetIsbn10VerifyChar(string strISBN)
        {
            strISBN = strISBN.Trim();
            strISBN = strISBN.Replace("-", "");
            strISBN = strISBN.Replace(" ", "");


            if (strISBN.Length < 9)
                throw new Exception("用于计算校验位的ISBN-10长度至少要在9位数字以上(不包括横杠在内)");

            int sum = 0;
            for (int i = 0; i < 9; i++)
            {
                sum += (strISBN[i] - '0') * (i + 1);
            }
            int v = sum % 11;

            if (v == 10)
                return 'X';

            return (char)('0' + v);
        }

        /// <summary>
        /// 计算出 ISBN-13 校验位
        /// </summary>
        /// <param name="strISBN">ISBN 字符串</param>
        /// <returns>校验位字符</returns>
        public static char GetIsbn13VerifyChar(string strISBN)
        {
            strISBN = strISBN.Trim();
            strISBN = strISBN.Replace("-", "");
            strISBN = strISBN.Replace(" ", "");


            if (strISBN.Length < 12)
                throw new Exception("用于计算校验位的ISBN-13长度至少要在12位数字以上(不包括横杠在内)");

            int m = 0;
            int sum = 0;
            for (int i = 0; i < 12; i++)
            {
                if ((i % 2) == 0)
                    m = 1;
                else
                    m = 3;

                sum += (strISBN[i] - '0') * m;
            }

            // 注：如果步骤5所得余数为0，则校验码为0。
            if ((sum % 10) == 0)
                return '0';

            int v = 10 - (sum % 10);

            return (char)('0' + v);
        }


        /// <summary>
        /// 在 ISBN 字符串中适当的位置插入'-'符号
        /// 如果提供的ISBN字符串本来就有978前缀，那么结果仍将保留前缀。如果本来就没有，结果里面也没有。
        /// </summary>
        /// <param name="strISBN">ISBN 字符串</param>
        /// <param name="strStyle">处理风格。force10/force13/auto/remainverifychar/strict</param>
        /// <param name="strTarget">返回处理结果</param>
        /// <param name="strError">返回出错信息</param>
        /// <returns>-1:出错; 0:未修改校验位; 1:修改了校验位</returns>
        public int IsbnInsertHyphen(
            string strISBN,
            string strStyle,
            out string strTarget,
            out string strError)
        {
            strTarget = "";
            strError = "";

            string strSource;
            int nFirstLen;
            int nSecondLen;

            // Debug.Assert(false, "");

            strSource = strISBN;
            strSource = strSource.Trim();

            bool bHasRemovePrefix978 = false; // 是否有978前缀

            bool bForce10 = StringUtil.IsInList("force10", strStyle);
            bool bForce13 = StringUtil.IsInList("force13", strStyle);
            bool bAuto = StringUtil.IsInList("auto", strStyle);
            bool bRemainVerifyChar = StringUtil.IsInList("remainverifychar", strStyle); // 是否不要重新计算校验位
            bool bStrict = StringUtil.IsInList("strict", strStyle); // 是否严格要求strISBN输入参数为10或13位

            int nCount = 0;
            if (bForce10 == true)
                nCount++;
            if (bForce13 == true)
                nCount++;
            if (bAuto == true)
                nCount++;

            if (nCount > 1)
            {
                strError = "strStyle值 '"+strStyle+"' 中的force10/force13/auto 3种风格是互相排斥，不能同时具备。";
                return -1;
            }

            strSource = strSource.Replace("-", "");
            strSource = strSource.Replace(" ", "");

            bool bAdjustLength = false; // 是否调整过输入的strISBN的长度

            if (bStrict == false)
            {
                if (strSource.Length == 9)
                {
                    strSource += '0';
                    bRemainVerifyChar = false;  // 必须要重新计算校验位了
                    bAdjustLength = true;
                }
                else if (strSource.Length == 12)
                {
                    strSource += '0';
                    bRemainVerifyChar = false;  // 必须要重新计算校验位了
                    bAdjustLength = true;
                }
            }

            // 13位、无-、前缀为978
            if (strSource.Length == 13
                && strSource.IndexOf("-") == -1
                && (strSource.Substring(0, 3) == "978" || strSource.Substring(0, 3) == "979")
                )
            {
                strSource = strSource.Substring(3, 10); // 丢弃前3位，但不丢弃校验位

                bHasRemovePrefix978 = true;
            }

            if (strSource.Length != 10
                && strSource.Length != 13)
            {
                strError = "ISBN中(除'-'以外)应为10位或13位有效字符(" + strSource + " " + Convert.ToString(strSource.Length) + ")";
                return -1;
            }

            // 观察第一部分
            string strFirstPart = strSource.Substring(0, 1);
            if (InRange(strFirstPart, "0", "7") == true)
            {
                nFirstLen = 1;
                goto DOSECOND;
            }

            strFirstPart = strSource.Substring(0, 2);
            if (InRange(strFirstPart, "80", "94") == true)
            {
                nFirstLen = 2;
                goto DOSECOND;
            }

            strFirstPart = strSource.Substring(0, 3);
            if (InRange(strFirstPart, "950", "994") == true)
            {
                nFirstLen = 3;
                goto DOSECOND;
            }

            strFirstPart = strSource.Substring(0, 4);
            if (InRange(strFirstPart, "9950", "9989") == true)
            {
                nFirstLen = 4;
                goto DOSECOND;
            }

            strFirstPart = strSource.Substring(0, 5);
            if (InRange(strFirstPart, "99900", "99999") == true)
            {
                nFirstLen = 5;
                goto DOSECOND;
            }

            strError = "第一部分格式错误";    // 是否需要解释一下?
            return -1;

        DOSECOND:

            XmlNodeList nodes = this.dom.DocumentElement.SelectNodes("agency/group[@name='" + strFirstPart + "']/range");
            if (nodes.Count == 0)
            {
                strError = "ISBN数据中没有找到name='" + strFirstPart + "'的<group>元素 ...";
                return -1;
            }



            string strSecondPart = "";

            for (int i = 0; i < nodes.Count; i++)
            {
                XmlNode node = nodes[i];

                string strValue = DomUtil.GetAttr(node, "value").Trim();

                int nRet = strValue.IndexOf('-');
                if (nRet == -1)
                {
                    strError = "数据节点 " + node.OuterXml + "格式错误, value值中无'-'";
                    return -1;
                }

                string strLeft = strValue.Substring(0, nRet).Trim();
                string strRight = strValue.Substring(nRet + 1).Trim();

                if (strLeft.Length != strRight.Length)
                {
                    strError = "数据节点 " + node.OuterXml + "格式错误, value值'" + strValue + "'中两个数字宽度不等。";
                    return -1;
                }

                int nWidth = strLeft.Length;

                if (nWidth == 0)
                    continue;   // 可能数据有错误? 2007/9/14

                if (nWidth != strSecondPart.Length)
                    strSecondPart = strSource.Substring(nFirstLen, nWidth);


                if (InRange(strSecondPart, strLeft, strRight) == true)
                {
                    nSecondLen = nWidth;
                    goto FINISH;
                }

            }

            strError = "第二部分格式错误 nFirstLen=[" + Convert.ToString(nFirstLen);
            return -1;

        FINISH:
            strTarget = strSource;

            strTarget = strTarget.Insert(nFirstLen, "-");
            strTarget = strTarget.Insert(nFirstLen + nSecondLen + 1, "-");
            strTarget = strTarget.Insert(9 + 1 + 1, "-");

            if (bForce13 == true)
            {
                if (strTarget.Length == 13)
                    strTarget = "978-" + strTarget;
            }
            else if (bAuto == true && bHasRemovePrefix978 == true)
            {
                strTarget = "978-" + strTarget;
            }

            bool bVerifyChanged = false;

            // 重新计算校验码
            // 重新添加ISBN-10的校验位。因为条码号中ISBN-13校验位算法不同。
            if (bRemainVerifyChar == false)
            {
                if (strTarget.Length == 13)
                {
                    char old_ver = strTarget[12];
                    strTarget = strTarget.Substring(0, strTarget.Length - 1);
                    char v = GetIsbn10VerifyChar(strTarget);
                    strTarget += new string(v, 1);

                    if (old_ver != v)
                        bVerifyChanged = true;
                }
                else if (strTarget.Length == 17)
                {
                    char old_ver = strTarget[16];

                    strTarget = strTarget.Substring(0, strTarget.Length - 1);
                    char v = GetIsbn13VerifyChar(strTarget);
                    strTarget += new string(v, 1);

                    if (old_ver != v)
                        bVerifyChanged = true;

                }
            }

            if (bHasRemovePrefix978 == true
                && bForce10 == true)
                return 0;   // 移走978后，校验位肯定要发生变化。因此不通知这种变化

            if (bAdjustLength == false
                && bForce13 == true
                && strISBN.Trim().Replace("-", "").Length == 10)
                return 0;   // 加入了前缀后，校验位肯定要发生变化，因此不通知这种变化

            if (bVerifyChanged == true)
                return 1;

            return 0;
        }

        // 将ISBN号字符串变换为图书条码号形态的ISBN字符串
        // 步骤：
        // 1)去掉所有的'-'
        // 2)看是不是有前缀'978'，如果没有，就加上
        // 3)重新计算校验位
        public static string GetISBnBarcode(string strPureISBN)
        {
            string strText = strPureISBN.Replace("-", "");
            if (strText.Length < 3)
                return strText; // error

            string strHead = strPureISBN.Substring(0, 3);

            if (strHead == "978" || strHead == "979")
            {
            }
            else
            {
                strText = "978" + strText;
            }

            try
            {
                char v = GetIsbn13VerifyChar(strText);
                strText = strText.Substring(0, 12);
                strText += v;

                return strText;
            }
            catch
            {
                return strText; // error
            }

        }

        public static bool IsIsbn13(string strSource)
        {
            if (string.IsNullOrEmpty(strSource) == true)
                return false;
            strSource = strSource.Replace("-", "").Trim();
            if (string.IsNullOrEmpty(strSource) == true)
                return false;

            // 13位、无-、前缀为978
            if (strSource.Length == 13
                && strSource.IndexOf("-") == -1
                && ( strSource.Substring(0, 3) == "978" || strSource.Substring(0, 3) == "979")
                )
                return true;

            return false;
        }

        public static string GetPublisherCode(string strSource)
        {
            if (strSource.IndexOf("-") == -1)
            {
                throw new Exception("ISBN '" + strSource + "' 中没有符号'-'，无法取出版社号码部分。请先为ISBN加上'-'");
            }

            string[] parts = strSource.Split(new char[] { '-' });
            if (IsIsbn13(strSource) == true)
            {
                if (parts.Length >= 3)
                    return parts[2].Trim();
            }
            else
            {
                if (parts.Length >= 2)
                    return parts[1].Trim();
            }

            throw new Exception("ISBN '" + strSource + "' 格式不正确，符号'-'数目不足");
        }
    }


	#if NO
        /// <summary>
        /// 窗口缺省过程函数
        /// </summary>
        /// <param name="m">消息</param>
        protected override void DefWndProc(ref Message m)
        {
            switch (m.Msg)
            {
#if NO
                case API.WM_DEVICECHANGE:
                    if (m.WParam.ToInt32() == API.DBT_DEVNODES_CHANGED)
                    {
                        _RefreshCameraDevList d = new _RefreshCameraDevList(RefreshCameraDevList);
                        this.BeginInvoke(d);
                    }
                    break;
#endif
                // wparam == 1，表示进行全功能的初始化；否则仅仅是初始化名字部分
                case WM_PREPARE:

#if NOOOOOOOOOOOOOOO
                case WM_REFRESH_MDICLIENT:
                    {
                        this.MdiClient.Invalidate();
                        this.MdiClient.Update();

                        // TODO: Invalidate 全部打开的MDI子窗口
                        for (int i = 0; i < this.MdiChildren.Length; i++)
                        {
                            Global.InvalidateAllControls(this.MdiChildren[i]);
                        }
                    }
                    return;
#endif
                    // break;

            }
            base.DefWndProc(ref m);
        }

#endif


#if NO
        private void ChangeTabColor(Object sender, DrawItemEventArgs e)
        {
            TabControl tab = sender as TabControl;
            Font TabFont;
            Brush BackBrush;// = new SolidBrush(Color.Green); //Set background color
            Brush ForeBrush = new SolidBrush(Color.Black);//Set foreground color
            Brush borderBrush = new SolidBrush(Color.Black);//Set foreground color

            if (e.Index == tab.SelectedIndex)
            {
                TabFont = new Font(e.Font, FontStyle.Bold);
                BackBrush = new SolidBrush(Color.MediumSeaGreen); //Set background color
                //ForeBrush = new SolidBrush(Color.Black);//Set foreground color
            }
            else
            {
                TabFont = e.Font;
                BackBrush = new SolidBrush(Color.LightSteelBlue); //Set background color
                //ForeBrush = new SolidBrush(Color.Yellow);//Set foreground color
            }

            string TabName = tab.TabPages[e.Index].Text;
            StringFormat sf = new StringFormat();
            sf.Alignment = StringAlignment.Center;

            Rectangle r = e.Bounds;

            r = new Rectangle(r.X, r.Y + 5, r.Width, r.Height - 3);

            if (e.Index == tab.SelectedIndex)
            {
                Pen rectPen = new Pen(borderBrush, 1.0f);
                r.Y -= 2;
                r.X += 3;
                r.Height -= 9;
                r.Width -= 8;
                e.Graphics.FillRectangle(BackBrush, r);
                e.Graphics.DrawString(TabName, TabFont, ForeBrush, r, sf);
                e.Graphics.DrawRectangle(rectPen, r);
            }
            else
            {
                Pen rectPen = new Pen(borderBrush, 1.0f);
                r.Y -= 2;
                r.Height -= 4;
                r.Width -= 2;
                e.Graphics.FillRectangle(BackBrush, r);
                e.Graphics.DrawString(TabName, TabFont, ForeBrush, r, sf);
                e.Graphics.DrawRectangle(rectPen, r);
            }
            //Dispose objects
            sf.Dispose();

            if (e.Index == tab.SelectedIndex)
            {
                TabFont.Dispose();
                BackBrush.Dispose();
            }
            else
            {
                BackBrush.Dispose();
                ForeBrush.Dispose();
            }
        }

#endif
#if NO
        private void DrawTabControlTabs(TabControl tabControl, DrawItemEventArgs e, ImageList images)
        {
            // Get the bounding end of tab strip rectangles.
            Rectangle tabstripEndRect = tabControl.GetTabRect(tabControl.TabPages.Count - 1);
            RectangleF tabstripEndRectF = new RectangleF(tabstripEndRect.X + tabstripEndRect.Width, tabstripEndRect.Y - 5,
            tabControl.Width - (tabstripEndRect.X + tabstripEndRect.Width), tabstripEndRect.Height + 5);

            // First, do the end of the tab strip.
            // If we have an image use it.
            if (tabControl.Parent.BackgroundImage != null)
            {
                RectangleF src = new RectangleF(tabstripEndRectF.X + tabControl.Left, tabstripEndRectF.Y + tabControl.Top, tabstripEndRectF.Width, tabstripEndRectF.Height);
                e.Graphics.DrawImage(tabControl.Parent.BackgroundImage, tabstripEndRectF, src, GraphicsUnit.Pixel);
            }
            // If we have no image, use the background color.
            else
            {
                using (Brush backBrush = new SolidBrush(tabControl.Parent.BackColor))
                {
                    e.Graphics.FillRectangle(backBrush, tabstripEndRectF);
                }
            }

            // Set up the page and the various pieces.
            TabPage page = tabControl.TabPages[e.Index];
            Brush BackBrush = new SolidBrush(page.BackColor);
            Brush ForeBrush = new SolidBrush(page.ForeColor);
            string TabName = page.Text;

            // Set up the offset for an icon, the bounding rectangle and image size and then fill the background.
            int iconOffset = 0;
            Rectangle tabBackgroundRect = e.Bounds;
            e.Graphics.FillRectangle(BackBrush, tabBackgroundRect);

            // If we have images, process them.
            if (images != null)
            {
                // Get sice and image.
                Size size = images.ImageSize;
                Image icon = null;
                if (page.ImageIndex > -1)
                    icon = images.Images[page.ImageIndex];
                else if (page.ImageKey != "")
                    icon = images.Images[page.ImageKey];

                // If there is an image, use it.
                if (icon != null)
                {
                    Point startPoint = new Point(tabBackgroundRect.X + 2 + ((tabBackgroundRect.Height - size.Height) / 2),
                    tabBackgroundRect.Y + 2 + ((tabBackgroundRect.Height - size.Height) / 2));
                    e.Graphics.DrawImage(icon, new Rectangle(startPoint, size));
                    iconOffset = size.Width + 4;
                }
            }

            // Draw out the label.
            Rectangle labelRect = new Rectangle(tabBackgroundRect.X + iconOffset, tabBackgroundRect.Y + 3,
            tabBackgroundRect.Width - iconOffset, tabBackgroundRect.Height - 3);
            StringFormat sf = new StringFormat();
            sf.Alignment = StringAlignment.Center;
            e.Graphics.DrawString(TabName, e.Font, ForeBrush, labelRect, sf);

            //Dispose objects
            sf.Dispose();
            BackBrush.Dispose();
            ForeBrush.Dispose();
        }

#endif


~~~~~~~~~~~~~
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using WUApiLib;

namespace DigitalPlatform
{
    /// <summary>
    /// 调用 Windows Update
    /// </summary>
    public class WindowsUpdateUtil
    {
        // return:
        //      -1  出错
        //      >=0 安装的 update 个数
        public int InstallAllUpdates(out string strError)
        {
            strError = "";

            UpdateSession uSession = new UpdateSession();
            // UpdateSessionClass uSession = new UpdateSessionClass();
            IUpdateSearcher uSearcher = uSession.CreateUpdateSearcher();
            ISearchResult uResult = uSearcher.Search("IsInstalled=0 and Type='Software'");

            if (uResult.Updates.Count == 0)
                return 0;

            // All the updates found will be now populated into the uResult collection object, which can be accessed using the below foreach loop
            foreach (IUpdate update in uResult.Updates)
            {
                Console.WriteLine(update.Title);
            }

            // download them
            UpdateDownloader downloader = uSession.CreateUpdateDownloader();
            downloader.Updates = uResult.Updates;
            downloader.Download();

            // select them
            UpdateCollection updatesToInstall = new UpdateCollection();
            foreach (IUpdate update in uResult.Updates)
            {
                if (update.IsDownloaded)
                    updatesToInstall.Add(update);
            }

            IUpdateInstaller installer = uSession.CreateUpdateInstaller();
 installer.Updates = updatesToInstall;

 IInstallationResult installationRes = installer.Install();

            // display result
 for (int i = 0; i < updatesToInstall.Count; i++)
 {
     if (installationRes.GetUpdateResult(i).HResult == 0)
     {
         Console.WriteLine("Installed : " + updatesToInstall[i].Title);
     }
     else
     {
         Console.WriteLine("Failed : " + updatesToInstall[i].Title);
     }
 }

            return 0;
        }
    }
}


~~~

                // MessageBox.Show("only one instance at a time");

#if NO
                // send our Win32 message to make the currently running instance
                // jump on top of all the other windows
                API.PostMessage(
                    (IntPtr)API.HWND_BROADCAST,
                    API.WM_SHOWME,
                    IntPtr.Zero,
                    IntPtr.Zero);
#endif

#if NO
                        int style = API.GetWindowLong(process.MainWindowHandle, API.GWL_STYLE);
                        if ((style & API.WS_MINIMIZE) == API.WS_MINIMIZE)
                        {
                            API.ShowWindow(process.MainWindowHandle, API.SW_SHOWMAXIMIZED);
                        }
#endif


~~~

            if (mutex.WaitOne(TimeSpan.Zero, true)
                || args.IndexOf("newinstance") != -1)
            {
                if (StringUtil.IsDevelopMode() == false)
                    PrepareCatchException();

                Application.EnableVisualStyles();
                Application.SetCompatibleTextRenderingDefault(false);
                _mainForm = new MainForm();
                Application.Run(_mainForm);

            }
            else
            {

                string procName = Process.GetCurrentProcess().ProcessName;
                Process[] processes = Process.GetProcessesByName(procName);
                foreach (Process process in processes)
                {
                    if (process != null)
                    {
                        // Debug.Assert(false, "");

                        API.SetForegroundWindow(process.MainWindowHandle);
                        if (API.IsIconic(process.MainWindowHandle))
                        {
                            // API.ShowWindowAsync(process.MainWindowHandle, API.SW_RESTORE);
                            API.ShowWindow(process.MainWindowHandle, API.SW_SHOW);
                            API.ShowWindow(process.MainWindowHandle, API.SW_RESTORE);
                        }
                    }
                }
            }



			~~~
			
#if NO
        void _doViewProperty(bool bOpenWindow)
        {
            string strError = "";
            string strHtml = "";
            // string strXml = "";

            // 优化，避免无谓地进行服务器调用
            if (bOpenWindow == false)
            {
                if (this.MainForm.PanelFixedVisible == false
                    && (m_commentViewer == null || m_commentViewer.Visible == false))
                    return;
                // 2013/3/7
                if (this.MainForm.CanDisplayItemProperty() == false)
                    return;
            }

            if (this.m_biblioTable == null
                || this.listView_records.SelectedItems.Count != 1)
            {
                if (this.m_commentViewer != null)
                    this.m_commentViewer.Clear();
                return;
            }

            ListViewItem item = this.listView_records.SelectedItems[0];
#if NO
            string strRecPath = this.listView_records.SelectedItems[0].Text;
            if (string.IsNullOrEmpty(strRecPath) == true)
            {
                if (this.m_commentViewer != null)
                    this.m_commentViewer.Clear();
                return;
            }
#endif

            // BiblioInfo info = (BiblioInfo)this.m_biblioTable[strRecPath];
            BiblioInfo info = null;
            int nRet = GetBiblioInfo(
                true,
                item,
                out info,
                out strError);
            if (info == null)
            {
                if (this.m_commentViewer != null)
                    this.m_commentViewer.Clear();
                return;
            }

            string strXml1 = "";
            string strHtml2 = "";
            string strXml2 = "";

            if (nRet == -1)
            {
                strHtml2 = HttpUtility.HtmlEncode(strError);
            }
            else
            {
                nRet = GetXmlHtml(info,
                    out strXml1,
                    out strXml2,
                    out strHtml2,
                    out strError);
                if (nRet == -1)
                    goto ERROR1;
            }

            strHtml = "<html>" +
    GetHeadString() +
    "<body>" +
    strHtml2 +
    EntityForm.GetTimestampHtml(info.Timestamp) +
    "</body></html>";
            bool bNew = false;
            if (this.m_commentViewer == null
                || (bOpenWindow == true && this.m_commentViewer.Visible == false))
            {
                m_commentViewer = new CommentViewerForm();
                MainForm.SetControlFont(m_commentViewer, this.Font, false);
                bNew = true;
            }

            m_commentViewer.MainForm = this.MainForm;  // 必须是第一句

            if (bNew == true)
                m_commentViewer.InitialWebBrowser();

            m_commentViewer.Text = "MARC内容 '" + info.RecPath + "'";
            m_commentViewer.HtmlString = strHtml;
            m_commentViewer.XmlString = MergeXml(strXml1, strXml2);
            m_commentViewer.FormClosed -= new FormClosedEventHandler(marc_viewer_FormClosed);
            m_commentViewer.FormClosed += new FormClosedEventHandler(marc_viewer_FormClosed);
            // this.MainForm.AppInfo.LinkFormState(m_viewer, "comment_viewer_state");
            // m_viewer.ShowDialog(this);
            // this.MainForm.AppInfo.UnlinkFormState(m_viewer);
            if (bOpenWindow == true)
            {
                if (m_commentViewer.Visible == false)
                {
                    this.MainForm.AppInfo.LinkFormState(m_commentViewer, "marc_viewer_state");
                    m_commentViewer.Show(this);
                    m_commentViewer.Activate();

                    this.MainForm.CurrentPropertyControl = null;
                }
                else
                {
                    if (m_commentViewer.WindowState == FormWindowState.Minimized)
                        m_commentViewer.WindowState = FormWindowState.Normal;
                    m_commentViewer.Activate();
                }
            }
            else
            {
                if (m_commentViewer.Visible == true)
                {

                }
                else
                {
                    if (this.MainForm.CurrentPropertyControl != m_commentViewer.MainControl)
                        m_commentViewer.DoDock(false); // 不会自动显示FixedPanel
                }
            }
            return;
        ERROR1:
            MessageBox.Show(this, "DoViewComment() 出错: " + strError);
        }
#endif