
一些形式规则

属性全部为大写字母开头，方法全部以小写字母开头
类型全部用大写字母开头

目前dp2circulation中书目查询窗的宿主MarcQueryHost，本身继承了MarcQuery类型，但没有继承MarcRecord类，所以select()调用的时候要注意作用对象问题
将来可能有宿主继承MarcRecord类，这样会方便select()的写法，不用显式指定MarcRecord对象了

~~~

创建字段，观察记录内容

		MarcRecord record = new MarcRecord();	// 创建一个空的记录

		record.ChildNodes.add(new MarcField("200", "  ", SUBFLD + "aAAAA"));
		record.ChildNodes.add(new MarcField("300", "  ", SUBFLD + "bBBBB"));
		MessageBox.Show(this.MainForm, record.dump());

		不同的创建方法 MarcQuery.createFields()
		MarcRecord record = new MarcRecord();	// 创建一个空的记录
		record.ChildNodes.add(MarcQuery.createFields("200  " + MarcQuery.SUBFLD + "aAAAA" + MarcQuery.FLDEND + "300  " + MarcQuery.SUBFLD + "bBBBB"));
		MessageBox.Show(this.MainForm, record.dump());

		使用代用符号
		MarcRecord record = new MarcRecord();	// 创建一个空的记录
		record.ChildNodes.add(MarcQuery.createFields('$', '#', "200  $aAAAA#300  $bBBBB"));
		MessageBox.Show(this.MainForm, record.dump());

		不同的创建方法 append() 插入到下级末尾
		MarcRecord record = new MarcRecord();	// 创建一个空的记录
		record.append("200  " + MarcQuery.SUBFLD + "aAAAA" + MarcQuery.FLDEND + "300  " + MarcQuery.SUBFLD + "bBBBB");
		MessageBox.Show(this.MainForm, record.dump());

		// 级联写法
		MarcRecord record = (MarcRecord)new MarcRecord().append("200  " + MarcQuery.SUBFLD + "aAAAA" + MarcQuery.FLDEND + "300  " + MarcQuery.SUBFLD + "bBBBB");
		MessageBox.Show(this.MainForm, record.dump());

		// 创建MarcRecord的时候直接指定内容字符串
		MarcRecord record = new MarcRecord("012345678901234567890123200  " + MarcQuery.SUBFLD + "aAAAA" + MarcQuery.FLDEND + "300  " + MarcQuery.SUBFLD + "bBBBB");
		MessageBox.Show(this.MainForm, record.dump());

		// .Text
		MarcRecord record = new MarcRecord();	// 创建一个空的记录
		record.Text = "012345678901234567890123200  " + MarcQuery.SUBFLD + "aAAAA" + MarcQuery.FLDEND + "300  " + MarcQuery.SUBFLD + "bBBBB";
		MessageBox.Show(this.MainForm, record.dump());

~~~
选择字段
// 方式
先准备一条含有200字段的记录

		MarcRecord record = this.MarcRecord;

		record.ChildNodes.Add(new MarcField("200", "  ",  MarcQuery.SUBFLD + "aAAAA"));
		record.ChildNodes.Add(new MarcField("300", "  ",  MarcQuery.SUBFLD + "bBBBB"));

		MarcNodeList nodes = record.select("//field[@name='200']");
		MessageBox.Show(this.MainForm, nodes.count.ToString());


运行后应当能选出两个字段

~~~
选择字段
(根)下级对象 方式
先准备一条含有200字段的记录

		MarcRecord record = this.MarcRecord;

		record.ChildNodes.Add(new MarcField("200", "  ", MarcQuery.SUBFLD + "aAAAA"));
		record.ChildNodes.Add(new MarcField("300", "  ", MarcQuery.SUBFLD + "bBBBB"));

		MarcNodeList nodes = record.select("field[@name='200']");

运行后应当能选出两个字段

~~~
选择子字段
// 方式
先准备一条含有200字段的记录
		MarcRecord record = this.MarcRecord;

		record.ChildNodes.Add(new MarcField("200", "  ", MarcQuery.SUBFLD + "aAAAA"));
		record.ChildNodes.Add(new MarcField("300", "  ", MarcQuery.SUBFLD + "bBBBB"));

		MarcNodeList nodes = record.select("//field[@name='200']/subfield[@name='a']");

		
运行后应当能选出两个$a子字段

~~~
选择子字段
(根)下级对象 方式
先准备一条含有200字段的记录
		MarcRecord record = this.MarcRecord;

		record.ChildNodes.Add(new MarcField("200", "  ", MarcQuery.SUBFLD + "aAAAA"));
		record.ChildNodes.Add(new MarcField("300", "  ", MarcQuery.SUBFLD + "bBBBB"));

		MarcNodeList nodes = record.select("field[@name='200']/subfield[@name='a']");

		
运行后应当能选出两个$a子字段

~~~

dump()函数测试

		MarcRecord record = this.MarcRecord;

		record.ChildNodes.Add(new MarcField("200", "  ", MarcQuery.SUBFLD + "aAAAA"));
		record.ChildNodes.Add(new MarcField("300", "  ", MarcQuery.SUBFLD + "bBBBB"));

		MessageBox.Show(this.MainForm, record.Dump());

~~~

字段名改名测试

		MarcRecord record = this.MarcRecord;

		record.ChildNodes.Add(new MarcField("200", "  ", SUBFLD + "aAAAA"));
		record.ChildNodes.Add(new MarcField("300", "  ", SUBFLD + "bBBBB"));

		MarcNodeList nodes = record.SelectNodes("field[@name='200'][./subfield[@name='a']]");

		nodes.First().Name = "800";	// 修改集合内的第一个元素的Name

注： 

1) "field[@name='200'][./subfield[@name='a']]" 和 "field[@name='200'][subfield[@name='a']]"
都是可以的。 ./表明从当前位置开始，和直接用subfield一样。

~~~

修改字段名 (续)

		MarcRecord record = this.MarcRecord;

		record.ChildNodes.Add(new MarcField("200", "  ", SUBFLD + "bBBBB"));
		record.ChildNodes.Add(new MarcField("300", "  ", SUBFLD + "bBBBB"));

		MarcNodeList nodes = record.SelectNodes("field[@name='200'][./subfield[@name='a']]");

		nodes.Name = "800";	// 修改集合内的每个元素的Name

		注： 要选择200字段下有$a子字段的情形(返回的是字段对象)，第二个200因为不符合要求没有被选中。

~~~

级联书写方式。可以省去记忆集合的类型名

record.SelectNodes("field[@name='200'][./subfield[@name='a']]").Name = "800";


~~~

命名规则。成员、存取器的名字为大写开头，方法用小写开头？类型名用大写开头

好处是：.Name是个属性，不能有括号；.name()是个方法(相当于setName()的意思)，要有括号

xpath中的元素名和属性名都是小写开头

~~~

从集合中取一个局部。 length 为 -1表示一直取到末尾

GetAt(0) 只取一个元素出来，返回的也是一个集合对象

		MarcNodeList nodes = record.SelectNodes("//*").GetAt(0, -1);	// 


~~~

集合内再次筛选

		MarcRecord record = this.MarcRecord;

		record.ChildNodes.Add(new MarcField("200", "  ", SUBFLD + "bBBBB"));
		record.ChildNodes.Add(new MarcField("300", "  ", SUBFLD + "bBBBB"));

		MarcNodeList nodes = record.SelectNodes("*").SelectNodes("subfield[@name='a']");

~~~

修改字段名和子字段名的时候，不符合字符数要求的要抛出异常。可以用过滤函数，只修改一个集合中的字段或者子字段节点。

		MarcRecord record = this.MarcRecord;
		MarcNodeList nodes = record.SelectNodes("//*");

		nodes.Name = "800";

~~~
200字段的字段名修改为001时，指示符要变为空；反之要把字段内容头两个字符变为指示符

在这种情况下，字段节点的下级节点会重建，以前选中的集合中的子字段节点可能失效(被摘除，不再代表DOM上的节点)

可否有某种通知机制？第一，对摘除的节点，要把其Parent清空；第二，最好加上一个失效的标志，让这样的对象从此不能使用，一旦使用就抛出异常?

		MarcRecord record = this.MarcRecord;

		record.ChildNodes.Add(new MarcField("200", "  ",SUBFLD + "bAAAA"));
		record.ChildNodes.Add(new MarcField("300", "  ", SUBFLD + "bBBBB"));

		MarcNodeList nodes = record.SelectNodes("field[@name='200']");

		nodes.Name = "001";

		MessageBox.Show(this.MainForm, nodes.Dump(DumpStyle.LineNumber));

		nodes.Name = "200";

		MessageBox.Show(this.MainForm, nodes.Dump(DumpStyle.LineNumber));


~~~
字段内容前面的不属于任何子字段的字符串

		MarcRecord record = this.MarcRecord;

		record.ChildNodes.Add(new MarcField("900", "  ","leading" + SUBFLD + "aAAAA" + SUBFLD + "bBBBB"));
		MessageBox.Show(this.MainForm, record.Dump());

		record.SelectNodes("field[@name='900']").Leading = "new leading content";	// 修改leading部分
		MessageBox.Show(this.MainForm, record.Dump());

~~~
空的MarcRecord中插入字段，忘记了插入头标区怎么办？ 最后需要一个检查函数么?

如果中间步骤限制太严格，恐怕不好用了

		MarcRecord record = new MarcRecord();
		record.Header.DefaultChar = '?';	// 让头标区Dump出来时醒目

		record.ChildNodes.Add(new MarcField("200", "  ", SUBFLD + "aAAAA" + SUBFLD + "bBBBB"));
		record.ChildNodes.Add(new MarcField("300", "11", SUBFLD + "aAAAA" + SUBFLD + "bBBBB"));
		MessageBox.Show(this.MainForm, record.Dump());

~~~~

修改头标区内容。获取头标区内容 一个字符一次， 一段一次

		MarcRecord record = new MarcRecord();
		record.Header.DefaultChar = '?';	// 让头标区Dump出来时醒目
		record.Header[0, 5] = "01234";

		record.ChildNodes.Add(new MarcField("200", "  ", SUBFLD + "aAAAA" + SUBFLD + "bBBBB"));
		record.ChildNodes.Add(new MarcField("300", "11", SUBFLD + "aAAAA" + SUBFLD + "bBBBB"));
		MessageBox.Show(this.MainForm, record.Dump());

~~~
创建新MARC记录，把头标区设置为缺省值


~~~
挪动字段

insertAfter()

		MarcRecord record = this.MarcRecord;

		record.SelectNodes("field[@name='200']").insertAfter( record.SelectNodes("field[@name='690']") );
		MessageBox.Show(this.MainForm, record.Dump());
注：将200字段移动到690字段的后面
测试的时候需要注意，在特殊位置，也就是第一个和最末一个位置进行测试

~~~

挪动字段，目标位置有多个的情况

		MarcRecord record = this.MarcRecord;
		record.ChildNodes.Add(new MarcField("200", "  ", SUBFLD + "a第二个200"));
		record.ChildNodes.Add(new MarcField("606", "  ", SUBFLD + "aAAAA"));
		record.SelectNodes("field[@name='200']").insertAfter( record.SelectNodes("field[@name='606']") );
		MessageBox.Show(this.MainForm, record.Dump());
注：运行前确保记录中有多个606字段

~~~
挪动字段

after()

		MarcRecord record = this.MarcRecord;

		record.SelectNodes("field[@name='690']").after( record.SelectNodes("field[@name='200']") );
		MessageBox.Show(this.MainForm, record.Dump());
注：将200字段移动到690字段的后面
测试的时候需要注意，在特殊位置，也就是第一个和最末一个位置进行测试

~~~
根据文本构造新对象然后插入特定位置
after()

		MarcRecord record = this.MarcRecord;

		record.SelectNodes("field[@name='690']").after( "999  " + SUBFLD + "aAAAAAAAA" );
		MessageBox.Show(this.MainForm, record.Dump());

		可以一次连续插入多个字段

		MarcRecord record = this.MarcRecord;

		record.SelectNodes("field[@name='690']").after( "999  " + SUBFLD + "a第一个" + FLDEND + "999  " + SUBFLD + "a第二个");
		MessageBox.Show(this.MainForm, record.Dump());

		插入子字段

		MarcRecord record = this.MarcRecord;

		record.SelectNodes("field[@name='690']")[0].ChildNodes.after( SUBFLD + "x第一个" + SUBFLD + "z第二个");
		MessageBox.Show(this.MainForm, record.Dump());

		xpath上面动脑筋，字段下第一个子字段

		record.SelectNodes("field[@name='690']/*[1]").after( SUBFLD + "x第一个" + SUBFLD + "z第二个");

		最后一个子字段
		record.SelectNodes("field[@name='690']/*[last()]").after( SUBFLD + "x第一个" + SUBFLD + "z第二个");

		利用 FirstChild 帮助

		record.SelectNodes("field[@name='690']")[0].FirstChild.after( SUBFLD + "x第一个" + SUBFLD + "z第二个");

		FirstChild 先构造为集合，然后再用集合的after()函数

		MarcNode node = record.SelectNodes("field[@name='690']")[0].FirstChild;
		MarcNodeList nodes = new MarcNodeList(node);
		nodes.after( SUBFLD + "x第一个" + SUBFLD + "z第二个");

		[0]毕竟危险，改用 First()
		注意 First() 得到的是个集合，不是MarcNode
		record.SelectNodes("field[@name='690']").First().FirstChild.after( SUBFLD + "x第一个" + SUBFLD + "z第二个");


~~~

使用便捷符号构造字段和子字段

		MarcRecord record = this.MarcRecord;
		record.ChildNodes.Add(new MarcField("200", "  ", new string [] {"aAAA", "bBBB"} ));

		record.ChildNodes.Add(new MarcField("001", "123456", "78" ));


~~~

创建字段,子字段对象测试

		MarcRecord record = this.MarcRecord;
		MarcField field = new MarcField();
		field.Text = "200  " + SUBFLD + "aAAAA";
		record.ChildNodes.Add(field);

		多种创建方式

		MarcQuery.DefaultChar = '|';

		MarcRecord record = this.MarcRecord;
		MarcField field = new MarcField();
		field.Name = "200";
		record.ChildNodes.Add(field);

		MarcSubfield subfield = new MarcSubfield();
		field.ChildNodes.Add(subfield);

		创建MarcSubfield的时候所用文字可以缺少第一个位置的子字段符号

		MarcRecord record = this.MarcRecord;
		MarcField field = new MarcField();
		field.Name = "200";
		record.ChildNodes.Add(field);

		MarcSubfield subfield = new MarcSubfield("aAAA");
		field.ChildNodes.Add(subfield);

~~~
使用子字段代用符号创建字段

		MarcRecord record = this.MarcRecord;
		MarcField field = new MarcField('$', "200  $aAAA");
		record.ChildNodes.Add(field);

注：创建子字段的时候不必使用代用符号，因为可以这样创建
		MarcSubfield subfield = new MarcSubfield("aAAA");
		field.ChildNodes.Add(subfield);

~~~
一次创建多个字段

		MarcRecord record = this.MarcRecord;
		MarcNodeList fields = MarcQuery.CreateFields("200  "+SUBFLD+"aAAA" + FLDEND + "300  " + SUBFLD + "aAAA");
		record.ChildNodes.AddRange(fields);

		可以使用代用字符
		MarcRecord record = this.MarcRecord;
		MarcNodeList fields = MarcQuery.CreateFields('$', '\r', "200  $aAAA\r300  $aAAA");
		record.ChildNodes.AddRange(fields);

~~~

在下级末尾添加节点

		MarcRecord record = this.MarcRecord;

		record.SelectNodes("field[@name='200']").append(SUBFLD + "zZZZ" + SUBFLD + "kKKK");

~~~
校验函数，检查树状关系的正确定。 也就是子对象的Parent是否正确指向父对象，父对象的ChildNodes中是否包含了子对象


~~~
字段按照字段名数字顺序插入
还可以自定义顺序规则

		MarcRecord record = this.MarcRecord;
		MarcField field = new MarcField('$', "606  $aAAAA");
		record.ChildNodes.InsertSequence(field);



~~~
子字段按照子字段名数字顺序插入
还可以自定义顺序规则


~~~
字段节点排序 子字段节点排序
可以自定义排序规则

	public override void Main()
	{
		MarcQuery.DefaultChar = '|';

		MarcRecord record = this.MarcRecord;
		MarcField field = new MarcField('$', "606  $aAAAA");
		record.ChildNodes.insertSequence(field, InsertSequenceStyle.PreferTail);

		record.ChildNodes.sort(new MarcNodeComparer());

		MessageBox.Show(this.MainForm, record.dump());

		this.Changed = true;
	}

        class MarcNodeComparer : IComparer<MarcNode>
        {
            int IComparer<MarcNode>.Compare(MarcNode x, MarcNode y)
            {
                // 如果名字字符串中出现了字符 '-'，需要特殊的比较方式
                if (x.Name.IndexOf("-") != -1 || y.Name.IndexOf("-") != -1)
                    return -1 * CompareFieldName(x.Name, y.Name);
                return -1 * string.Compare(x.Name, y.Name);
            }

            // 字段名字符串比较大小
            // "-01"理解为比"001"更小
            public static int CompareFieldName(string s1, string s2)
            {
                s1 = s1.Replace("-", "/");
                s2 = s2.Replace("-", "/");
                return string.CompareOrdinal(s1, s2);
            }
        }


~~~

appendTo() prependTo()

~~~

XPath中的contains函数

		record.selectNodes("*/subfield[contains(., '311')]").Content = "***************";


~~~
对集合进行select的时候，临时的根对象可以为MarcNode类型，这样即便选中这个元素，也可以专门把它在命中结果中排除，以维持干净的概念(意思就是把它当作不存在)

		MarcRecord record = this.MarcRecord;

		record.ChildNodes.add(new MarcField("200", "  ", SUBFLD + "bBBBB"));
		record.ChildNodes.add(new MarcField("300", "  ", SUBFLD + "bBBBB"));

		MarcNodeList nodes = record.select("//*").select("subfield[@name='a']");
		MessageBox.Show(this.MainForm, "count=" + nodes.count.ToString() + "\r\n" + nodes.dump());

~~~
evaluate() 函数，根据xpath获得字符串等结果


~~~

dump()的时候顺便做verify()
也可以在测试的程序中，每一步关键操作后主动调用verify()
verify()只是校验自己以下的子树部分。可以用 .Root.verify()来校验整个树


~~~
如果测试中需要比较两个MarcRecord对象的内容是否完全一样，可以用 record1.Text == record2.Text 来进行比较
MarcField MarcSubfield 对象也可以这样进行比较

也可以直接把.Text和一个既定的常用字符串进行比较，只是，字段结束符和子字段符号在常量字符串中书写起来不是那么容易