

        int Start(string strDataDir,
            out string strError)
        {
            strError = "";

            CloseHosts();

            List<string> urls = StringUtil.SplitList(this.HostUrl, ';');

            int i = 0;
            foreach (string strTempUrl in urls)
            {
                string strUrl = strTempUrl.Trim();

                if (string.IsNullOrEmpty(strUrl) == true)
                    continue;

                string strInstanceName = "";

                ServiceHost host = new ServiceHost(typeof(LibraryService));
                this.m_hosts.Add(host);

                HostInfo info = new HostInfo();
                info.DataDir = strDataDir;
                host.Extensions.Add(info);
                /// 
                // 绑定协议

                Uri uri = null;
                try
                {
                    uri = new Uri(strUrl);
                }
                catch (Exception ex)
                {
                    strError = "dp2Library OnStart() 警告：发现不正确的协议URL '" + strUrl + "' (异常信息: " + ex.Message + ")。该URL已被放弃绑定。";
                    return -1;
                }

                bool bHasWsHttp = false;
                string strCertSN = "";

                if (uri.Scheme.ToLower() == "net.pipe")
                {
                    host.AddServiceEndpoint(typeof(ILibraryService),
                        CreateNamedpipeBinding0(),
                        strUrl);
                }
                else if (uri.Scheme.ToLower() == "net.tcp")
                {
                    host.AddServiceEndpoint(typeof(ILibraryService),
                        CreateNetTcpBinding0(),
                        strUrl);
                }
                else if (uri.Scheme.ToLower() == "http")
                {
                    ServiceEndpoint endpoint = host.AddServiceEndpoint(typeof(ILibraryService),
    CreateWsHttpBinding1(),
    strUrl);
                    bHasWsHttp = true;
                }
                else if (uri.Scheme.ToLower() == "rest.http")
                {
                    ServiceEndpoint endpoint = host.AddServiceEndpoint(typeof(ILibraryServiceREST),
CreateWebHttpBinding1(),
strUrl.Substring(5));   // rest. 这几个字符要去掉
                    if (endpoint.Behaviors.Find<WebHttpBehavior>() == null)
                    {
                        WebHttpBehavior behavior = new WebHttpBehavior();
                        behavior.DefaultBodyStyle = System.ServiceModel.Web.WebMessageBodyStyle.Wrapped;
                        behavior.DefaultOutgoingResponseFormat = System.ServiceModel.Web.WebMessageFormat.Json;
                        behavior.AutomaticFormatSelectionEnabled = true;
                        behavior.HelpEnabled = true;
                        endpoint.Behaviors.Add(behavior);
                    }
                }
                else
                {
                    // 警告不能支持的协议
                    strError = "dp2Library OnStart() 警告：发现不能支持的协议类型 '" + strUrl + "'";
                    return -1;
                }

                // 如果具有ws1/ws2 binding，才启用证书
                if (bHasWsHttp == true)
                {
                    try
                    {
                        X509Certificate2 cert = GetCertificate(strCertSN,
                            out strError);
                        if (cert == null)
                        {
                            strError = "dp2Library OnStart() 准备证书 时发生错误: " + strError;
                            return -1;
                        }
                        else
                            host.Credentials.ServiceCertificate.Certificate = cert;

                    }
                    catch (Exception ex)
                    {
                        strError = "dp2Library OnStart() 获取证书时发生错误: " + ExceptionUtil.GetExceptionMessage(ex);
                        return -1;
                    }
                }

                // 只有第一个host才有metadata能力
                if (// i == 0 // 
                    uri.Scheme.ToLower() == "http"
                    && host.Description.Behaviors.Find<ServiceMetadataBehavior>() == null)
                {
                    string strMetadataUrl = strUrl;    //  "http://localhost:8001/dp2library/xe/";
                    if (strMetadataUrl[strMetadataUrl.Length - 1] != '/')
                        strMetadataUrl += "/";
                    strMetadataUrl += "metadata";

                    ServiceMetadataBehavior behavior = new ServiceMetadataBehavior();
                    behavior.HttpGetEnabled = true;
                    behavior.HttpGetUrl = new Uri(strMetadataUrl);
                    host.Description.Behaviors.Add(behavior);

                    this.MetadataUrl = strMetadataUrl;
                }

                if (host.Description.Behaviors.Find<ServiceThrottlingBehavior>() == null)
                {
                    ServiceThrottlingBehavior behavior = new ServiceThrottlingBehavior();
                    behavior.MaxConcurrentCalls = 50;
                    behavior.MaxConcurrentInstances = 1000;
                    behavior.MaxConcurrentSessions = 1000;
                    host.Description.Behaviors.Add(behavior);
                }

                // IncludeExceptionDetailInFaults
                ServiceDebugBehavior debug_behavior = host.Description.Behaviors.Find<ServiceDebugBehavior>();
                if (debug_behavior == null)
                {
                    host.Description.Behaviors.Add(new ServiceDebugBehavior() { IncludeExceptionDetailInFaults = true });
                }
                else
                {
                    if (debug_behavior.IncludeExceptionDetailInFaults == false)
                        debug_behavior.IncludeExceptionDetailInFaults = true;
                }

                host.Opening += new EventHandler(host_Opening);
                host.Closing += new EventHandler(m_host_Closing);

                try
                {
                    host.Open();
                }
                catch (Exception ex)
                {
                    strError = "dp2Library OnStart() host.Open() 时发生错误: instancename=[" + strInstanceName + "]:" + ExceptionUtil.GetExceptionMessage(ex);
                    return -1;
                }

#if NO
            strError = "test error";
            return -1;
#endif
                i++;
            }

            return 0;
        }